var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _InputBaseUtils = require('../InputBase/utils');
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var _utilsIsMuiElement = require('../utils/isMuiElement');
var _utilsIsMuiElementDefault = _parcelHelpers.interopDefault(_utilsIsMuiElement);
var _FormControlContext = require('./FormControlContext');
var _FormControlContextDefault = _parcelHelpers.interopDefault(_FormControlContext);
var styles = {
  /*Styles applied to the root element.*/
  root: {
    display: 'inline-flex',
    flexDirection: 'column',
    position: 'relative',
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: 'top'
  },
  /*Styles applied to the root element if `margin="normal"`.*/
  marginNormal: {
    marginTop: 16,
    marginBottom: 8
  },
  /*Styles applied to the root element if `margin="dense"`.*/
  marginDense: {
    marginTop: 8,
    marginBottom: 4
  },
  /*Styles applied to the root element if `fullWidth={true}`.*/
  fullWidth: {
    width: '100%'
  }
};
/**
* Provides context such as filled/focused/error/required for form inputs.
* Relying on the context provides high flexibility and ensures that the state always stays
* consistent across the children of the `FormControl`.
* This context is used by the following components:
*
*  - FormLabel
*  - FormHelperText
*  - Input
*  - InputLabel
*
* You can find one composition example below and more going to [the demos](/components/text-fields/#components).
*
* ```jsx
* <FormControl>
*   <InputLabel htmlFor="my-input">Email address</InputLabel>
*   <Input id="my-input" aria-describedby="my-helper-text" />
*   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
* </FormControl>
* ```
*
* ⚠️Only one input can be used within a FormControl.
*/
var FormControl = /*#__PURE__*/_react.forwardRef(function FormControl(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'primary' : _props$color, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, visuallyFocused = props.focused, _props$hiddenLabel = props.hiddenLabel, hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel, _props$margin = props.margin, margin = _props$margin === void 0 ? 'none' : _props$margin, _props$required = props.required, required = _props$required === void 0 ? false : _props$required, size = props.size, _props$variant = props.variant, variant = _props$variant === void 0 ? 'standard' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "className", "color", "component", "disabled", "error", "fullWidth", "focused", "hiddenLabel", "margin", "required", "size", "variant"]);
  var _React$useState = _react.useState(function () {
    // We need to iterate through the children and find the Input in order
    // to fully support server-side rendering.
    var initialAdornedStart = false;
    if (children) {
      _react.Children.forEach(children, function (child) {
        if (!_utilsIsMuiElementDefault.default(child, ['Input', 'Select'])) {
          return;
        }
        var input = _utilsIsMuiElementDefault.default(child, ['Select']) ? child.props.input : child;
        if (input && _InputBaseUtils.isAdornedStart(input.props)) {
          initialAdornedStart = true;
        }
      });
    }
    return initialAdornedStart;
  }), adornedStart = _React$useState[0], setAdornedStart = _React$useState[1];
  var _React$useState2 = _react.useState(function () {
    // We need to iterate through the children and find the Input in order
    // to fully support server-side rendering.
    var initialFilled = false;
    if (children) {
      _react.Children.forEach(children, function (child) {
        if (!_utilsIsMuiElementDefault.default(child, ['Input', 'Select'])) {
          return;
        }
        if (_InputBaseUtils.isFilled(child.props, true)) {
          initialFilled = true;
        }
      });
    }
    return initialFilled;
  }), filled = _React$useState2[0], setFilled = _React$useState2[1];
  var _React$useState3 = _react.useState(false), _focused = _React$useState3[0], setFocused = _React$useState3[1];
  var focused = visuallyFocused !== undefined ? visuallyFocused : _focused;
  if (disabled && focused) {
    setFocused(false);
  }
  var registerEffect;
  if ("development" !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var registeredInput = _react.useRef(false);
    registerEffect = function registerEffect() {
      if (registeredInput.current) {
        console.error(['Material-UI: There are multiple InputBase components inside a FormControl.', 'This is not supported. It might cause infinite rendering loops.', 'Only use one InputBase.'].join('\n'));
      }
      registeredInput.current = true;
      return function () {
        registeredInput.current = false;
      };
    };
  }
  var onFilled = _react.useCallback(function () {
    setFilled(true);
  }, []);
  var onEmpty = _react.useCallback(function () {
    setFilled(false);
  }, []);
  var childContext = {
    adornedStart: adornedStart,
    setAdornedStart: setAdornedStart,
    color: color,
    disabled: disabled,
    error: error,
    filled: filled,
    focused: focused,
    fullWidth: fullWidth,
    hiddenLabel: hiddenLabel,
    margin: (size === 'small' ? 'dense' : undefined) || margin,
    onBlur: function onBlur() {
      setFocused(false);
    },
    onEmpty: onEmpty,
    onFilled: onFilled,
    onFocus: function onFocus() {
      setFocused(true);
    },
    registerEffect: registerEffect,
    required: required,
    variant: variant
  };
  return (
    /*#__PURE__*/_react.createElement(_FormControlContextDefault.default.Provider, {
      value: childContext
    }, /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, margin !== 'none' && classes[("margin").concat(_utilsCapitalizeDefault.default(margin))], fullWidth && classes.fullWidth),
      ref: ref
    }, other), children))
  );
});
"development" !== "production" ? FormControl.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The contents of the form control.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['primary', 'secondary']),
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * If `true`, the label, input and helper text should be displayed in a disabled state.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, the label should be displayed in an error state.
  */
  error: _propTypesDefault.default.bool,
  /**
  * If `true`, the component will be displayed in focused state.
  */
  focused: _propTypesDefault.default.bool,
  /**
  * If `true`, the component will take up the full width of its container.
  */
  fullWidth: _propTypesDefault.default.bool,
  /**
  * If `true`, the label will be hidden.
  * This is used to increase density for a `FilledInput`.
  * Be sure to add `aria-label` to the `input` element.
  */
  hiddenLabel: _propTypesDefault.default.bool,
  /**
  * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
  */
  margin: _propTypesDefault.default.oneOf(['dense', 'none', 'normal']),
  /**
  * If `true`, the label will indicate that the input is required.
  */
  required: _propTypesDefault.default.bool,
  /**
  * The size of the text field.
  */
  size: _propTypesDefault.default.oneOf(['medium', 'small']),
  /**
  * The variant to use.
  */
  variant: _propTypesDefault.default.oneOf(['filled', 'outlined', 'standard'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiFormControl'
})(FormControl);
