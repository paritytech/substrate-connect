var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _InputBase = require('../InputBase');
var _InputBaseDefault = _parcelHelpers.interopDefault(_InputBase);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var styles = function styles(theme) {
  var light = theme.palette.type === 'light';
  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
  var backgroundColor = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';
  return {
    /*Styles applied to the root element.*/
    root: {
      position: 'relative',
      backgroundColor: backgroundColor,
      borderTopLeftRadius: theme.shape.borderRadius,
      borderTopRightRadius: theme.shape.borderRadius,
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      '&:hover': {
        backgroundColor: light ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)',
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: backgroundColor
        }
      },
      '&$focused': {
        backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)'
      },
      '&$disabled': {
        backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)'
      }
    },
    /*Styles applied to the root element if color secondary.*/
    colorSecondary: {
      '&$underline:after': {
        borderBottomColor: theme.palette.secondary.main
      }
    },
    /*Styles applied to the root element if `disableUnderline={false}`.*/
    underline: {
      '&:after': {
        borderBottom: ("2px solid ").concat(theme.palette.primary.main),
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: 'absolute',
        right: 0,
        transform: 'scaleX(0)',
        transition: theme.transitions.create('transform', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: 'none'
      },
      '&$focused:after': {
        transform: 'scaleX(1)'
      },
      '&$error:after': {
        borderBottomColor: theme.palette.error.main,
        transform: 'scaleX(1)'
      },
      '&:before': {
        borderBottom: ("1px solid ").concat(bottomLineColor),
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: 'absolute',
        right: 0,
        transition: theme.transitions.create('border-bottom-color', {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: 'none'
      },
      '&:hover:before': {
        borderBottom: ("1px solid ").concat(theme.palette.text.primary)
      },
      '&$disabled:before': {
        borderBottomStyle: 'dotted'
      }
    },
    /*Pseudo-class applied to the root element if the component is focused.*/
    focused: {},
    /*Pseudo-class applied to the root element if `disabled={true}`.*/
    disabled: {},
    /*Styles applied to the root element if `startAdornment` is provided.*/
    adornedStart: {
      paddingLeft: 12
    },
    /*Styles applied to the root element if `endAdornment` is provided.*/
    adornedEnd: {
      paddingRight: 12
    },
    /*Pseudo-class applied to the root element if `error={true}`.*/
    error: {},
    /*Styles applied to the `input` element if `margin="dense"`.*/
    marginDense: {},
    /*Styles applied to the root element if `multiline={true}`.*/
    multiline: {
      padding: '27px 12px 10px',
      '&$marginDense': {
        paddingTop: 23,
        paddingBottom: 6
      }
    },
    /*Styles applied to the `input` element.*/
    input: {
      padding: '27px 12px 10px',
      '&:-webkit-autofill': {
        WebkitBoxShadow: theme.palette.type === 'light' ? null : '0 0 0 100px #266798 inset',
        WebkitTextFillColor: theme.palette.type === 'light' ? null : '#fff',
        caretColor: theme.palette.type === 'light' ? null : '#fff',
        borderTopLeftRadius: 'inherit',
        borderTopRightRadius: 'inherit'
      }
    },
    /*Styles applied to the `input` element if `margin="dense"`.*/
    inputMarginDense: {
      paddingTop: 23,
      paddingBottom: 6
    },
    /*Styles applied to the `input` if in `<FormControl hiddenLabel />`.*/
    inputHiddenLabel: {
      paddingTop: 18,
      paddingBottom: 19,
      '&$inputMarginDense': {
        paddingTop: 10,
        paddingBottom: 11
      }
    },
    /*Styles applied to the `input` element if `multiline={true}`.*/
    inputMultiline: {
      padding: 0
    },
    /*Styles applied to the `input` element if `startAdornment` is provided.*/
    inputAdornedStart: {
      paddingLeft: 0
    },
    /*Styles applied to the `input` element if `endAdornment` is provided.*/
    inputAdornedEnd: {
      paddingRight: 0
    }
  };
};
var FilledInput = /*#__PURE__*/_react.forwardRef(function FilledInput(props, ref) {
  var disableUnderline = props.disableUnderline, classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, _props$type = props.type, type = _props$type === void 0 ? 'text' : _props$type, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);
  return (
    /*#__PURE__*/_react.createElement(_InputBaseDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      classes: _babelRuntimeHelpersEsmExtendsDefault.default({}, classes, {
        root: _clsxDefault.default(classes.root, !disableUnderline && classes.underline),
        underline: null
      }),
      fullWidth: fullWidth,
      inputComponent: inputComponent,
      multiline: multiline,
      ref: ref,
      type: type
    }, other))
  );
});
"development" !== "production" ? FilledInput.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * This prop helps users to fill forms faster, especially on mobile devices.
  * The name can be confusing, as it's more like an autofill.
  * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
  */
  autoComplete: _propTypesDefault.default.string,
  /**
  * If `true`, the `input` element will be focused during the first mount.
  */
  autoFocus: _propTypesDefault.default.bool,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['primary', 'secondary']),
  /**
  * The default `input` element value. Use when the component is not controlled.
  */
  defaultValue: _propTypesDefault.default.any,
  /**
  * If `true`, the `input` element will be disabled.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, the input will not have an underline.
  */
  disableUnderline: _propTypesDefault.default.bool,
  /**
  * End `InputAdornment` for this component.
  */
  endAdornment: _propTypesDefault.default.node,
  /**
  * If `true`, the input will indicate an error. This is normally obtained via context from
  * FormControl.
  */
  error: _propTypesDefault.default.bool,
  /**
  * If `true`, the input will take up the full width of its container.
  */
  fullWidth: _propTypesDefault.default.bool,
  /**
  * The id of the `input` element.
  */
  id: _propTypesDefault.default.string,
  /**
  * The component used for the `input` element.
  * Either a string to use a HTML element or a component.
  */
  inputComponent: _propTypesDefault.default.elementType,
  /**
  * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
  */
  inputProps: _propTypesDefault.default.object,
  /**
  * Pass a ref to the `input` element.
  */
  inputRef: _materialUiUtils.refType,
  /**
  * If `dense`, will adjust vertical spacing. This is normally obtained via context from
  * FormControl.
  */
  margin: _propTypesDefault.default.oneOf(['dense', 'none']),
  /**
  * If `true`, a textarea element will be rendered.
  */
  multiline: _propTypesDefault.default.bool,
  /**
  * Name attribute of the `input` element.
  */
  name: _propTypesDefault.default.string,
  /**
  * Callback fired when the value is changed.
  *
  * @param {object} event The event source of the callback.
  * You can pull out the new value by accessing `event.target.value` (string).
  */
  onChange: _propTypesDefault.default.func,
  /**
  * The short hint displayed in the input before the user enters a value.
  */
  placeholder: _propTypesDefault.default.string,
  /**
  * It prevents the user from changing the value of the field
  * (not from interacting with the field).
  */
  readOnly: _propTypesDefault.default.bool,
  /**
  * If `true`, the `input` element will be required.
  */
  required: _propTypesDefault.default.bool,
  /**
  * Number of rows to display when multiline option is set to true.
  */
  rows: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.string]),
  /**
  * Maximum number of rows to display when multiline option is set to true.
  */
  rowsMax: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.string]),
  /**
  * Start `InputAdornment` for this component.
  */
  startAdornment: _propTypesDefault.default.node,
  /**
  * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
  */
  type: _propTypesDefault.default.string,
  /**
  * The value of the `input` element, required for a controlled component.
  */
  value: _propTypesDefault.default.any
} : void 0;
FilledInput.muiName = 'Input';
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiFilledInput'
})(FilledInput);
