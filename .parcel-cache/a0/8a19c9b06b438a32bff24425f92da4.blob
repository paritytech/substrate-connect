var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmSlicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _babelRuntimeHelpersEsmSlicedToArrayDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmSlicedToArray);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _utilsUseControlled = require('../utils/useControlled');
var _utilsUseControlledDefault = _parcelHelpers.interopDefault(_utilsUseControlled);
var _FormControlUseFormControl = require('../FormControl/useFormControl');
var _FormControlUseFormControlDefault = _parcelHelpers.interopDefault(_FormControlUseFormControl);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _IconButton = require('../IconButton');
var _IconButtonDefault = _parcelHelpers.interopDefault(_IconButton);
var styles = {
  root: {
    padding: 9
  },
  checked: {},
  disabled: {},
  input: {
    cursor: 'inherit',
    position: 'absolute',
    opacity: 0,
    width: '100%',
    height: '100%',
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  }
};
/**
* @ignore - internal component.
*/
var SwitchBase = /*#__PURE__*/_react.forwardRef(function SwitchBase(props, ref) {
  var autoFocus = props.autoFocus, checkedProp = props.checked, checkedIcon = props.checkedIcon, classes = props.classes, className = props.className, defaultChecked = props.defaultChecked, disabledProp = props.disabled, icon = props.icon, id = props.id, inputProps = props.inputProps, inputRef = props.inputRef, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, readOnly = props.readOnly, required = props.required, tabIndex = props.tabIndex, type = props.type, value = props.value, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["autoFocus", "checked", "checkedIcon", "classes", "className", "defaultChecked", "disabled", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"]);
  var _useControlled = _utilsUseControlledDefault.default({
    controlled: checkedProp,
    default: Boolean(defaultChecked),
    name: 'SwitchBase',
    state: 'checked'
  }), _useControlled2 = _babelRuntimeHelpersEsmSlicedToArrayDefault.default(_useControlled, 2), checked = _useControlled2[0], setCheckedState = _useControlled2[1];
  var muiFormControl = _FormControlUseFormControlDefault.default();
  var handleFocus = function handleFocus(event) {
    if (onFocus) {
      onFocus(event);
    }
    if (muiFormControl && muiFormControl.onFocus) {
      muiFormControl.onFocus(event);
    }
  };
  var handleBlur = function handleBlur(event) {
    if (onBlur) {
      onBlur(event);
    }
    if (muiFormControl && muiFormControl.onBlur) {
      muiFormControl.onBlur(event);
    }
  };
  var handleInputChange = function handleInputChange(event) {
    var newChecked = event.target.checked;
    setCheckedState(newChecked);
    if (onChange) {
      // TODO v5: remove the second argument.
      onChange(event, newChecked);
    }
  };
  var disabled = disabledProp;
  if (muiFormControl) {
    if (typeof disabled === 'undefined') {
      disabled = muiFormControl.disabled;
    }
  }
  var hasLabelFor = type === 'checkbox' || type === 'radio';
  return (
    /*#__PURE__*/_react.createElement(_IconButtonDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      component: "span",
      className: _clsxDefault.default(classes.root, className, checked && classes.checked, disabled && classes.disabled),
      disabled: disabled,
      tabIndex: null,
      role: undefined,
      onFocus: handleFocus,
      onBlur: handleBlur,
      ref: ref
    }, other), /*#__PURE__*/_react.createElement("input", _babelRuntimeHelpersEsmExtendsDefault.default({
      autoFocus: autoFocus,
      checked: checkedProp,
      defaultChecked: defaultChecked,
      className: classes.input,
      disabled: disabled,
      id: hasLabelFor && id,
      name: name,
      onChange: handleInputChange,
      readOnly: readOnly,
      ref: inputRef,
      required: required,
      tabIndex: tabIndex,
      type: type,
      value: value
    }, inputProps)), checked ? checkedIcon : icon)
  );
});
// NB: If changed, please update Checkbox, Switch and Radio
// so that the API documentation is updated.
"development" !== "production" ? SwitchBase.propTypes = {
  /**
  * If `true`, the `input` element will be focused during the first mount.
  */
  autoFocus: _propTypesDefault.default.bool,
  /**
  * If `true`, the component is checked.
  */
  checked: _propTypesDefault.default.bool,
  /**
  * The icon to display when the component is checked.
  */
  checkedIcon: _propTypesDefault.default.node.isRequired,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * @ignore
  */
  defaultChecked: _propTypesDefault.default.bool,
  /**
  * If `true`, the switch will be disabled.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * The icon to display when the component is unchecked.
  */
  icon: _propTypesDefault.default.node.isRequired,
  /**
  * The id of the `input` element.
  */
  id: _propTypesDefault.default.string,
  /**
  * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
  */
  inputProps: _propTypesDefault.default.object,
  /**
  * Pass a ref to the `input` element.
  */
  inputRef: _materialUiUtils.refType,
  /*
  * @ignore
  */
  name: _propTypesDefault.default.string,
  /**
  * @ignore
  */
  onBlur: _propTypesDefault.default.func,
  /**
  * Callback fired when the state is changed.
  *
  * @param {object} event The event source of the callback.
  * You can pull out the new checked state by accessing `event.target.checked` (boolean).
  */
  onChange: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onFocus: _propTypesDefault.default.func,
  /**
  * It prevents the user from changing the value of the field
  * (not from interacting with the field).
  */
  readOnly: _propTypesDefault.default.bool,
  /**
  * If `true`, the `input` element will be required.
  */
  required: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  tabIndex: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.string]),
  /**
  * The input component prop `type`.
  */
  type: _propTypesDefault.default.string.isRequired,
  /**
  * The value of the component.
  */
  value: _propTypesDefault.default.any
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'PrivateSwitchBase'
})(SwitchBase);
