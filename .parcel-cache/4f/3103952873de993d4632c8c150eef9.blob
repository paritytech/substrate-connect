var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
_parcelHelpers.export(exports, "isHorizontal", function () {
  return isHorizontal;
});
_parcelHelpers.export(exports, "getAnchor", function () {
  return getAnchor;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _Modal = require('../Modal');
var _ModalDefault = _parcelHelpers.interopDefault(_Modal);
var _Backdrop = require('../Backdrop');
var _BackdropDefault = _parcelHelpers.interopDefault(_Backdrop);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _Slide = require('../Slide');
var _SlideDefault = _parcelHelpers.interopDefault(_Slide);
var _Paper = require('../Paper');
var _PaperDefault = _parcelHelpers.interopDefault(_Paper);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var _stylesTransitions = require('../styles/transitions');
var _stylesUseTheme = require('../styles/useTheme');
var _stylesUseThemeDefault = _parcelHelpers.interopDefault(_stylesUseTheme);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: {},
    /*Styles applied to the root element if `variant="permanent or persistent"`.*/
    docked: {
      flex: '0 0 auto'
    },
    /*Styles applied to the `Paper` component.*/
    paper: {
      overflowY: 'auto',
      display: 'flex',
      flexDirection: 'column',
      height: '100%',
      flex: '1 0 auto',
      zIndex: theme.zIndex.drawer,
      WebkitOverflowScrolling: 'touch',
      // Add iOS momentum scrolling.
      // temporary style
      position: 'fixed',
      top: 0,
      // We disable the focus ring for mouse, touch and keyboard users.
      // At some point, it would be better to keep it for keyboard users.
      // :focus-ring CSS pseudo-class will help.
      outline: 0
    },
    /*Styles applied to the `Paper` component if `anchor="left"`.*/
    paperAnchorLeft: {
      left: 0,
      right: 'auto'
    },
    /*Styles applied to the `Paper` component if `anchor="right"`.*/
    paperAnchorRight: {
      left: 'auto',
      right: 0
    },
    /*Styles applied to the `Paper` component if `anchor="top"`.*/
    paperAnchorTop: {
      top: 0,
      left: 0,
      bottom: 'auto',
      right: 0,
      height: 'auto',
      maxHeight: '100%'
    },
    /*Styles applied to the `Paper` component if `anchor="bottom"`.*/
    paperAnchorBottom: {
      top: 'auto',
      left: 0,
      bottom: 0,
      right: 0,
      height: 'auto',
      maxHeight: '100%'
    },
    /*Styles applied to the `Paper` component if `anchor="left"` and `variant` is not "temporary".*/
    paperAnchorDockedLeft: {
      borderRight: ("1px solid ").concat(theme.palette.divider)
    },
    /*Styles applied to the `Paper` component if `anchor="top"` and `variant` is not "temporary".*/
    paperAnchorDockedTop: {
      borderBottom: ("1px solid ").concat(theme.palette.divider)
    },
    /*Styles applied to the `Paper` component if `anchor="right"` and `variant` is not "temporary".*/
    paperAnchorDockedRight: {
      borderLeft: ("1px solid ").concat(theme.palette.divider)
    },
    /*Styles applied to the `Paper` component if `anchor="bottom"` and `variant` is not "temporary".*/
    paperAnchorDockedBottom: {
      borderTop: ("1px solid ").concat(theme.palette.divider)
    },
    /*Styles applied to the `Modal` component.*/
    modal: {}
  };
};
var oppositeDirection = {
  left: 'right',
  right: 'left',
  top: 'down',
  bottom: 'up'
};
function isHorizontal(anchor) {
  return ['left', 'right'].indexOf(anchor) !== -1;
}
function getAnchor(theme, anchor) {
  return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
}
var defaultTransitionDuration = {
  enter: _stylesTransitions.duration.enteringScreen,
  exit: _stylesTransitions.duration.leavingScreen
};
/**
* The props of the [Modal](/api/modal/) component are available
* when `variant="temporary"` is set.
*/
var Drawer = /*#__PURE__*/_react.forwardRef(function Drawer(props, ref) {
  var _props$anchor = props.anchor, anchorProp = _props$anchor === void 0 ? 'left' : _props$anchor, BackdropProps = props.BackdropProps, children = props.children, classes = props.classes, className = props.className, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 16 : _props$elevation, _props$ModalProps = props.ModalProps;
  _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;
  var BackdropPropsProp = _props$ModalProps.BackdropProps, ModalProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(_props$ModalProps, ["BackdropProps"]), onClose = props.onClose, _props$open = props.open, open = _props$open === void 0 ? false : _props$open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, SlideProps = props.SlideProps, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _SlideDefault.default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura, _props$variant = props.variant, variant = _props$variant === void 0 ? 'temporary' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["anchor", "BackdropProps", "children", "classes", "className", "elevation", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"]);
  var theme = _stylesUseThemeDefault.default();
  // Let's assume that the Drawer will always be rendered on user space.
  // We use this state is order to skip the appear transition during the
  // initial mount of the component.
  var mounted = _react.useRef(false);
  _react.useEffect(function () {
    mounted.current = true;
  }, []);
  var anchor = getAnchor(theme, anchorProp);
  var drawer = /*#__PURE__*/_react.createElement(_PaperDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
    elevation: variant === 'temporary' ? elevation : 0,
    square: true
  }, PaperProps, {
    className: _clsxDefault.default(classes.paper, classes[("paperAnchor").concat(_utilsCapitalizeDefault.default(anchor))], PaperProps.className, variant !== 'temporary' && classes[("paperAnchorDocked").concat(_utilsCapitalizeDefault.default(anchor))])
  }), children);
  if (variant === 'permanent') {
    return (
      /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtendsDefault.default({
        className: _clsxDefault.default(classes.root, classes.docked, className),
        ref: ref
      }, other), drawer)
    );
  }
  var slidingDrawer = /*#__PURE__*/_react.createElement(TransitionComponent, _babelRuntimeHelpersEsmExtendsDefault.default({
    in: open,
    direction: oppositeDirection[anchor],
    timeout: transitionDuration,
    appear: mounted.current
  }, SlideProps), drawer);
  if (variant === 'persistent') {
    return (
      /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtendsDefault.default({
        className: _clsxDefault.default(classes.root, classes.docked, className),
        ref: ref
      }, other), slidingDrawer)
    );
  }
  // variant === temporary
  return (
    /*#__PURE__*/_react.createElement(_ModalDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      BackdropProps: _babelRuntimeHelpersEsmExtendsDefault.default({}, BackdropProps, BackdropPropsProp, {
        transitionDuration: transitionDuration
      }),
      BackdropComponent: _BackdropDefault.default,
      className: _clsxDefault.default(classes.root, classes.modal, className),
      open: open,
      onClose: onClose,
      ref: ref
    }, other, ModalProps), slidingDrawer)
  );
});
"development" !== "production" ? Drawer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * Side from which the drawer will appear.
  */
  anchor: _propTypesDefault.default.oneOf(['bottom', 'left', 'right', 'top']),
  /**
  * @ignore
  */
  BackdropProps: _propTypesDefault.default.object,
  /**
  * The contents of the drawer.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The elevation of the drawer.
  */
  elevation: _propTypesDefault.default.number,
  /**
  * Props applied to the [`Modal`](/api/modal/) element.
  */
  ModalProps: _propTypesDefault.default.object,
  /**
  * Callback fired when the component requests to be closed.
  *
  * @param {object} event The event source of the callback.
  */
  onClose: _propTypesDefault.default.func,
  /**
  * If `true`, the drawer is open.
  */
  open: _propTypesDefault.default.bool,
  /**
  * Props applied to the [`Paper`](/api/paper/) element.
  */
  PaperProps: _propTypesDefault.default.object,
  /**
  * Props applied to the [`Slide`](/api/slide/) element.
  */
  SlideProps: _propTypesDefault.default.object,
  /**
  * The duration for the transition, in milliseconds.
  * You may specify a single timeout for all transitions, or individually with an object.
  */
  transitionDuration: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.shape({
    appear: _propTypesDefault.default.number,
    enter: _propTypesDefault.default.number,
    exit: _propTypesDefault.default.number
  })]),
  /**
  * The variant to use.
  */
  variant: _propTypesDefault.default.oneOf(['permanent', 'persistent', 'temporary'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiDrawer',
  flip: false
})(Drawer);
