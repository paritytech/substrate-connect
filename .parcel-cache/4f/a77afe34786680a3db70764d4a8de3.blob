var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _react = require('react');
var _reactDom = require('react-dom');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _utilsOwnerDocument = require('../utils/ownerDocument');
var _utilsOwnerDocumentDefault = _parcelHelpers.interopDefault(_utilsOwnerDocument);
var _utilsUseForkRef = require('../utils/useForkRef');
var _utilsUseForkRefDefault = _parcelHelpers.interopDefault(_utilsUseForkRef);
var _materialUiUtils = require('@material-ui/utils');
/**
* Utility component that locks focus inside the component.
*/
function Unstable_TrapFocus(props) {
  var children = props.children, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, getDoc = props.getDoc, isEnabled = props.isEnabled, open = props.open;
  var ignoreNextEnforceFocus = _react.useRef();
  var sentinelStart = _react.useRef(null);
  var sentinelEnd = _react.useRef(null);
  var nodeToRestore = _react.useRef();
  var rootRef = _react.useRef(null);
  // can be removed once we drop support for non ref forwarding class components
  var handleOwnRef = _react.useCallback(function (instance) {
    // #StrictMode ready
    rootRef.current = _reactDom.findDOMNode(instance);
  }, []);
  var handleRef = _utilsUseForkRefDefault.default(children.ref, handleOwnRef);
  var prevOpenRef = _react.useRef();
  _react.useEffect(function () {
    prevOpenRef.current = open;
  }, [open]);
  if (!prevOpenRef.current && open && typeof window !== 'undefined') {
    // WARNING: Potentially unsafe in concurrent mode.
    // The way the read on `nodeToRestore` is setup could make this actually safe.
    // Say we render `open={false}` -> `open={true}` but never commit.
    // We have now written a state that wasn't committed. But no committed effect
    // will read this wrong value. We only read from `nodeToRestore` in effects
    // that were committed on `open={true}`
    // WARNING: Prevents the instance from being garbage collected. Should only
    // hold a weak ref.
    nodeToRestore.current = getDoc().activeElement;
  }
  _react.useEffect(function () {
    if (!open) {
      return;
    }
    var doc = _utilsOwnerDocumentDefault.default(rootRef.current);
    // We might render an empty child.
    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
      if (!rootRef.current.hasAttribute('tabIndex')) {
        if ("development" !== 'production') {
          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
        }
        rootRef.current.setAttribute('tabIndex', -1);
      }
      rootRef.current.focus();
    }
    var contain = function contain() {
      var rootElement = rootRef.current;
      // Cleanup functions are executed lazily in React 17.
      // Contain can be called between the component being unmounted and its cleanup function being run.
      if (rootElement === null) {
        return;
      }
      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
        ignoreNextEnforceFocus.current = false;
        return;
      }
      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {
        rootRef.current.focus();
      }
    };
    var loopFocus = function loopFocus(event) {
      // 9 = Tab
      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {
        return;
      }
      // Make sure the next tab starts from the right place.
      if (doc.activeElement === rootRef.current) {
        // We need to ignore the next contain as
        // it will try to move the focus back to the rootRef element.
        ignoreNextEnforceFocus.current = true;
        if (event.shiftKey) {
          sentinelEnd.current.focus();
        } else {
          sentinelStart.current.focus();
        }
      }
    };
    doc.addEventListener('focus', contain, true);
    doc.addEventListener('keydown', loopFocus, true);
    // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area
    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
    // 
    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
    var interval = setInterval(function () {
      contain();
    }, 50);
    return function () {
      clearInterval(interval);
      doc.removeEventListener('focus', contain, true);
      doc.removeEventListener('keydown', loopFocus, true);
      // restoreLastFocus()
      if (!disableRestoreFocus) {
        // In IE 11 it is possible for document.activeElement to be null resulting
        // in nodeToRestore.current being null.
        // Not all elements in IE 11 have a focus method.
        // Once IE 11 support is dropped the focus() call can be unconditional.
        if (nodeToRestore.current && nodeToRestore.current.focus) {
          nodeToRestore.current.focus();
        }
        nodeToRestore.current = null;
      }
    };
  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);
  return (
    /*#__PURE__*/_react.createElement(_react.Fragment, null, /*#__PURE__*/_react.createElement("div", {
      tabIndex: 0,
      ref: sentinelStart,
      "data-test": "sentinelStart"
    }), /*#__PURE__*/_react.cloneElement(children, {
      ref: handleRef
    }), /*#__PURE__*/_react.createElement("div", {
      tabIndex: 0,
      ref: sentinelEnd,
      "data-test": "sentinelEnd"
    }))
  );
}
"development" !== "production" ? Unstable_TrapFocus.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * A single child content element.
  */
  children: _propTypesDefault.default.node,
  /**
  * If `true`, the trap focus will not automatically shift focus to itself when it opens, and
  * replace it to the last focused element when it closes.
  * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.
  *
  * Generally this should never be set to `true` as it makes the trap focus less
  * accessible to assistive technologies, like screen readers.
  */
  disableAutoFocus: _propTypesDefault.default.bool,
  /**
  * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.
  *
  * Generally this should never be set to `true` as it makes the trap focus less
  * accessible to assistive technologies, like screen readers.
  */
  disableEnforceFocus: _propTypesDefault.default.bool,
  /**
  * If `true`, the trap focus will not restore focus to previously focused element once
  * trap focus is hidden.
  */
  disableRestoreFocus: _propTypesDefault.default.bool,
  /**
  * Return the document to consider.
  * We use it to implement the restore focus between different browser documents.
  */
  getDoc: _propTypesDefault.default.func.isRequired,
  /**
  * Do we still want to enforce the focus?
  * This prop helps nesting TrapFocus elements.
  */
  isEnabled: _propTypesDefault.default.func.isRequired,
  /**
  * If `true`, focus will be locked.
  */
  open: _propTypesDefault.default.bool.isRequired
} : void 0;
if ("development" !== 'production') {
  // eslint-disable-next-line
  Unstable_TrapFocus['propTypes' + ''] = _materialUiUtils.exactProp(Unstable_TrapFocus.propTypes);
}
exports.default = Unstable_TrapFocus;
