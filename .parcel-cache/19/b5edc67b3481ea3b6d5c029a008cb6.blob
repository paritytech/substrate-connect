var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmSlicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _babelRuntimeHelpersEsmSlicedToArrayDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmSlicedToArray);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _reactTransitionGroup = require('react-transition-group');
var _stylesUseTheme = require('../styles/useTheme');
var _stylesUseThemeDefault = _parcelHelpers.interopDefault(_stylesUseTheme);
var _transitionsUtils = require('../transitions/utils');
var _utilsUseForkRef = require('../utils/useForkRef');
var _utilsUseForkRefDefault = _parcelHelpers.interopDefault(_utilsUseForkRef);
function getScale(value) {
  return ("scale(").concat(value, ", ").concat(Math.pow(value, 2), ")");
}
var styles = {
  entering: {
    opacity: 1,
    transform: getScale(1)
  },
  entered: {
    opacity: 1,
    transform: 'none'
  }
};
/**
* The Grow transition is used by the [Tooltip](/components/tooltips/) and
* [Popover](/components/popover/) components.
* It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
*/
var Grow = /*#__PURE__*/_react.forwardRef(function Grow(props, ref) {
  var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? 'auto' : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _reactTransitionGroup.Transition : _props$TransitionComp, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
  var timer = _react.useRef();
  var autoTimeout = _react.useRef();
  var theme = _stylesUseThemeDefault.default();
  var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
  var nodeRef = _react.useRef(null);
  var foreignRef = _utilsUseForkRefDefault.default(children.ref, ref);
  var handleRef = _utilsUseForkRefDefault.default(enableStrictModeCompat ? nodeRef : undefined, foreignRef);
  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
    return function (nodeOrAppearing, maybeAppearing) {
      if (callback) {
        var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref2 = _babelRuntimeHelpersEsmSlicedToArrayDefault.default(_ref, 2), node = _ref2[0], isAppearing = _ref2[1];
        // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
        if (isAppearing === undefined) {
          callback(node);
        } else {
          callback(node, isAppearing);
        }
      }
    };
  };
  var handleEntering = normalizedTransitionCallback(onEntering);
  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
    _transitionsUtils.reflow(node);
    // So the animation always start from the start.
    var _getTransitionProps = _transitionsUtils.getTransitionProps({
      style: style,
      timeout: timeout
    }, {
      mode: 'enter'
    }), transitionDuration = _getTransitionProps.duration, delay = _getTransitionProps.delay;
    var duration;
    if (timeout === 'auto') {
      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
      autoTimeout.current = duration;
    } else {
      duration = transitionDuration;
    }
    node.style.transition = [theme.transitions.create('opacity', {
      duration: duration,
      delay: delay
    }), theme.transitions.create('transform', {
      duration: duration * 0.666,
      delay: delay
    })].join(',');
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  var handleEntered = normalizedTransitionCallback(onEntered);
  var handleExiting = normalizedTransitionCallback(onExiting);
  var handleExit = normalizedTransitionCallback(function (node) {
    var _getTransitionProps2 = _transitionsUtils.getTransitionProps({
      style: style,
      timeout: timeout
    }, {
      mode: 'exit'
    }), transitionDuration = _getTransitionProps2.duration, delay = _getTransitionProps2.delay;
    var duration;
    if (timeout === 'auto') {
      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
      autoTimeout.current = duration;
    } else {
      duration = transitionDuration;
    }
    node.style.transition = [theme.transitions.create('opacity', {
      duration: duration,
      delay: delay
    }), theme.transitions.create('transform', {
      duration: duration * 0.666,
      delay: delay || duration * 0.333
    })].join(',');
    node.style.opacity = '0';
    node.style.transform = getScale(0.75);
    if (onExit) {
      onExit(node);
    }
  });
  var handleExited = normalizedTransitionCallback(onExited);
  var addEndListener = function addEndListener(nodeOrNext, maybeNext) {
    var next = enableStrictModeCompat ? nodeOrNext : maybeNext;
    if (timeout === 'auto') {
      timer.current = setTimeout(next, autoTimeout.current || 0);
    }
  };
  _react.useEffect(function () {
    return function () {
      clearTimeout(timer.current);
    };
  }, []);
  return (
    /*#__PURE__*/_react.createElement(TransitionComponent, _babelRuntimeHelpersEsmExtendsDefault.default({
      appear: true,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : undefined,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: addEndListener,
      timeout: timeout === 'auto' ? null : timeout
    }, other), function (state, childProps) {
      return (
        /*#__PURE__*/_react.cloneElement(children, _babelRuntimeHelpersEsmExtendsDefault.default({
          style: _babelRuntimeHelpersEsmExtendsDefault.default({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles[state], style, children.props.style),
          ref: handleRef
        }, childProps))
      );
    })
  );
});
"development" !== "production" ? Grow.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * A single child content element.
  */
  children: _propTypesDefault.default.element,
  /**
  * Enable this prop if you encounter 'Function components cannot be given refs',
  * use `unstable_createStrictModeTheme`,
  * and can't forward the ref in the child component.
  */
  disableStrictModeCompat: _propTypesDefault.default.bool,
  /**
  * If `true`, show the component; triggers the enter or exit animation.
  */
  in: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  onEnter: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onEntered: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onEntering: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onExit: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onExited: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onExiting: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  style: _propTypesDefault.default.object,
  /**
  * The duration for the transition, in milliseconds.
  * You may specify a single timeout for all transitions, or individually with an object.
  *
  * Set to 'auto' to automatically calculate transition time based on height.
  */
  timeout: _propTypesDefault.default.oneOfType([_propTypesDefault.default.oneOf(['auto']), _propTypesDefault.default.number, _propTypesDefault.default.shape({
    appear: _propTypesDefault.default.number,
    enter: _propTypesDefault.default.number,
    exit: _propTypesDefault.default.number
  })])
} : void 0;
Grow.muiSupportAuto = true;
exports.default = Grow;
