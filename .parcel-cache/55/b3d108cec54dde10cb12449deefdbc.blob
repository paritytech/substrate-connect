var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _NativeSelectInput = require('./NativeSelectInput');
var _NativeSelectInputDefault = _parcelHelpers.interopDefault(_NativeSelectInput);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _FormControlFormControlState = require('../FormControl/formControlState');
var _FormControlFormControlStateDefault = _parcelHelpers.interopDefault(_FormControlFormControlState);
var _FormControlUseFormControl = require('../FormControl/useFormControl');
var _FormControlUseFormControlDefault = _parcelHelpers.interopDefault(_FormControlUseFormControl);
var _internalSvgIconsArrowDropDown = require('../internal/svg-icons/ArrowDropDown');
var _internalSvgIconsArrowDropDownDefault = _parcelHelpers.interopDefault(_internalSvgIconsArrowDropDown);
var _Input = require('../Input');
var _InputDefault = _parcelHelpers.interopDefault(_Input);
var styles = function styles(theme) {
  return {
    /*Styles applied to the select component `root` class.*/
    root: {},
    /*Styles applied to the select component `select` class.*/
    select: {
      '-moz-appearance': 'none',
      // Reset
      '-webkit-appearance': 'none',
      // Reset
      // When interacting quickly, the text can end up selected.
      // Native select can't be selected either.
      userSelect: 'none',
      borderRadius: 0,
      // Reset
      minWidth: 16,
      // So it doesn't collapse.
      cursor: 'pointer',
      '&:focus': {
        // Show that it's not an text input
        backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
        borderRadius: 0
      },
      // Remove IE 11 arrow
      '&::-ms-expand': {
        display: 'none'
      },
      '&$disabled': {
        cursor: 'default'
      },
      '&[multiple]': {
        height: 'auto'
      },
      '&:not([multiple]) option, &:not([multiple]) optgroup': {
        backgroundColor: theme.palette.background.paper
      },
      '&&': {
        paddingRight: 24
      }
    },
    /*Styles applied to the select component if `variant="filled"`.*/
    filled: {
      '&&': {
        paddingRight: 32
      }
    },
    /*Styles applied to the select component if `variant="outlined"`.*/
    outlined: {
      borderRadius: theme.shape.borderRadius,
      '&&': {
        paddingRight: 32
      }
    },
    /*Styles applied to the select component `selectMenu` class.*/
    selectMenu: {
      height: 'auto',
      // Resets for multpile select with chips
      minHeight: '1.1876em',
      // Required for select\text-field height consistency
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      overflow: 'hidden'
    },
    /*Pseudo-class applied to the select component `disabled` class.*/
    disabled: {},
    /*Styles applied to the icon component.*/
    icon: {
      // We use a position absolute over a flexbox in order to forward the pointer events
      // to the input and to support wrapping tags..
      position: 'absolute',
      right: 0,
      top: 'calc(50% - 12px)',
      // Center vertically
      pointerEvents: 'none',
      // Don't block pointer events on the select under the icon.
      color: theme.palette.action.active,
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    },
    /*Styles applied to the icon component if the popup is open.*/
    iconOpen: {
      transform: 'rotate(180deg)'
    },
    /*Styles applied to the icon component if `variant="filled"`.*/
    iconFilled: {
      right: 7
    },
    /*Styles applied to the icon component if `variant="outlined"`.*/
    iconOutlined: {
      right: 7
    },
    /*Styles applied to the underlying native input component.*/
    nativeInput: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      opacity: 0,
      pointerEvents: 'none',
      width: '100%'
    }
  };
};
var defaultInput = /*#__PURE__*/_react.createElement(_InputDefault.default, null);
/**
* An alternative to `<Select native />` with a much smaller bundle size footprint.
*/
var NativeSelect = /*#__PURE__*/_react.forwardRef(function NativeSelect(props, ref) {
  var children = props.children, classes = props.classes, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? _internalSvgIconsArrowDropDownDefault.default : _props$IconComponent, _props$input = props.input, input = _props$input === void 0 ? defaultInput : _props$input, inputProps = props.inputProps, variant = props.variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "IconComponent", "input", "inputProps", "variant"]);
  var muiFormControl = _FormControlUseFormControlDefault.default();
  var fcs = _FormControlFormControlStateDefault.default({
    props: props,
    muiFormControl: muiFormControl,
    states: ['variant']
  });
  return (
    /*#__PURE__*/_react.cloneElement(input, _babelRuntimeHelpersEsmExtendsDefault.default({
      // Most of the logic is implemented in `NativeSelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputComponent: _NativeSelectInputDefault.default,
      inputProps: _babelRuntimeHelpersEsmExtendsDefault.default({
        children: children,
        classes: classes,
        IconComponent: IconComponent,
        variant: fcs.variant,
        type: undefined
      }, inputProps, input ? input.props.inputProps : {}),
      ref: ref
    }, other))
  );
});
"development" !== "production" ? NativeSelect.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The option elements to populate the select with.
  * Can be some `<option>` elements.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * The icon that displays the arrow.
  */
  IconComponent: _propTypesDefault.default.elementType,
  /**
  * An `Input` element; does not have to be a material-ui specific `Input`.
  */
  input: _propTypesDefault.default.element,
  /**
  * Attributes applied to the `select` element.
  */
  inputProps: _propTypesDefault.default.object,
  /**
  * Callback function fired when a menu item is selected.
  *
  * @param {object} event The event source of the callback.
  * You can pull out the new value by accessing `event.target.value` (string).
  */
  onChange: _propTypesDefault.default.func,
  /**
  * The input value. The DOM API casts this to a string.
  */
  value: _propTypesDefault.default.any,
  /**
  * The variant to use.
  */
  variant: _propTypesDefault.default.oneOf(['filled', 'outlined', 'standard'])
} : void 0;
NativeSelect.muiName = 'Select';
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiNativeSelect'
})(NativeSelect);
