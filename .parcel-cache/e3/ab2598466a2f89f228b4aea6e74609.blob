var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var _stylesColorManipulator = require('../styles/colorManipulator');
var _TableTableContext = require('../Table/TableContext');
var _TableTableContextDefault = _parcelHelpers.interopDefault(_TableTableContext);
var _TableTablelvl2Context = require('../Table/Tablelvl2Context');
var _TableTablelvl2ContextDefault = _parcelHelpers.interopDefault(_TableTablelvl2Context);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: _babelRuntimeHelpersEsmExtendsDefault.default({}, theme.typography.body2, {
      display: 'table-cell',
      verticalAlign: 'inherit',
      // Workaround for a rendering bug with spanned columns in Chrome 62.0.
      // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
      borderBottom: ("1px solid\n    ").concat(theme.palette.type === 'light' ? _stylesColorManipulator.lighten(_stylesColorManipulator.fade(theme.palette.divider, 1), 0.88) : _stylesColorManipulator.darken(_stylesColorManipulator.fade(theme.palette.divider, 1), 0.68)),
      textAlign: 'left',
      padding: 16
    }),
    /*Styles applied to the root element if `variant="head"` or `context.table.head`.*/
    head: {
      color: theme.palette.text.primary,
      lineHeight: theme.typography.pxToRem(24),
      fontWeight: theme.typography.fontWeightMedium
    },
    /*Styles applied to the root element if `variant="body"` or `context.table.body`.*/
    body: {
      color: theme.palette.text.primary
    },
    /*Styles applied to the root element if `variant="footer"` or `context.table.footer`.*/
    footer: {
      color: theme.palette.text.secondary,
      lineHeight: theme.typography.pxToRem(21),
      fontSize: theme.typography.pxToRem(12)
    },
    /*Styles applied to the root element if `size="small"`.*/
    sizeSmall: {
      padding: '6px 24px 6px 16px',
      '&:last-child': {
        paddingRight: 16
      },
      '&$paddingCheckbox': {
        width: 24,
        // prevent the checkbox column from growing
        padding: '0 12px 0 16px',
        '&:last-child': {
          paddingLeft: 12,
          paddingRight: 16
        },
        '& > *': {
          padding: 0
        }
      }
    },
    /*Styles applied to the root element if `padding="checkbox"`.*/
    paddingCheckbox: {
      width: 48,
      // prevent the checkbox column from growing
      padding: '0 0 0 4px',
      '&:last-child': {
        paddingLeft: 0,
        paddingRight: 4
      }
    },
    /*Styles applied to the root element if `padding="none"`.*/
    paddingNone: {
      padding: 0,
      '&:last-child': {
        padding: 0
      }
    },
    /*Styles applied to the root element if `align="left"`.*/
    alignLeft: {
      textAlign: 'left'
    },
    /*Styles applied to the root element if `align="center"`.*/
    alignCenter: {
      textAlign: 'center'
    },
    /*Styles applied to the root element if `align="right"`.*/
    alignRight: {
      textAlign: 'right',
      flexDirection: 'row-reverse'
    },
    /*Styles applied to the root element if `align="justify"`.*/
    alignJustify: {
      textAlign: 'justify'
    },
    /*Styles applied to the root element if `context.table.stickyHeader={true}`.*/
    stickyHeader: {
      position: 'sticky',
      top: 0,
      left: 0,
      zIndex: 2,
      backgroundColor: theme.palette.background.default
    }
  };
};
/**
* The component renders a `<th>` element when the parent context is a header
* or otherwise a `<td>` element.
*/
var TableCell = /*#__PURE__*/_react.forwardRef(function TableCell(props, ref) {
  var _props$align = props.align, align = _props$align === void 0 ? 'inherit' : _props$align, classes = props.classes, className = props.className, component = props.component, paddingProp = props.padding, scopeProp = props.scope, sizeProp = props.size, sortDirection = props.sortDirection, variantProp = props.variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["align", "classes", "className", "component", "padding", "scope", "size", "sortDirection", "variant"]);
  var table = _react.useContext(_TableTableContextDefault.default);
  var tablelvl2 = _react.useContext(_TableTablelvl2ContextDefault.default);
  var isHeadCell = tablelvl2 && tablelvl2.variant === 'head';
  var role;
  var Component;
  if (component) {
    Component = component;
    role = isHeadCell ? 'columnheader' : 'cell';
  } else {
    Component = isHeadCell ? 'th' : 'td';
  }
  var scope = scopeProp;
  if (!scope && isHeadCell) {
    scope = 'col';
  }
  var padding = paddingProp || (table && table.padding ? table.padding : 'default');
  var size = sizeProp || (table && table.size ? table.size : 'medium');
  var variant = variantProp || tablelvl2 && tablelvl2.variant;
  var ariaSort = null;
  if (sortDirection) {
    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
  }
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      ref: ref,
      className: _clsxDefault.default(classes.root, classes[variant], className, align !== 'inherit' && classes[("align").concat(_utilsCapitalizeDefault.default(align))], padding !== 'default' && classes[("padding").concat(_utilsCapitalizeDefault.default(padding))], size !== 'medium' && classes[("size").concat(_utilsCapitalizeDefault.default(size))], variant === 'head' && table && table.stickyHeader && classes.stickyHeader),
      "aria-sort": ariaSort,
      role: role,
      scope: scope
    }, other))
  );
});
"development" !== "production" ? TableCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * Set the text-align on the table cell content.
  *
  * Monetary or generally number fields **should be right aligned** as that allows
  * you to add them up quickly in your head without having to worry about decimals.
  */
  align: _propTypesDefault.default.oneOf(['center', 'inherit', 'justify', 'left', 'right']),
  /**
  * The table cell contents.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * Sets the padding applied to the cell.
  * By default, the Table parent component set the value (`default`).
  */
  padding: _propTypesDefault.default.oneOf(['checkbox', 'default', 'none']),
  /**
  * Set scope attribute.
  */
  scope: _propTypesDefault.default.string,
  /**
  * Specify the size of the cell.
  * By default, the Table parent component set the value (`medium`).
  */
  size: _propTypesDefault.default.oneOf(['medium', 'small']),
  /**
  * Set aria-sort direction.
  */
  sortDirection: _propTypesDefault.default.oneOf(['asc', 'desc', false]),
  /**
  * Specify the cell type.
  * By default, the TableHead, TableBody or TableFooter parent component set the value.
  */
  variant: _propTypesDefault.default.oneOf(['body', 'footer', 'head'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiTableCell'
})(TableCell);
