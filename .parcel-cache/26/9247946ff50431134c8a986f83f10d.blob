var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiCoreStyles = require('@material-ui/core/styles');
var _materialUiCorePaper = require('@material-ui/core/Paper');
var _materialUiCorePaperDefault = _parcelHelpers.interopDefault(_materialUiCorePaper);
var _internalSvgIconsSuccessOutlined = require('../internal/svg-icons/SuccessOutlined');
var _internalSvgIconsSuccessOutlinedDefault = _parcelHelpers.interopDefault(_internalSvgIconsSuccessOutlined);
var _internalSvgIconsReportProblemOutlined = require('../internal/svg-icons/ReportProblemOutlined');
var _internalSvgIconsReportProblemOutlinedDefault = _parcelHelpers.interopDefault(_internalSvgIconsReportProblemOutlined);
var _internalSvgIconsErrorOutline = require('../internal/svg-icons/ErrorOutline');
var _internalSvgIconsErrorOutlineDefault = _parcelHelpers.interopDefault(_internalSvgIconsErrorOutline);
var _internalSvgIconsInfoOutlined = require('../internal/svg-icons/InfoOutlined');
var _internalSvgIconsInfoOutlinedDefault = _parcelHelpers.interopDefault(_internalSvgIconsInfoOutlined);
var _internalSvgIconsClose = require('../internal/svg-icons/Close');
var _internalSvgIconsCloseDefault = _parcelHelpers.interopDefault(_internalSvgIconsClose);
var _materialUiCoreIconButton = require('@material-ui/core/IconButton');
var _materialUiCoreIconButtonDefault = _parcelHelpers.interopDefault(_materialUiCoreIconButton);
var _materialUiCoreUtils = require('@material-ui/core/utils');
var styles = function styles(theme) {
  var getColor = theme.palette.type === 'light' ? _materialUiCoreStyles.darken : _materialUiCoreStyles.lighten;
  var getBackgroundColor = theme.palette.type === 'light' ? _materialUiCoreStyles.lighten : _materialUiCoreStyles.darken;
  return {
    /*Styles applied to the root element.*/
    root: _babelRuntimeHelpersEsmExtendsDefault.default({}, theme.typography.body2, {
      borderRadius: theme.shape.borderRadius,
      backgroundColor: 'transparent',
      display: 'flex',
      padding: '6px 16px'
    }),
    /*Styles applied to the root element if `variant="standard"` and `color="success"`.*/
    standardSuccess: {
      color: getColor(theme.palette.success.main, 0.6),
      backgroundColor: getBackgroundColor(theme.palette.success.main, 0.9),
      '& $icon': {
        color: theme.palette.success.main
      }
    },
    /*Styles applied to the root element if `variant="standard"` and `color="info"`.*/
    standardInfo: {
      color: getColor(theme.palette.info.main, 0.6),
      backgroundColor: getBackgroundColor(theme.palette.info.main, 0.9),
      '& $icon': {
        color: theme.palette.info.main
      }
    },
    /*Styles applied to the root element if `variant="standard"` and `color="warning"`.*/
    standardWarning: {
      color: getColor(theme.palette.warning.main, 0.6),
      backgroundColor: getBackgroundColor(theme.palette.warning.main, 0.9),
      '& $icon': {
        color: theme.palette.warning.main
      }
    },
    /*Styles applied to the root element if `variant="standard"` and `color="error"`.*/
    standardError: {
      color: getColor(theme.palette.error.main, 0.6),
      backgroundColor: getBackgroundColor(theme.palette.error.main, 0.9),
      '& $icon': {
        color: theme.palette.error.main
      }
    },
    /*Styles applied to the root element if `variant="outlined"` and `color="success"`.*/
    outlinedSuccess: {
      color: getColor(theme.palette.success.main, 0.6),
      border: ("1px solid ").concat(theme.palette.success.main),
      '& $icon': {
        color: theme.palette.success.main
      }
    },
    /*Styles applied to the root element if `variant="outlined"` and `color="info"`.*/
    outlinedInfo: {
      color: getColor(theme.palette.info.main, 0.6),
      border: ("1px solid ").concat(theme.palette.info.main),
      '& $icon': {
        color: theme.palette.info.main
      }
    },
    /*Styles applied to the root element if `variant="outlined"` and `color="warning"`.*/
    outlinedWarning: {
      color: getColor(theme.palette.warning.main, 0.6),
      border: ("1px solid ").concat(theme.palette.warning.main),
      '& $icon': {
        color: theme.palette.warning.main
      }
    },
    /*Styles applied to the root element if `variant="outlined"` and `color="error"`.*/
    outlinedError: {
      color: getColor(theme.palette.error.main, 0.6),
      border: ("1px solid ").concat(theme.palette.error.main),
      '& $icon': {
        color: theme.palette.error.main
      }
    },
    /*Styles applied to the root element if `variant="filled"` and `color="success"`.*/
    filledSuccess: {
      color: '#fff',
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.success.main
    },
    /*Styles applied to the root element if `variant="filled"` and `color="info"`.*/
    filledInfo: {
      color: '#fff',
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.info.main
    },
    /*Styles applied to the root element if `variant="filled"` and `color="warning"`.*/
    filledWarning: {
      color: '#fff',
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.warning.main
    },
    /*Styles applied to the root element if `variant="filled"` and `color="error"`.*/
    filledError: {
      color: '#fff',
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.error.main
    },
    /*Styles applied to the icon wrapper element.*/
    icon: {
      marginRight: 12,
      padding: '7px 0',
      display: 'flex',
      fontSize: 22,
      opacity: 0.9
    },
    /*Styles applied to the message wrapper element.*/
    message: {
      padding: '8px 0'
    },
    /*Styles applied to the action wrapper element if `action` is provided.*/
    action: {
      display: 'flex',
      alignItems: 'center',
      marginLeft: 'auto',
      paddingLeft: 16,
      marginRight: -8
    }
  };
};
var defaultIconMapping = {
  success: /*#__PURE__*/_react.createElement(_internalSvgIconsSuccessOutlinedDefault.default, {
    fontSize: "inherit"
  }),
  warning: /*#__PURE__*/_react.createElement(_internalSvgIconsReportProblemOutlinedDefault.default, {
    fontSize: "inherit"
  }),
  error: /*#__PURE__*/_react.createElement(_internalSvgIconsErrorOutlineDefault.default, {
    fontSize: "inherit"
  }),
  info: /*#__PURE__*/_react.createElement(_internalSvgIconsInfoOutlinedDefault.default, {
    fontSize: "inherit"
  })
};
var _ref = /*#__PURE__*/_react.createElement(_internalSvgIconsCloseDefault.default, {
  fontSize: "small"
});
var Alert = /*#__PURE__*/_react.forwardRef(function Alert(props, ref) {
  var action = props.action, children = props.children, classes = props.classes, className = props.className, _props$closeText = props.closeText, closeText = _props$closeText === void 0 ? 'Close' : _props$closeText, color = props.color, icon = props.icon, _props$iconMapping = props.iconMapping, iconMapping = _props$iconMapping === void 0 ? defaultIconMapping : _props$iconMapping, onClose = props.onClose, _props$role = props.role, role = _props$role === void 0 ? 'alert' : _props$role, _props$severity = props.severity, severity = _props$severity === void 0 ? 'success' : _props$severity, _props$variant = props.variant, variant = _props$variant === void 0 ? 'standard' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["action", "children", "classes", "className", "closeText", "color", "icon", "iconMapping", "onClose", "role", "severity", "variant"]);
  return (
    /*#__PURE__*/_react.createElement(_materialUiCorePaperDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      role: role,
      square: true,
      elevation: 0,
      className: _clsxDefault.default(classes.root, classes[("").concat(variant).concat(_materialUiCoreUtils.capitalize(color || severity))], className),
      ref: ref
    }, other), icon !== false ? /*#__PURE__*/_react.createElement("div", {
      className: classes.icon
    }, icon || iconMapping[severity] || defaultIconMapping[severity]) : null, /*#__PURE__*/_react.createElement("div", {
      className: classes.message
    }, children), action != null ? /*#__PURE__*/_react.createElement("div", {
      className: classes.action
    }, action) : null, action == null && onClose ? /*#__PURE__*/_react.createElement("div", {
      className: classes.action
    }, /*#__PURE__*/_react.createElement(_materialUiCoreIconButtonDefault.default, {
      size: "small",
      "aria-label": closeText,
      title: closeText,
      color: "inherit",
      onClick: onClose
    }, _ref)) : null)
  );
});
"development" !== "production" ? Alert.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The action to display. It renders after the message, at the end of the alert.
  */
  action: _propTypesDefault.default.node,
  /**
  * The content of the component.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * Override the default label for the *close popup* icon button.
  *
  * For localization purposes, you can use the provided [translations](/guides/localization/).
  */
  closeText: _propTypesDefault.default.string,
  /**
  * The main color for the alert. Unless provided, the value is taken from the `severity` prop.
  */
  color: _propTypesDefault.default.oneOf(['error', 'info', 'success', 'warning']),
  /**
  * Override the icon displayed before the children.
  * Unless provided, the icon is mapped to the value of the `severity` prop.
  */
  icon: _propTypesDefault.default.node,
  /**
  * The component maps the `severity` prop to a range of different icons,
  * for instance success to `<SuccessOutlined>`.
  * If you wish to change this mapping, you can provide your own.
  * Alternatively, you can use the `icon` prop to override the icon displayed.
  */
  iconMapping: _propTypesDefault.default.shape({
    error: _propTypesDefault.default.node,
    info: _propTypesDefault.default.node,
    success: _propTypesDefault.default.node,
    warning: _propTypesDefault.default.node
  }),
  /**
  * Callback fired when the component requests to be closed.
  * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
  *
  * @param {object} event The event source of the callback.
  */
  onClose: _propTypesDefault.default.func,
  /**
  * The ARIA role attribute of the element.
  */
  role: _propTypesDefault.default.string,
  /**
  * The severity of the alert. This defines the color and icon used.
  */
  severity: _propTypesDefault.default.oneOf(['error', 'info', 'success', 'warning']),
  /**
  * The variant to use.
  */
  variant: _propTypesDefault.default.oneOf(['filled', 'outlined', 'standard'])
} : void 0;
exports.default = _materialUiCoreStyles.withStyles(styles, {
  name: 'MuiAlert'
})(Alert);
