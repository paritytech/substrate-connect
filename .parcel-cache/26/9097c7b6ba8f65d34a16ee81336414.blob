var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _react = require('react');
var _reactDom = require('react-dom');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _utilsOwnerDocument = require('../utils/ownerDocument');
var _utilsOwnerDocumentDefault = _parcelHelpers.interopDefault(_utilsOwnerDocument);
var _utilsUseForkRef = require('../utils/useForkRef');
var _utilsUseForkRefDefault = _parcelHelpers.interopDefault(_utilsUseForkRef);
var _utilsUseEventCallback = require('../utils/useEventCallback');
var _utilsUseEventCallbackDefault = _parcelHelpers.interopDefault(_utilsUseEventCallback);
var _materialUiUtils = require('@material-ui/utils');
function mapEventPropToEvent(eventProp) {
  return eventProp.substring(2).toLowerCase();
}
function clickedRootScrollbar(event) {
  return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;
}
/**
* Listen for click events that occur somewhere in the document, outside of the element itself.
* For instance, if you need to hide a menu when people click anywhere else on your page.
*/
function ClickAwayListener(props) {
  var children = props.children, _props$disableReactTr = props.disableReactTree, disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr, _props$mouseEvent = props.mouseEvent, mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent, onClickAway = props.onClickAway, _props$touchEvent = props.touchEvent, touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent;
  var movedRef = _react.useRef(false);
  var nodeRef = _react.useRef(null);
  var activatedRef = _react.useRef(false);
  var syntheticEventRef = _react.useRef(false);
  _react.useEffect(function () {
    // Ensure that this component is not "activated" synchronously.
    // https://github.com/facebook/react/issues/20074
    setTimeout(function () {
      activatedRef.current = true;
    }, 0);
    return function () {
      activatedRef.current = false;
    };
  }, []);
  // can be removed once we drop support for non ref forwarding class components
  var handleOwnRef = _react.useCallback(function (instance) {
    // #StrictMode ready
    nodeRef.current = _reactDom.findDOMNode(instance);
  }, []);
  var handleRef = _utilsUseForkRefDefault.default(children.ref, handleOwnRef);
  // The handler doesn't take event.defaultPrevented into account:
  // 
  // event.preventDefault() is meant to stop default behaviours like
  // clicking a checkbox to check it, hitting a button to submit a form,
  // and hitting left arrow to move the cursor in a text input etc.
  // Only special HTML elements have these default behaviors.
  var handleClickAway = _utilsUseEventCallbackDefault.default(function (event) {
    // Given developers can stop the propagation of the synthetic event,
    // we can only be confident with a positive value.
    var insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    // 1. IE 11 support, which trigger the handleClickAway even after the unbind
    // 2. The child might render null.
    // 3. Behave like a blur listener.
    if (!activatedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {
      return;
    }
    // Do not act if user performed touchmove
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    var insideDOM;
    // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      // TODO v6 remove dead logic https://caniuse.com/#search=composedPath.
      var doc = _utilsOwnerDocumentDefault.default(nodeRef.current);
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && (disableReactTree || !insideReactTree)) {
      onClickAway(event);
    }
  });
  // Keep track of mouse/touch events that bubbled up through the portal.
  var createHandleSynthetic = function createHandleSynthetic(handlerName) {
    return function (event) {
      syntheticEventRef.current = true;
      var childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
  };
  var childrenProps = {
    ref: handleRef
  };
  if (touchEvent !== false) {
    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
  }
  _react.useEffect(function () {
    if (touchEvent !== false) {
      var mappedTouchEvent = mapEventPropToEvent(touchEvent);
      var doc = _utilsOwnerDocumentDefault.default(nodeRef.current);
      var handleTouchMove = function handleTouchMove() {
        movedRef.current = true;
      };
      doc.addEventListener(mappedTouchEvent, handleClickAway);
      doc.addEventListener('touchmove', handleTouchMove);
      return function () {
        doc.removeEventListener(mappedTouchEvent, handleClickAway);
        doc.removeEventListener('touchmove', handleTouchMove);
      };
    }
    return undefined;
  }, [handleClickAway, touchEvent]);
  if (mouseEvent !== false) {
    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
  }
  _react.useEffect(function () {
    if (mouseEvent !== false) {
      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);
      var doc = _utilsOwnerDocumentDefault.default(nodeRef.current);
      doc.addEventListener(mappedMouseEvent, handleClickAway);
      return function () {
        doc.removeEventListener(mappedMouseEvent, handleClickAway);
      };
    }
    return undefined;
  }, [handleClickAway, mouseEvent]);
  return (
    /*#__PURE__*/_react.createElement(_react.Fragment, null, /*#__PURE__*/_react.cloneElement(children, childrenProps))
  );
}
"development" !== "production" ? ClickAwayListener.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The wrapped element.
  */
  children: _materialUiUtils.elementAcceptingRef.isRequired,
  /**
  * If `true`, the React tree is ignored and only the DOM tree is considered.
  * This prop changes how portaled elements are handled.
  */
  disableReactTree: _propTypesDefault.default.bool,
  /**
  * The mouse event to listen to. You can disable the listener by providing `false`.
  */
  mouseEvent: _propTypesDefault.default.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),
  /**
  * Callback fired when a "click away" event is detected.
  */
  onClickAway: _propTypesDefault.default.func.isRequired,
  /**
  * The touch event to listen to. You can disable the listener by providing `false`.
  */
  touchEvent: _propTypesDefault.default.oneOf(['onTouchEnd', 'onTouchStart', false])
} : void 0;
if ("development" !== 'production') {
  // eslint-disable-next-line
  ClickAwayListener['propTypes' + ''] = _materialUiUtils.exactProp(ClickAwayListener.propTypes);
}
exports.default = ClickAwayListener;
