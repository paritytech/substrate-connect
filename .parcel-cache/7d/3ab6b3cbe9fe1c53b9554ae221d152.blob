var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _reactDom = require('react-dom');
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _utilsUseForkRef = require('../utils/useForkRef');
var _utilsUseForkRefDefault = _parcelHelpers.interopDefault(_utilsUseForkRef);
var _utilsUseEventCallback = require('../utils/useEventCallback');
var _utilsUseEventCallbackDefault = _parcelHelpers.interopDefault(_utilsUseEventCallback);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _utilsUseIsFocusVisible = require('../utils/useIsFocusVisible');
var _utilsUseIsFocusVisibleDefault = _parcelHelpers.interopDefault(_utilsUseIsFocusVisible);
var _TouchRipple = require('./TouchRipple');
var _TouchRippleDefault = _parcelHelpers.interopDefault(_TouchRipple);
var styles = {
  /*Styles applied to the root element.*/
  root: {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    WebkitTapHighlightColor: 'transparent',
    backgroundColor: 'transparent',
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    '-moz-appearance': 'none',
    // Reset
    '-webkit-appearance': 'none',
    // Reset
    textDecoration: 'none',
    // So we take precedent over the style of a native <a /> element.
    color: 'inherit',
    '&::-moz-focus-inner': {
      borderStyle: 'none'
    },
    '&$disabled': {
      pointerEvents: 'none',
      // Disable link interactions
      cursor: 'default'
    },
    '@media print': {
      colorAdjust: 'exact'
    }
  },
  /*Pseudo-class applied to the root element if `disabled={true}`.*/
  disabled: {},
  /*Pseudo-class applied to the root element if keyboard focused.*/
  focusVisible: {}
};
/**
* `ButtonBase` contains as few styles as possible.
* It aims to be a simple building block for creating a button.
* It contains a load of style reset and some focus/ripple logic.
*/
var ButtonBase = /*#__PURE__*/_react.forwardRef(function ButtonBase(props, ref) {
  var action = props.action, buttonRefProp = props.buttonRef, _props$centerRipple = props.centerRipple, centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple, children = props.children, classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? 'button' : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$disableTouchRi = props.disableTouchRipple, disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi, _props$focusRipple = props.focusRipple, focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple, focusVisibleClassName = props.focusVisibleClassName, onBlur = props.onBlur, onClick = props.onClick, onFocus = props.onFocus, onFocusVisible = props.onFocusVisible, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, onMouseDown = props.onMouseDown, onMouseLeave = props.onMouseLeave, onMouseUp = props.onMouseUp, onTouchEnd = props.onTouchEnd, onTouchMove = props.onTouchMove, onTouchStart = props.onTouchStart, onDragLeave = props.onDragLeave, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, TouchRippleProps = props.TouchRippleProps, _props$type = props.type, type = _props$type === void 0 ? 'button' : _props$type, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragLeave", "tabIndex", "TouchRippleProps", "type"]);
  var buttonRef = _react.useRef(null);
  function getButtonNode() {
    // #StrictMode ready
    return _reactDom.findDOMNode(buttonRef.current);
  }
  var rippleRef = _react.useRef(null);
  var _React$useState = _react.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
  if (disabled && focusVisible) {
    setFocusVisible(false);
  }
  var _useIsFocusVisible = _utilsUseIsFocusVisibleDefault.default(), isFocusVisible = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
  _react.useImperativeHandle(action, function () {
    return {
      focusVisible: function focusVisible() {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    };
  }, []);
  _react.useEffect(function () {
    if (focusVisible && focusRipple && !disableRipple) {
      rippleRef.current.pulsate();
    }
  }, [disableRipple, focusRipple, focusVisible]);
  function useRippleHandler(rippleAction, eventCallback) {
    var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;
    return _utilsUseEventCallbackDefault.default(function (event) {
      if (eventCallback) {
        eventCallback(event);
      }
      var ignore = skipRippleAction;
      if (!ignore && rippleRef.current) {
        rippleRef.current[rippleAction](event);
      }
      return true;
    });
  }
  var handleMouseDown = useRippleHandler('start', onMouseDown);
  var handleDragLeave = useRippleHandler('stop', onDragLeave);
  var handleMouseUp = useRippleHandler('stop', onMouseUp);
  var handleMouseLeave = useRippleHandler('stop', function (event) {
    if (focusVisible) {
      event.preventDefault();
    }
    if (onMouseLeave) {
      onMouseLeave(event);
    }
  });
  var handleTouchStart = useRippleHandler('start', onTouchStart);
  var handleTouchEnd = useRippleHandler('stop', onTouchEnd);
  var handleTouchMove = useRippleHandler('stop', onTouchMove);
  var handleBlur = useRippleHandler('stop', function (event) {
    if (focusVisible) {
      onBlurVisible(event);
      setFocusVisible(false);
    }
    if (onBlur) {
      onBlur(event);
    }
  }, false);
  var handleFocus = _utilsUseEventCallbackDefault.default(function (event) {
    // Fix for https://github.com/facebook/react/issues/7769
    if (!buttonRef.current) {
      buttonRef.current = event.currentTarget;
    }
    if (isFocusVisible(event)) {
      setFocusVisible(true);
      if (onFocusVisible) {
        onFocusVisible(event);
      }
    }
    if (onFocus) {
      onFocus(event);
    }
  });
  var isNonNativeButton = function isNonNativeButton() {
    var button = getButtonNode();
    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
  };
  /**
  * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
  */
  var keydownRef = _react.useRef(false);
  var handleKeyDown = _utilsUseEventCallbackDefault.default(function (event) {
    // Check if key is already down to avoid repeats being counted as multiple activations
    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
      keydownRef.current = true;
      event.persist();
      rippleRef.current.stop(event, function () {
        rippleRef.current.start(event);
      });
    }
    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
      event.preventDefault();
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
    // Keyboard accessibility for non interactive elements
    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
      event.preventDefault();
      if (onClick) {
        onClick(event);
      }
    }
  });
  var handleKeyUp = _utilsUseEventCallbackDefault.default(function (event) {
    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
      keydownRef.current = false;
      event.persist();
      rippleRef.current.stop(event, function () {
        rippleRef.current.pulsate(event);
      });
    }
    if (onKeyUp) {
      onKeyUp(event);
    }
    // Keyboard accessibility for non interactive elements
    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
      onClick(event);
    }
  });
  var ComponentProp = component;
  if (ComponentProp === 'button' && other.href) {
    ComponentProp = 'a';
  }
  var buttonProps = {};
  if (ComponentProp === 'button') {
    buttonProps.type = type;
    buttonProps.disabled = disabled;
  } else {
    if (ComponentProp !== 'a' || !other.href) {
      buttonProps.role = 'button';
    }
    buttonProps['aria-disabled'] = disabled;
  }
  var handleUserRef = _utilsUseForkRefDefault.default(buttonRefProp, ref);
  var handleOwnRef = _utilsUseForkRefDefault.default(focusVisibleRef, buttonRef);
  var handleRef = _utilsUseForkRefDefault.default(handleUserRef, handleOwnRef);
  var _React$useState2 = _react.useState(false), mountedState = _React$useState2[0], setMountedState = _React$useState2[1];
  _react.useEffect(function () {
    setMountedState(true);
  }, []);
  var enableTouchRipple = mountedState && !disableRipple && !disabled;
  if ("development" !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(function () {
      if (enableTouchRipple && !rippleRef.current) {
        console.error(['Material-UI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
      }
    }, [enableTouchRipple]);
  }
  return (
    /*#__PURE__*/_react.createElement(ComponentProp, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),
      onBlur: handleBlur,
      onClick: onClick,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex
    }, buttonProps, other), children, enableTouchRipple ? /*#__PURE__*/
    /*TouchRipple is only needed client-side, x2 boost on the server.*/
    _react.createElement(_TouchRippleDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      ref: rippleRef,
      center: centerRipple
    }, TouchRippleProps)) : null)
  );
});
"development" !== "production" ? ButtonBase.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * A ref for imperative actions.
  * It currently only supports `focusVisible()` action.
  */
  action: _materialUiUtils.refType,
  /**
  * @ignore
  *
  * Use that prop to pass a ref to the native button component.
  * @deprecated Use `ref` instead.
  */
  buttonRef: _materialUiUtils.refType,
  /**
  * If `true`, the ripples will be centered.
  * They won't start at the cursor interaction position.
  */
  centerRipple: _propTypesDefault.default.bool,
  /**
  * The content of the component.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _materialUiUtils.elementTypeAcceptingRef,
  /**
  * If `true`, the base button will be disabled.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, the ripple effect will be disabled.
  *
  * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
  * to highlight the element by applying separate styles with the `focusVisibleClassName`.
  */
  disableRipple: _propTypesDefault.default.bool,
  /**
  * If `true`, the touch ripple effect will be disabled.
  */
  disableTouchRipple: _propTypesDefault.default.bool,
  /**
  * If `true`, the base button will have a keyboard focus ripple.
  */
  focusRipple: _propTypesDefault.default.bool,
  /**
  * This prop can help a person know which element has the keyboard focus.
  * The class name will be applied when the element gain the focus through a keyboard interaction.
  * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
  * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
  * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
  * if needed.
  */
  focusVisibleClassName: _propTypesDefault.default.string,
  /**
  * @ignore
  */
  href: _propTypesDefault.default.string,
  /**
  * @ignore
  */
  onBlur: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onClick: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onDragLeave: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onFocus: _propTypesDefault.default.func,
  /**
  * Callback fired when the component is focused with a keyboard.
  * We trigger a `onFocus` callback too.
  */
  onFocusVisible: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onKeyDown: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onKeyUp: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onMouseDown: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onMouseLeave: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onMouseUp: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onTouchEnd: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onTouchMove: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onTouchStart: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  tabIndex: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.string]),
  /**
  * Props applied to the `TouchRipple` element.
  */
  TouchRippleProps: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  type: _propTypesDefault.default.oneOfType([_propTypesDefault.default.oneOf(['button', 'reset', 'submit']), _propTypesDefault.default.string])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiButtonBase'
})(ButtonBase);
