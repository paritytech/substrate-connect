var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmTypeof = require("@babel/runtime/helpers/esm/typeof");
var _babelRuntimeHelpersEsmTypeofDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmTypeof);
var _materialUiUtils = require('@material-ui/utils');
var _noopTheme = require('./noopTheme');
var _noopThemeDefault = _parcelHelpers.interopDefault(_noopTheme);
function getStylesCreator(stylesOrCreator) {
  var themingEnabled = typeof stylesOrCreator === 'function';
  if ("development" !== 'production') {
    if (_babelRuntimeHelpersEsmTypeofDefault.default(stylesOrCreator) !== 'object' && !themingEnabled) {
      console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\n'));
    }
  }
  return {
    create: function create(theme, name) {
      var styles;
      try {
        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
      } catch (err) {
        if ("development" !== 'production') {
          if (themingEnabled === true && theme === _noopThemeDefault.default) {
            // TODO: prepend error message/name instead
            console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
          }
        }
        throw err;
      }
      if (!name || !theme.overrides || !theme.overrides[name]) {
        return styles;
      }
      var overrides = theme.overrides[name];
      var stylesWithOverrides = _babelRuntimeHelpersEsmExtendsDefault.default({}, styles);
      Object.keys(overrides).forEach(function (key) {
        if ("development" !== 'production') {
          if (!stylesWithOverrides[key]) {
            console.warn(['Material-UI: You are trying to override a style that does not exist.', ("Fix the `").concat(key, "` key of `theme.overrides.").concat(name, "`.")].join('\n'));
          }
        }
        stylesWithOverrides[key] = _materialUiUtils.deepmerge(stylesWithOverrides[key], overrides[key]);
      });
      return stylesWithOverrides;
    },
    options: {}
  };
}
exports.default = getStylesCreator;
