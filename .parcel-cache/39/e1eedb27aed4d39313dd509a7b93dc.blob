var helpers = require("../../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _materialUiCore = require('@material-ui/core');
  var _materialUiIconsWhatshot = require('@material-ui/icons/Whatshot');
  var _materialUiIconsWhatshotDefault = _parcelHelpers.interopDefault(_materialUiIconsWhatshot);
  var _utilsContexts = require('../utils/contexts');
  var _utilsUtils = require('../utils/utils');
  var _hooks = require('../hooks');
  var _jsxFileName = "/Users/stormsheep/Documents/repos/parity/substrate-connect/projects/burnr/src/components/AccountBurn.tsx", _s = $RefreshSig$();
  const useStyles = _materialUiCore.makeStyles(theme => _materialUiCore.createStyles({
    redButton: {
      backgroundColor: theme.palette.error.main,
      color: 'white',
      marginTop: theme.spacing(12),
      '&:hover': {
        backgroundColor: theme.palette.error.light
      }
    }
  }));
  const AccountBurn = () => {
    _s();
    const classes = useStyles();
    const api = _hooks.useApi();
    const chainTokens = api.registry.chainTokens;
    const [endpoint] = _hooks.useLocalStorage('endpoint');
    const minEndpoint = endpoint?.split?.('-')?.[0]?.toLowerCase?.();
    const [, setLclStorage] = _hooks.useLocalStorage(minEndpoint);
    const {account, setCurrentAccount} = _react.useContext(_utilsContexts.AccountContext);
    const balance = _hooks.useBalance(account.userAddress);
    const burnAndCreate = () => {
      if (!balance[2] && !window.confirm(`Burn keys from account with ${balance[0]} ${chainTokens.join('')}?`)) {
        return;
      }
      localStorage.removeItem(minEndpoint);
      const userTmp = _utilsUtils.createLocalStorageAccount();
      setLclStorage(JSON.stringify(userTmp));
      setCurrentAccount(userTmp);
    };
    return (
      /*#__PURE__*/_reactDefault.default.createElement(_materialUiCore.Grid, {
        container: true,
        justify: "center",
        alignItems: "center",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49,
          columnNumber: 3
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_materialUiCore.Grid, {
        item: true,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_materialUiCore.Button, {
        variant: "contained",
        size: "large",
        className: classes.redButton,
        startIcon: /*#__PURE__*/_reactDefault.default.createElement(_materialUiIconsWhatshotDefault.default, {
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 59,
            columnNumber: 18
          }
        }),
        onClick: () => burnAndCreate(),
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55,
          columnNumber: 6
        }
      }, "Burn")))
    );
  };
  _s(AccountBurn, "+iICtPhPfhPbhazxkmPWekXLgeQ=", false, function () {
    return [useStyles, _hooks.useApi, _hooks.useLocalStorage, _hooks.useLocalStorage, _hooks.useBalance];
  });
  _c = AccountBurn;
  exports.default = AccountBurn;
  var _c;
  $RefreshReg$(_c, "AccountBurn");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
