var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _ButtonBase = require('../ButtonBase');
var _ButtonBaseDefault = _parcelHelpers.interopDefault(_ButtonBase);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: _babelRuntimeHelpersEsmExtendsDefault.default({}, theme.typography.button, {
      boxSizing: 'border-box',
      minHeight: 36,
      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
        duration: theme.transitions.duration.short
      }),
      borderRadius: '50%',
      padding: 0,
      minWidth: 0,
      width: 56,
      height: 56,
      boxShadow: theme.shadows[6],
      '&:active': {
        boxShadow: theme.shadows[12]
      },
      color: theme.palette.getContrastText(theme.palette.grey[300]),
      backgroundColor: theme.palette.grey[300],
      '&:hover': {
        backgroundColor: theme.palette.grey.A100,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.grey[300]
        },
        '&$disabled': {
          backgroundColor: theme.palette.action.disabledBackground
        },
        textDecoration: 'none'
      },
      '&$focusVisible': {
        boxShadow: theme.shadows[6]
      },
      '&$disabled': {
        color: theme.palette.action.disabled,
        boxShadow: theme.shadows[0],
        backgroundColor: theme.palette.action.disabledBackground
      }
    }),
    /*Styles applied to the span element that wraps the children.*/
    label: {
      width: '100%',
      // assure the correct width for iOS Safari
      display: 'inherit',
      alignItems: 'inherit',
      justifyContent: 'inherit'
    },
    /*Styles applied to the root element if `color="primary"`.*/
    primary: {
      color: theme.palette.primary.contrastText,
      backgroundColor: theme.palette.primary.main,
      '&:hover': {
        backgroundColor: theme.palette.primary.dark,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.primary.main
        }
      }
    },
    /*Styles applied to the root element if `color="secondary"`.*/
    secondary: {
      color: theme.palette.secondary.contrastText,
      backgroundColor: theme.palette.secondary.main,
      '&:hover': {
        backgroundColor: theme.palette.secondary.dark,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.secondary.main
        }
      }
    },
    /*Styles applied to the root element if `variant="extended"`.*/
    extended: {
      borderRadius: 48 / 2,
      padding: '0 16px',
      width: 'auto',
      minHeight: 'auto',
      minWidth: 48,
      height: 48,
      '&$sizeSmall': {
        width: 'auto',
        padding: '0 8px',
        borderRadius: 34 / 2,
        minWidth: 34,
        height: 34
      },
      '&$sizeMedium': {
        width: 'auto',
        padding: '0 16px',
        borderRadius: 40 / 2,
        minWidth: 40,
        height: 40
      }
    },
    /*Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.*/
    focusVisible: {},
    /*Pseudo-class applied to the root element if `disabled={true}`.*/
    disabled: {},
    /*Styles applied to the root element if `color="inherit"`.*/
    colorInherit: {
      color: 'inherit'
    },
    /*Styles applied to the root element if `size="small"``.*/
    sizeSmall: {
      width: 40,
      height: 40
    },
    /*Styles applied to the root element if `size="medium"``.*/
    sizeMedium: {
      width: 48,
      height: 48
    }
  };
};
var Fab = /*#__PURE__*/_react.forwardRef(function Fab(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'default' : _props$color, _props$component = props.component, component = _props$component === void 0 ? 'button' : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, focusVisibleClassName = props.focusVisibleClassName, _props$size = props.size, size = _props$size === void 0 ? 'large' : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? 'round' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"]);
  return (
    /*#__PURE__*/_react.createElement(_ButtonBaseDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, variant !== "round" && classes.extended, size !== 'large' && classes[("size").concat(_utilsCapitalizeDefault.default(size))], disabled && classes.disabled, ({
        'primary': classes.primary,
        'secondary': classes.secondary,
        'inherit': classes.colorInherit
      })[color]),
      component: component,
      disabled: disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: _clsxDefault.default(classes.focusVisible, focusVisibleClassName),
      ref: ref
    }, other), /*#__PURE__*/_react.createElement("span", {
      className: classes.label
    }, children))
  );
});
"development" !== "production" ? Fab.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The content of the button.
  */
  children: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  node.isRequired,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['default', 'inherit', 'primary', 'secondary']),
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * If `true`, the button will be disabled.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, the  keyboard focus ripple will be disabled.
  */
  disableFocusRipple: _propTypesDefault.default.bool,
  /**
  * If `true`, the ripple effect will be disabled.
  */
  disableRipple: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  focusVisibleClassName: _propTypesDefault.default.string,
  /**
  * The URL to link to when the button is clicked.
  * If defined, an `a` element will be used as the root node.
  */
  href: _propTypesDefault.default.string,
  /**
  * The size of the button.
  * `small` is equivalent to the dense button styling.
  */
  size: _propTypesDefault.default.oneOf(['large', 'medium', 'small']),
  /**
  * The variant to use.
  */
  variant: _propTypesDefault.default.oneOf(['extended', 'round'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiFab'
})(Fab);
