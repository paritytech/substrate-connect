var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _materialUiUtils = require('@material-ui/utils');
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _InputBase = require('../InputBase');
var _InputBaseDefault = _parcelHelpers.interopDefault(_InputBase);
var _MenuItem = require('../MenuItem');
var _MenuItemDefault = _parcelHelpers.interopDefault(_MenuItem);
var _Select = require('../Select');
var _SelectDefault = _parcelHelpers.interopDefault(_Select);
var _TableCell = require('../TableCell');
var _TableCellDefault = _parcelHelpers.interopDefault(_TableCell);
var _Toolbar = require('../Toolbar');
var _ToolbarDefault = _parcelHelpers.interopDefault(_Toolbar);
var _Typography = require('../Typography');
var _TypographyDefault = _parcelHelpers.interopDefault(_Typography);
var _TablePaginationActions = require('./TablePaginationActions');
var _TablePaginationActionsDefault = _parcelHelpers.interopDefault(_TablePaginationActions);
var _utilsUnstable_useId = require('../utils/unstable_useId');
var _utilsUnstable_useIdDefault = _parcelHelpers.interopDefault(_utilsUnstable_useId);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: {
      color: theme.palette.text.primary,
      fontSize: theme.typography.pxToRem(14),
      overflow: 'auto',
      // Increase the specificity to override TableCell.
      '&:last-child': {
        padding: 0
      }
    },
    /*Styles applied to the Toolbar component.*/
    toolbar: {
      minHeight: 52,
      paddingRight: 2
    },
    /*Styles applied to the spacer element.*/
    spacer: {
      flex: '1 1 100%'
    },
    /*Styles applied to the caption Typography components if `variant="caption"`.*/
    caption: {
      flexShrink: 0
    },
    // TODO v5: `.selectRoot` should be merged with `.input`
    /*Styles applied to the Select component root element.*/
    selectRoot: {
      marginRight: 32,
      marginLeft: 8
    },
    /*Styles applied to the Select component `select` class.*/
    select: {
      paddingLeft: 8,
      paddingRight: 24,
      textAlign: 'right',
      textAlignLast: 'right'
    },
    // TODO v5: remove
    /*Styles applied to the Select component `icon` class.*/
    selectIcon: {},
    /*Styles applied to the `InputBase` component.*/
    input: {
      color: 'inherit',
      fontSize: 'inherit',
      flexShrink: 0
    },
    /*Styles applied to the MenuItem component.*/
    menuItem: {},
    /*Styles applied to the internal `TablePaginationActions` component.*/
    actions: {
      flexShrink: 0,
      marginLeft: 20
    }
  };
};
var defaultLabelDisplayedRows = function defaultLabelDisplayedRows(_ref) {
  var from = _ref.from, to = _ref.to, count = _ref.count;
  return ("").concat(from, "-").concat(to, " of ").concat(count !== -1 ? count : ("more than ").concat(to));
};
var defaultRowsPerPageOptions = [10, 25, 50, 100];
/**
* A `TableCell` based component for placing inside `TableFooter` for pagination.
*/
var TablePagination = /*#__PURE__*/_react.forwardRef(function TablePagination(props, ref) {
  var _props$ActionsCompone = props.ActionsComponent, ActionsComponent = _props$ActionsCompone === void 0 ? _TablePaginationActionsDefault.default : _props$ActionsCompone, backIconButtonProps = props.backIconButtonProps, _props$backIconButton = props.backIconButtonText, backIconButtonText = _props$backIconButton === void 0 ? 'Previous page' : _props$backIconButton, classes = props.classes, className = props.className, colSpanProp = props.colSpan, _props$component = props.component, Component = _props$component === void 0 ? _TableCellDefault.default : _props$component, count = props.count, _props$labelDisplayed = props.labelDisplayedRows, labelDisplayedRows = _props$labelDisplayed === void 0 ? defaultLabelDisplayedRows : _props$labelDisplayed, _props$labelRowsPerPa = props.labelRowsPerPage, labelRowsPerPage = _props$labelRowsPerPa === void 0 ? 'Rows per page:' : _props$labelRowsPerPa, nextIconButtonProps = props.nextIconButtonProps, _props$nextIconButton = props.nextIconButtonText, nextIconButtonText = _props$nextIconButton === void 0 ? 'Next page' : _props$nextIconButton, onChangePage = props.onChangePage, onChangeRowsPerPage = props.onChangeRowsPerPage, page = props.page, rowsPerPage = props.rowsPerPage, _props$rowsPerPageOpt = props.rowsPerPageOptions, rowsPerPageOptions = _props$rowsPerPageOpt === void 0 ? defaultRowsPerPageOptions : _props$rowsPerPageOpt, _props$SelectProps = props.SelectProps, SelectProps = _props$SelectProps === void 0 ? {} : _props$SelectProps, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["ActionsComponent", "backIconButtonProps", "backIconButtonText", "classes", "className", "colSpan", "component", "count", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "nextIconButtonText", "onChangePage", "onChangeRowsPerPage", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps"]);
  var colSpan;
  if (Component === _TableCellDefault.default || Component === 'td') {
    colSpan = colSpanProp || 1000;
  }
  var selectId = _utilsUnstable_useIdDefault.default();
  var labelId = _utilsUnstable_useIdDefault.default();
  var MenuItemComponent = SelectProps.native ? 'option' : _MenuItemDefault.default;
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className),
      colSpan: colSpan,
      ref: ref
    }, other), /*#__PURE__*/_react.createElement(_ToolbarDefault.default, {
      className: classes.toolbar
    }, /*#__PURE__*/_react.createElement("div", {
      className: classes.spacer
    }), rowsPerPageOptions.length > 1 && /*#__PURE__*/_react.createElement(_TypographyDefault.default, {
      color: "inherit",
      variant: "body2",
      className: classes.caption,
      id: labelId
    }, labelRowsPerPage), rowsPerPageOptions.length > 1 && /*#__PURE__*/_react.createElement(_SelectDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      classes: {
        select: classes.select,
        icon: classes.selectIcon
      },
      input: /*#__PURE__*/_react.createElement(_InputBaseDefault.default, {
        className: _clsxDefault.default(classes.input, classes.selectRoot)
      }),
      value: rowsPerPage,
      onChange: onChangeRowsPerPage,
      id: selectId,
      labelId: labelId
    }, SelectProps), rowsPerPageOptions.map(function (rowsPerPageOption) {
      return (
        /*#__PURE__*/_react.createElement(MenuItemComponent, {
          className: classes.menuItem,
          key: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption,
          value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
        }, rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption)
      );
    })), /*#__PURE__*/_react.createElement(_TypographyDefault.default, {
      color: "inherit",
      variant: "body2",
      className: classes.caption
    }, labelDisplayedRows({
      from: count === 0 ? 0 : page * rowsPerPage + 1,
      to: count !== -1 ? Math.min(count, (page + 1) * rowsPerPage) : (page + 1) * rowsPerPage,
      count: count === -1 ? -1 : count,
      page: page
    })), /*#__PURE__*/_react.createElement(ActionsComponent, {
      className: classes.actions,
      backIconButtonProps: _babelRuntimeHelpersEsmExtendsDefault.default({
        title: backIconButtonText,
        'aria-label': backIconButtonText
      }, backIconButtonProps),
      count: count,
      nextIconButtonProps: _babelRuntimeHelpersEsmExtendsDefault.default({
        title: nextIconButtonText,
        'aria-label': nextIconButtonText
      }, nextIconButtonProps),
      onChangePage: onChangePage,
      page: page,
      rowsPerPage: rowsPerPage
    })))
  );
});
"development" !== "production" ? TablePagination.propTypes = {
  /**
  * The component used for displaying the actions.
  * Either a string to use a HTML element or a component.
  */
  ActionsComponent: _propTypesDefault.default.elementType,
  /**
  * Props applied to the back arrow [`IconButton`](/api/icon-button/) component.
  */
  backIconButtonProps: _propTypesDefault.default.object,
  /**
  * Text label for the back arrow icon button.
  *
  * For localization purposes, you can use the provided [translations](/guides/localization/).
  */
  backIconButtonText: _propTypesDefault.default.string,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * @ignore
  */
  colSpan: _propTypesDefault.default.number,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * The total number of rows.
  *
  * To enable server side pagination for an unknown number of items, provide -1.
  */
  count: _propTypesDefault.default.number.isRequired,
  /**
  * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
  * object.
  *
  * For localization purposes, you can use the provided [translations](/guides/localization/).
  */
  labelDisplayedRows: _propTypesDefault.default.func,
  /**
  * Customize the rows per page label.
  *
  * For localization purposes, you can use the provided [translations](/guides/localization/).
  */
  labelRowsPerPage: _propTypesDefault.default.node,
  /**
  * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.
  */
  nextIconButtonProps: _propTypesDefault.default.object,
  /**
  * Text label for the next arrow icon button.
  *
  * For localization purposes, you can use the provided [translations](/guides/localization/).
  */
  nextIconButtonText: _propTypesDefault.default.string,
  /**
  * Callback fired when the page is changed.
  *
  * @param {object} event The event source of the callback.
  * @param {number} page The page selected.
  */
  onChangePage: _propTypesDefault.default.func.isRequired,
  /**
  * Callback fired when the number of rows per page is changed.
  *
  * @param {object} event The event source of the callback.
  */
  onChangeRowsPerPage: _propTypesDefault.default.func,
  /**
  * The zero-based index of the current page.
  */
  page: _materialUiUtils.chainPropTypes(_propTypesDefault.default.number.isRequired, function (props) {
    var count = props.count, page = props.page, rowsPerPage = props.rowsPerPage;
    if (count === -1) {
      return null;
    }
    var newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
    if (page < 0 || page > newLastPage) {
      return new Error('Material-UI: The page prop of a TablePagination is out of range ' + ("(0 to ").concat(newLastPage, ", but page is ").concat(page, ")."));
    }
    return null;
  }),
  /**
  * The number of rows per page.
  */
  rowsPerPage: _propTypesDefault.default.number.isRequired,
  /**
  * Customizes the options of the rows per page select field. If less than two options are
  * available, no select field will be displayed.
  */
  rowsPerPageOptions: _propTypesDefault.default.array,
  /**
  * Props applied to the rows per page [`Select`](/api/select/) element.
  */
  SelectProps: _propTypesDefault.default.object
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiTablePagination'
})(TablePagination);
