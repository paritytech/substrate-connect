var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _reactIs = require('react-is');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _Popover = require('../Popover');
var _PopoverDefault = _parcelHelpers.interopDefault(_Popover);
var _MenuList = require('../MenuList');
var _MenuListDefault = _parcelHelpers.interopDefault(_MenuList);
var _reactDom = require('react-dom');
var _utilsSetRef = require('../utils/setRef');
var _utilsSetRefDefault = _parcelHelpers.interopDefault(_utilsSetRef);
var _stylesUseTheme = require('../styles/useTheme');
var _stylesUseThemeDefault = _parcelHelpers.interopDefault(_stylesUseTheme);
var RTL_ORIGIN = {
  vertical: 'top',
  horizontal: 'right'
};
var LTR_ORIGIN = {
  vertical: 'top',
  horizontal: 'left'
};
var styles = {
  /*Styles applied to the `Paper` component.*/
  paper: {
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tapable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: 'calc(100% - 96px)',
    // Add iOS momentum scrolling.
    WebkitOverflowScrolling: 'touch'
  },
  /*Styles applied to the `List` component via `MenuList`.*/
  list: {
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  }
};
var Menu = /*#__PURE__*/_react.forwardRef(function Menu(props, ref) {
  var _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus, children = props.children, classes = props.classes, _props$disableAutoFoc = props.disableAutoFocusItem, disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$MenuListProps = props.MenuListProps, MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps, onClose = props.onClose, onEntering = props.onEntering, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, PopoverClasses = props.PopoverClasses, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura, _props$variant = props.variant, variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["autoFocus", "children", "classes", "disableAutoFocusItem", "MenuListProps", "onClose", "onEntering", "open", "PaperProps", "PopoverClasses", "transitionDuration", "variant"]);
  var theme = _stylesUseThemeDefault.default();
  var autoFocusItem = autoFocus && !disableAutoFocusItem && open;
  var menuListActionsRef = _react.useRef(null);
  var contentAnchorRef = _react.useRef(null);
  var getContentAnchorEl = function getContentAnchorEl() {
    return contentAnchorRef.current;
  };
  var handleEntering = function handleEntering(element, isAppearing) {
    if (menuListActionsRef.current) {
      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
    }
    if (onEntering) {
      onEntering(element, isAppearing);
    }
  };
  var handleListKeyDown = function handleListKeyDown(event) {
    if (event.key === 'Tab') {
      event.preventDefault();
      if (onClose) {
        onClose(event, 'tabKeyDown');
      }
    }
  };
  /**
  * the index of the item should receive focus
  * in a `variant="selectedMenu"` it's the first `selected` item
  * otherwise it's the very first item.
  */
  var activeItemIndex = -1;
  // since we inject focus related props into children we have to do a lookahead
  // to check if there is a `selected` item. We're looking for the last `selected`
  // item and use the first valid item as a fallback
  _react.Children.map(children, function (child, index) {
    if (!/*#__PURE__*/_react.isValidElement(child)) {
      return;
    }
    if ("development" !== 'production') {
      if (_reactIs.isFragment(child)) {
        console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
      }
    }
    if (!child.props.disabled) {
      if (variant !== "menu" && child.props.selected) {
        activeItemIndex = index;
      } else if (activeItemIndex === -1) {
        activeItemIndex = index;
      }
    }
  });
  var items = _react.Children.map(children, function (child, index) {
    if (index === activeItemIndex) {
      return (
        /*#__PURE__*/_react.cloneElement(child, {
          ref: function ref(instance) {
            // #StrictMode ready
            contentAnchorRef.current = _reactDom.findDOMNode(instance);
            _utilsSetRefDefault.default(child.ref, instance);
          }
        })
      );
    }
    return child;
  });
  return (
    /*#__PURE__*/_react.createElement(_PopoverDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      getContentAnchorEl: getContentAnchorEl,
      classes: PopoverClasses,
      onClose: onClose,
      onEntering: handleEntering,
      anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
      transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _babelRuntimeHelpersEsmExtendsDefault.default({}, PaperProps, {
        classes: _babelRuntimeHelpersEsmExtendsDefault.default({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      open: open,
      ref: ref,
      transitionDuration: transitionDuration
    }, other), /*#__PURE__*/_react.createElement(_MenuListDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      onKeyDown: handleListKeyDown,
      actions: menuListActionsRef,
      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
      autoFocusItem: autoFocusItem,
      variant: variant
    }, MenuListProps, {
      className: _clsxDefault.default(classes.list, MenuListProps.className)
    }), items))
  );
});
"development" !== "production" ? Menu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * A HTML element, or a function that returns it.
  * It's used to set the position of the menu.
  */
  anchorEl: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  oneOfType([_materialUiUtils.HTMLElementType, _propTypesDefault.default.func]),
  /**
  * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
  * children are not focusable. If you set this prop to `false` focus will be placed
  * on the parent modal container. This has severe accessibility implications
  * and should only be considered if you manage focus otherwise.
  */
  autoFocus: _propTypesDefault.default.bool,
  /**
  * Menu contents, normally `MenuItem`s.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * When opening the menu will not focus the active item but the `[role="menu"]`
  * unless `autoFocus` is also set to `false`. Not using the default means not
  * following WAI-ARIA authoring practices. Please be considerate about possible
  * accessibility implications.
  */
  disableAutoFocusItem: _propTypesDefault.default.bool,
  /**
  * Props applied to the [`MenuList`](/api/menu-list/) element.
  */
  MenuListProps: _propTypesDefault.default.object,
  /**
  * Callback fired when the component requests to be closed.
  *
  * @param {object} event The event source of the callback.
  * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
  */
  onClose: _propTypesDefault.default.func,
  /**
  * Callback fired before the Menu enters.
  */
  onEnter: _propTypesDefault.default.func,
  /**
  * Callback fired when the Menu has entered.
  */
  onEntered: _propTypesDefault.default.func,
  /**
  * Callback fired when the Menu is entering.
  */
  onEntering: _propTypesDefault.default.func,
  /**
  * Callback fired before the Menu exits.
  */
  onExit: _propTypesDefault.default.func,
  /**
  * Callback fired when the Menu has exited.
  */
  onExited: _propTypesDefault.default.func,
  /**
  * Callback fired when the Menu is exiting.
  */
  onExiting: _propTypesDefault.default.func,
  /**
  * If `true`, the menu is visible.
  */
  open: _propTypesDefault.default.bool.isRequired,
  /**
  * @ignore
  */
  PaperProps: _propTypesDefault.default.object,
  /**
  * `classes` prop applied to the [`Popover`](/api/popover/) element.
  */
  PopoverClasses: _propTypesDefault.default.object,
  /**
  * The length of the transition in `ms`, or 'auto'
  */
  transitionDuration: _propTypesDefault.default.oneOfType([_propTypesDefault.default.oneOf(['auto']), _propTypesDefault.default.number, _propTypesDefault.default.shape({
    appear: _propTypesDefault.default.number,
    enter: _propTypesDefault.default.number,
    exit: _propTypesDefault.default.number
  })]),
  /**
  * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
  * and the vertical alignment relative to the anchor element.
  */
  variant: _propTypesDefault.default.oneOf(['menu', 'selectedMenu'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiMenu'
})(Menu);
