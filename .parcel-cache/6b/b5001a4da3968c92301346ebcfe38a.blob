var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _reactIs = require('react-is');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var styles = {
  /*Styles applied to the root element.*/
  root: {},
  /*Styles applied to the root element if `orientation="horizontal"`.*/
  horizontal: {
    paddingLeft: 8,
    paddingRight: 8
  },
  /*Styles applied to the root element if `orientation="vertical"`.*/
  vertical: {},
  /*Styles applied to the root element if `alternativeLabel={true}`.*/
  alternativeLabel: {
    flex: 1,
    position: 'relative'
  },
  /*Pseudo-class applied to the root element if `completed={true}`.*/
  completed: {}
};
var Step = /*#__PURE__*/_react.forwardRef(function Step(props, ref) {
  var _props$active = props.active, active = _props$active === void 0 ? false : _props$active, alternativeLabel = props.alternativeLabel, children = props.children, classes = props.classes, className = props.className, _props$completed = props.completed, completed = _props$completed === void 0 ? false : _props$completed, connectorProp = props.connector, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$expanded = props.expanded, expanded = _props$expanded === void 0 ? false : _props$expanded, index = props.index, last = props.last, orientation = props.orientation, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "connector", "disabled", "expanded", "index", "last", "orientation"]);
  var connector = connectorProp ? /*#__PURE__*/_react.cloneElement(connectorProp, {
    orientation: orientation,
    alternativeLabel: alternativeLabel,
    index: index,
    active: active,
    completed: completed,
    disabled: disabled
  }) : null;
  var newChildren = /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtendsDefault.default({
    className: _clsxDefault.default(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, completed && classes.completed),
    ref: ref
  }, other), connector && alternativeLabel && index !== 0 ? connector : null, _react.Children.map(children, function (child) {
    if (!/*#__PURE__*/_react.isValidElement(child)) {
      return null;
    }
    if ("development" !== 'production') {
      if (_reactIs.isFragment(child)) {
        console.error(["Material-UI: The Step component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
      }
    }
    return (
      /*#__PURE__*/_react.cloneElement(child, _babelRuntimeHelpersEsmExtendsDefault.default({
        active: active,
        alternativeLabel: alternativeLabel,
        completed: completed,
        disabled: disabled,
        expanded: expanded,
        last: last,
        icon: index + 1,
        orientation: orientation
      }, child.props))
    );
  }));
  if (connector && !alternativeLabel && index !== 0) {
    return (
      /*#__PURE__*/_react.createElement(_react.Fragment, null, connector, newChildren)
    );
  }
  return newChildren;
});
"development" !== "production" ? Step.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * Sets the step as active. Is passed to child components.
  */
  active: _propTypesDefault.default.bool,
  /**
  * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * Mark the step as completed. Is passed to child components.
  */
  completed: _propTypesDefault.default.bool,
  /**
  * Mark the step as disabled, will also disable the button if
  * `StepButton` is a child of `Step`. Is passed to child components.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * Expand the step.
  */
  expanded: _propTypesDefault.default.bool
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiStep'
})(Step);
