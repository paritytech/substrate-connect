var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var styles = function styles(theme) {
  var elevations = {};
  theme.shadows.forEach(function (shadow, index) {
    elevations[("elevation").concat(index)] = {
      boxShadow: shadow
    };
  });
  return _babelRuntimeHelpersEsmExtendsDefault.default({
    /*Styles applied to the root element.*/
    root: {
      backgroundColor: theme.palette.background.paper,
      color: theme.palette.text.primary,
      transition: theme.transitions.create('box-shadow')
    },
    /*Styles applied to the root element if `square={false}`.*/
    rounded: {
      borderRadius: theme.shape.borderRadius
    },
    /*Styles applied to the root element if `variant="outlined"`.*/
    outlined: {
      border: ("1px solid ").concat(theme.palette.divider)
    }
  }, elevations);
};
var Paper = /*#__PURE__*/_react.forwardRef(function Paper(props, ref) {
  var classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 1 : _props$elevation, _props$variant = props.variant, variant = _props$variant === void 0 ? 'elevation' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["classes", "className", "component", "square", "elevation", "variant"]);
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, variant === 'outlined' ? classes.outlined : classes[("elevation").concat(elevation)], !square && classes.rounded),
      ref: ref
    }, other))
  );
});
"development" !== "production" ? Paper.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The content of the component.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * Shadow depth, corresponds to `dp` in the spec.
  * It accepts values between 0 and 24 inclusive.
  */
  elevation: _materialUiUtils.chainPropTypes(_propTypesDefault.default.number, function (props) {
    var classes = props.classes, elevation = props.elevation;
    // in case `withStyles` fails to inject we don't need this warning
    if (classes === undefined) {
      return null;
    }
    if (elevation != null && classes[("elevation").concat(elevation)] === undefined) {
      return new Error(("Material-UI: This elevation `").concat(elevation, "` is not implemented."));
    }
    return null;
  }),
  /**
  * If `true`, rounded corners are disabled.
  */
  square: _propTypesDefault.default.bool,
  /**
  * The variant to use.
  */
  variant: _propTypesDefault.default.oneOf(['elevation', 'outlined'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiPaper'
})(Paper);
