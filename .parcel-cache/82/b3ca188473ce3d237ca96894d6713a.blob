var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _materialUiUtils = require('@material-ui/utils');
var _withWidth = require('../withWidth');
var _withWidthDefault = _parcelHelpers.interopDefault(_withWidth);
var _stylesUseTheme = require('../styles/useTheme');
var _stylesUseThemeDefault = _parcelHelpers.interopDefault(_stylesUseTheme);
/**
* @ignore - internal component.
*/
function HiddenJs(props) {
  var children = props.children, only = props.only, width = props.width;
  var theme = _stylesUseThemeDefault.default();
  var visible = true;
  // `only` check is faster to get out sooner if used.
  if (only) {
    if (Array.isArray(only)) {
      for (var i = 0; i < only.length; i += 1) {
        var breakpoint = only[i];
        if (width === breakpoint) {
          visible = false;
          break;
        }
      }
    } else if (only && width === only) {
      visible = false;
    }
  }
  // Allow `only` to be combined with other props. If already hidden, no need to check others.
  if (visible) {
    // determine visibility based on the smallest size up
    for (var _i = 0; _i < theme.breakpoints.keys.length; _i += 1) {
      var _breakpoint = theme.breakpoints.keys[_i];
      var breakpointUp = props[("").concat(_breakpoint, "Up")];
      var breakpointDown = props[("").concat(_breakpoint, "Down")];
      if (breakpointUp && _withWidth.isWidthUp(_breakpoint, width) || breakpointDown && _withWidth.isWidthDown(_breakpoint, width)) {
        visible = false;
        break;
      }
    }
  }
  if (!visible) {
    return null;
  }
  return children;
}
HiddenJs.propTypes = {
  /**
  * The content of the component.
  */
  children: _propTypesDefault.default.node,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * Specify which implementation to use.  'js' is the default, 'css' works better for
  * server-side rendering.
  */
  implementation: _propTypesDefault.default.oneOf(['js', 'css']),
  /**
  * You can use this prop when choosing the `js` implementation with server-side rendering.
  *
  * As `window.innerWidth` is unavailable on the server,
  * we default to rendering an empty component during the first mount.
  * You might want to use an heuristic to approximate
  * the screen width of the client browser screen width.
  *
  * For instance, you could be using the user-agent or the client-hints.
  * https://caniuse.com/#search=client%20hint
  */
  initialWidth: _propTypesDefault.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  /**
  * If `true`, screens this size and down will be hidden.
  */
  lgDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  lgUp: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and down will be hidden.
  */
  mdDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  mdUp: _propTypesDefault.default.bool,
  /**
  * Hide the given breakpoint(s).
  */
  only: _propTypesDefault.default.oneOfType([_propTypesDefault.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),
  /**
  * If `true`, screens this size and down will be hidden.
  */
  smDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  smUp: _propTypesDefault.default.bool,
  /**
  * @ignore
  * width prop provided by withWidth decorator.
  */
  width: _propTypesDefault.default.string.isRequired,
  /**
  * If `true`, screens this size and down will be hidden.
  */
  xlDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  xlUp: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and down will be hidden.
  */
  xsDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  xsUp: _propTypesDefault.default.bool
};
if ("development" !== 'production') {
  HiddenJs.propTypes = _materialUiUtils.exactProp(HiddenJs.propTypes);
}
exports.default = _withWidthDefault.default()(HiddenJs);
