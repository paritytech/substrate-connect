var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmToConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _babelRuntimeHelpersEsmToConsumableArrayDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmToConsumableArray);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _utilsDebounce = require('../utils/debounce');
var _utilsDebounceDefault = _parcelHelpers.interopDefault(_utilsDebounce);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _utilsIsMuiElement = require('../utils/isMuiElement');
var _utilsIsMuiElementDefault = _parcelHelpers.interopDefault(_utilsIsMuiElement);
var styles = {
  /*Styles applied to the root element.*/
  root: {
    boxSizing: 'border-box',
    flexShrink: 0
  },
  /*Styles applied to the `div` element that wraps the children.*/
  tile: {
    position: 'relative',
    display: 'block',
    // In case it's not rendered with a div.
    height: '100%',
    overflow: 'hidden'
  },
  /*Styles applied to an `img` element child, if needed to ensure it covers the tile.*/
  imgFullHeight: {
    height: '100%',
    transform: 'translateX(-50%)',
    position: 'relative',
    left: '50%'
  },
  /*Styles applied to an `img` element child, if needed to ensure it covers the tile.*/
  imgFullWidth: {
    width: '100%',
    position: 'relative',
    transform: 'translateY(-50%)',
    top: '50%'
  }
};
var fit = function fit(imgEl, classes) {
  if (!imgEl || !imgEl.complete) {
    return;
  }
  if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {
    var _imgEl$classList, _imgEl$classList2;
    (_imgEl$classList = imgEl.classList).remove.apply(_imgEl$classList, _babelRuntimeHelpersEsmToConsumableArrayDefault.default(classes.imgFullWidth.split(' ')));
    (_imgEl$classList2 = imgEl.classList).add.apply(_imgEl$classList2, _babelRuntimeHelpersEsmToConsumableArrayDefault.default(classes.imgFullHeight.split(' ')));
  } else {
    var _imgEl$classList3, _imgEl$classList4;
    (_imgEl$classList3 = imgEl.classList).remove.apply(_imgEl$classList3, _babelRuntimeHelpersEsmToConsumableArrayDefault.default(classes.imgFullHeight.split(' ')));
    (_imgEl$classList4 = imgEl.classList).add.apply(_imgEl$classList4, _babelRuntimeHelpersEsmToConsumableArrayDefault.default(classes.imgFullWidth.split(' ')));
  }
};
function ensureImageCover(imgEl, classes) {
  if (!imgEl) {
    return;
  }
  if (imgEl.complete) {
    fit(imgEl, classes);
  } else {
    imgEl.addEventListener('load', function () {
      fit(imgEl, classes);
    });
  }
}
var GridListTile = /*#__PURE__*/_react.forwardRef(function GridListTile(props, ref) {
  // cols rows default values are for docs only
  var children = props.children, classes = props.classes, className = props.className, _props$cols = props.cols, cols = _props$cols === void 0 ? 1 : _props$cols, _props$component = props.component, Component = _props$component === void 0 ? 'li' : _props$component, _props$rows = props.rows, rows = _props$rows === void 0 ? 1 : _props$rows, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "className", "cols", "component", "rows"]);
  var imgRef = _react.useRef(null);
  _react.useEffect(function () {
    ensureImageCover(imgRef.current, classes);
  });
  _react.useEffect(function () {
    var handleResize = _utilsDebounceDefault.default(function () {
      fit(imgRef.current, classes);
    });
    window.addEventListener('resize', handleResize);
    return function () {
      handleResize.clear();
      window.removeEventListener('resize', handleResize);
    };
  }, [classes]);
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className),
      ref: ref
    }, other), /*#__PURE__*/_react.createElement("div", {
      className: classes.tile
    }, _react.Children.map(children, function (child) {
      if (!/*#__PURE__*/_react.isValidElement(child)) {
        return null;
      }
      if (child.type === 'img' || _utilsIsMuiElementDefault.default(child, ['Image'])) {
        return (
          /*#__PURE__*/_react.cloneElement(child, {
            ref: imgRef
          })
        );
      }
      return child;
    })))
  );
});
"development" !== "production" ? GridListTile.propTypes = {
  /**
  * Theoretically you can pass any node as children, but the main use case is to pass an img,
  * in which case GridListTile takes care of making the image "cover" available space
  * (similar to `background-size: cover` or to `object-fit: cover`).
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * Width of the tile in number of grid cells.
  */
  cols: _propTypesDefault.default.number,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * Height of the tile in number of grid cells.
  */
  rows: _propTypesDefault.default.number
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiGridListTile'
})(GridListTile);
