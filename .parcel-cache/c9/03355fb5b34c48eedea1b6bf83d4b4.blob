var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmDefineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _babelRuntimeHelpersEsmDefinePropertyDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmDefineProperty);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _stylesTransitions = require('../styles/transitions');
var _ClickAwayListener = require('../ClickAwayListener');
var _ClickAwayListenerDefault = _parcelHelpers.interopDefault(_ClickAwayListener);
var _utilsUseEventCallback = require('../utils/useEventCallback');
var _utilsUseEventCallbackDefault = _parcelHelpers.interopDefault(_utilsUseEventCallback);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var _utilsCreateChainedFunction = require('../utils/createChainedFunction');
var _utilsCreateChainedFunctionDefault = _parcelHelpers.interopDefault(_utilsCreateChainedFunction);
var _Grow = require('../Grow');
var _GrowDefault = _parcelHelpers.interopDefault(_Grow);
var _SnackbarContent = require('../SnackbarContent');
var _SnackbarContentDefault = _parcelHelpers.interopDefault(_SnackbarContent);
var styles = function styles(theme) {
  var top1 = {
    top: 8
  };
  var bottom1 = {
    bottom: 8
  };
  var right = {
    justifyContent: 'flex-end'
  };
  var left = {
    justifyContent: 'flex-start'
  };
  var top3 = {
    top: 24
  };
  var bottom3 = {
    bottom: 24
  };
  var right3 = {
    right: 24
  };
  var left3 = {
    left: 24
  };
  var center = {
    left: '50%',
    right: 'auto',
    transform: 'translateX(-50%)'
  };
  return {
    /*Styles applied to the root element.*/
    root: {
      zIndex: theme.zIndex.snackbar,
      position: 'fixed',
      display: 'flex',
      left: 8,
      right: 8,
      justifyContent: 'center',
      alignItems: 'center'
    },
    /*Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`.*/
    anchorOriginTopCenter: _babelRuntimeHelpersEsmExtendsDefault.default({}, top1, _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('sm'), _babelRuntimeHelpersEsmExtendsDefault.default({}, top3, center))),
    /*Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`.*/
    anchorOriginBottomCenter: _babelRuntimeHelpersEsmExtendsDefault.default({}, bottom1, _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('sm'), _babelRuntimeHelpersEsmExtendsDefault.default({}, bottom3, center))),
    /*Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`.*/
    anchorOriginTopRight: _babelRuntimeHelpersEsmExtendsDefault.default({}, top1, right, _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('sm'), _babelRuntimeHelpersEsmExtendsDefault.default({
      left: 'auto'
    }, top3, right3))),
    /*Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`.*/
    anchorOriginBottomRight: _babelRuntimeHelpersEsmExtendsDefault.default({}, bottom1, right, _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('sm'), _babelRuntimeHelpersEsmExtendsDefault.default({
      left: 'auto'
    }, bottom3, right3))),
    /*Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`.*/
    anchorOriginTopLeft: _babelRuntimeHelpersEsmExtendsDefault.default({}, top1, left, _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('sm'), _babelRuntimeHelpersEsmExtendsDefault.default({
      right: 'auto'
    }, top3, left3))),
    /*Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`.*/
    anchorOriginBottomLeft: _babelRuntimeHelpersEsmExtendsDefault.default({}, bottom1, left, _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('sm'), _babelRuntimeHelpersEsmExtendsDefault.default({
      right: 'auto'
    }, bottom3, left3)))
  };
};
var Snackbar = /*#__PURE__*/_react.forwardRef(function Snackbar(props, ref) {
  var action = props.action, _props$anchorOrigin = props.anchorOrigin;
  _props$anchorOrigin = _props$anchorOrigin === void 0 ? {
    vertical: 'bottom',
    horizontal: 'center'
  } : _props$anchorOrigin;
  var vertical = _props$anchorOrigin.vertical, horizontal = _props$anchorOrigin.horizontal, _props$autoHideDurati = props.autoHideDuration, autoHideDuration = _props$autoHideDurati === void 0 ? null : _props$autoHideDurati, children = props.children, classes = props.classes, className = props.className, ClickAwayListenerProps = props.ClickAwayListenerProps, ContentProps = props.ContentProps, _props$disableWindowB = props.disableWindowBlurListener, disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB, message = props.message, onClose = props.onClose, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, open = props.open, resumeHideDuration = props.resumeHideDuration, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _GrowDefault.default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? {
    enter: _stylesTransitions.duration.enteringScreen,
    exit: _stylesTransitions.duration.leavingScreen
  } : _props$transitionDura, TransitionProps = props.TransitionProps, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["action", "anchorOrigin", "autoHideDuration", "children", "classes", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onClose", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"]);
  var timerAutoHide = _react.useRef();
  var _React$useState = _react.useState(true), exited = _React$useState[0], setExited = _React$useState[1];
  var handleClose = _utilsUseEventCallbackDefault.default(function () {
    if (onClose) {
      onClose.apply(void 0, arguments);
    }
  });
  var setAutoHideTimer = _utilsUseEventCallbackDefault.default(function (autoHideDurationParam) {
    if (!onClose || autoHideDurationParam == null) {
      return;
    }
    clearTimeout(timerAutoHide.current);
    timerAutoHide.current = setTimeout(function () {
      handleClose(null, 'timeout');
    }, autoHideDurationParam);
  });
  _react.useEffect(function () {
    if (open) {
      setAutoHideTimer(autoHideDuration);
    }
    return function () {
      clearTimeout(timerAutoHide.current);
    };
  }, [open, autoHideDuration, setAutoHideTimer]);
  // Pause the timer when the user is interacting with the Snackbar
  // or when the user hide the window.
  var handlePause = function handlePause() {
    clearTimeout(timerAutoHide.current);
  };
  // Restart the timer when the user is no longer interacting with the Snackbar
  // or when the window is shown back.
  var handleResume = _react.useCallback(function () {
    if (autoHideDuration != null) {
      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
    }
  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
  var handleMouseEnter = function handleMouseEnter(event) {
    if (onMouseEnter) {
      onMouseEnter(event);
    }
    handlePause();
  };
  var handleMouseLeave = function handleMouseLeave(event) {
    if (onMouseLeave) {
      onMouseLeave(event);
    }
    handleResume();
  };
  var handleClickAway = function handleClickAway(event) {
    if (onClose) {
      onClose(event, 'clickaway');
    }
  };
  var handleExited = function handleExited() {
    setExited(true);
  };
  var handleEnter = function handleEnter() {
    setExited(false);
  };
  _react.useEffect(function () {
    if (!disableWindowBlurListener && open) {
      window.addEventListener('focus', handleResume);
      window.addEventListener('blur', handlePause);
      return function () {
        window.removeEventListener('focus', handleResume);
        window.removeEventListener('blur', handlePause);
      };
    }
    return undefined;
  }, [disableWindowBlurListener, handleResume, open]);
  // So we only render active snackbars.
  if (!open && exited) {
    return null;
  }
  return (
    /*#__PURE__*/_react.createElement(_ClickAwayListenerDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      onClickAway: handleClickAway
    }, ClickAwayListenerProps), /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, classes[("anchorOrigin").concat(_utilsCapitalizeDefault.default(vertical)).concat(_utilsCapitalizeDefault.default(horizontal))], className),
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      ref: ref
    }, other), /*#__PURE__*/_react.createElement(TransitionComponent, _babelRuntimeHelpersEsmExtendsDefault.default({
      appear: true,
      in: open,
      onEnter: _utilsCreateChainedFunctionDefault.default(handleEnter, onEnter),
      onEntered: onEntered,
      onEntering: onEntering,
      onExit: onExit,
      onExited: _utilsCreateChainedFunctionDefault.default(handleExited, onExited),
      onExiting: onExiting,
      timeout: transitionDuration,
      direction: vertical === 'top' ? 'down' : 'up'
    }, TransitionProps), children || /*#__PURE__*/_react.createElement(_SnackbarContentDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      message: message,
      action: action
    }, ContentProps)))))
  );
});
"development" !== "production" ? Snackbar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The action to display. It renders after the message, at the end of the snackbar.
  */
  action: _propTypesDefault.default.node,
  /**
  * The anchor of the `Snackbar`.
  */
  anchorOrigin: _propTypesDefault.default.shape({
    horizontal: _propTypesDefault.default.oneOf(['center', 'left', 'right']).isRequired,
    vertical: _propTypesDefault.default.oneOf(['bottom', 'top']).isRequired
  }),
  /**
  * The number of milliseconds to wait before automatically calling the
  * `onClose` function. `onClose` should then set the state of the `open`
  * prop to hide the Snackbar. This behavior is disabled by default with
  * the `null` value.
  */
  autoHideDuration: _propTypesDefault.default.number,
  /**
  * Replace the `SnackbarContent` component.
  */
  children: _propTypesDefault.default.element,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * Props applied to the `ClickAwayListener` element.
  */
  ClickAwayListenerProps: _propTypesDefault.default.object,
  /**
  * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.
  */
  ContentProps: _propTypesDefault.default.object,
  /**
  * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
  */
  disableWindowBlurListener: _propTypesDefault.default.bool,
  /**
  * When displaying multiple consecutive Snackbars from a parent rendering a single
  * <Snackbar/>, add the key prop to ensure independent treatment of each message.
  * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and
  * features such as autoHideDuration may be canceled.
  */
  key: _propTypesDefault.default.any,
  /**
  * The message to display.
  */
  message: _propTypesDefault.default.node,
  /**
  * Callback fired when the component requests to be closed.
  * Typically `onClose` is used to set state in the parent component,
  * which is used to control the `Snackbar` `open` prop.
  * The `reason` parameter can optionally be used to control the response to `onClose`,
  * for example ignoring `clickaway`.
  *
  * @param {object} event The event source of the callback.
  * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`.
  */
  onClose: _propTypesDefault.default.func,
  /**
  * Callback fired before the transition is entering.
  */
  onEnter: _propTypesDefault.default.func,
  /**
  * Callback fired when the transition has entered.
  */
  onEntered: _propTypesDefault.default.func,
  /**
  * Callback fired when the transition is entering.
  */
  onEntering: _propTypesDefault.default.func,
  /**
  * Callback fired before the transition is exiting.
  */
  onExit: _propTypesDefault.default.func,
  /**
  * Callback fired when the transition has exited.
  */
  onExited: _propTypesDefault.default.func,
  /**
  * Callback fired when the transition is exiting.
  */
  onExiting: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onMouseEnter: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onMouseLeave: _propTypesDefault.default.func,
  /**
  * If `true`, `Snackbar` is open.
  */
  open: _propTypesDefault.default.bool,
  /**
  * The number of milliseconds to wait before dismissing after user interaction.
  * If `autoHideDuration` prop isn't specified, it does nothing.
  * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
  * we default to `autoHideDuration / 2` ms.
  */
  resumeHideDuration: _propTypesDefault.default.number,
  /**
  * The component used for the transition.
  * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
  */
  TransitionComponent: _propTypesDefault.default.elementType,
  /**
  * The duration for the transition, in milliseconds.
  * You may specify a single timeout for all transitions, or individually with an object.
  */
  transitionDuration: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.shape({
    appear: _propTypesDefault.default.number,
    enter: _propTypesDefault.default.number,
    exit: _propTypesDefault.default.number
  })]),
  /**
  * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
  */
  TransitionProps: _propTypesDefault.default.object
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  flip: false,
  name: 'MuiSnackbar'
})(Snackbar);
