var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _materialUiUtils = require('@material-ui/utils');
function mergeClasses() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var baseClasses = options.baseClasses, newClasses = options.newClasses, Component = options.Component;
  if (!newClasses) {
    return baseClasses;
  }
  var nextClasses = _babelRuntimeHelpersEsmExtendsDefault.default({}, baseClasses);
  if ("development" !== 'production') {
    if (typeof newClasses === 'string') {
      console.error([("Material-UI: The value `").concat(newClasses, "` ") + ("provided to the classes prop of ").concat(_materialUiUtils.getDisplayName(Component), " is incorrect."), 'You might want to use the className prop instead.'].join('\n'));
      return baseClasses;
    }
  }
  Object.keys(newClasses).forEach(function (key) {
    if ("development" !== 'production') {
      if (!baseClasses[key] && newClasses[key]) {
        console.error([("Material-UI: The key `").concat(key, "` ") + ("provided to the classes prop is not implemented in ").concat(_materialUiUtils.getDisplayName(Component), "."), ("You can only override one of the following: ").concat(Object.keys(baseClasses).join(','), ".")].join('\n'));
      }
      if (newClasses[key] && typeof newClasses[key] !== 'string') {
        console.error([("Material-UI: The key `").concat(key, "` ") + ("provided to the classes prop is not valid for ").concat(_materialUiUtils.getDisplayName(Component), "."), ("You need to provide a non empty string instead of: ").concat(newClasses[key], ".")].join('\n'));
      }
    }
    if (newClasses[key]) {
      nextClasses[key] = ("").concat(baseClasses[key], " ").concat(newClasses[key]);
    }
  });
  return nextClasses;
}
exports.default = mergeClasses;
