var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _internalSvgIconsPerson = require('../internal/svg-icons/Person');
var _internalSvgIconsPersonDefault = _parcelHelpers.interopDefault(_internalSvgIconsPerson);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: {
      position: 'relative',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      flexShrink: 0,
      width: 40,
      height: 40,
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(20),
      lineHeight: 1,
      borderRadius: '50%',
      overflow: 'hidden',
      userSelect: 'none'
    },
    /*Styles applied to the root element if not `src` or `srcSet`.*/
    colorDefault: {
      color: theme.palette.background.default,
      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
    },
    /*Styles applied to the root element if `variant="circle"`.*/
    circle: {},
    /*Styles applied to the root element if `variant="circular"`.*/
    circular: {},
    /*Styles applied to the root element if `variant="rounded"`.*/
    rounded: {
      borderRadius: theme.shape.borderRadius
    },
    /*Styles applied to the root element if `variant="square"`.*/
    square: {
      borderRadius: 0
    },
    /*Styles applied to the img element if either `src` or `srcSet` is defined.*/
    img: {
      width: '100%',
      height: '100%',
      textAlign: 'center',
      // Handle non-square image. The property isn't supported by IE 11.
      objectFit: 'cover',
      // Hide alt text.
      color: 'transparent',
      // Hide the image broken icon, only works on Chrome.
      textIndent: 10000
    },
    /*Styles applied to the fallback icon*/
    fallback: {
      width: '75%',
      height: '75%'
    }
  };
};
function useLoaded(_ref) {
  var src = _ref.src, srcSet = _ref.srcSet;
  var _React$useState = _react.useState(false), loaded = _React$useState[0], setLoaded = _React$useState[1];
  _react.useEffect(function () {
    if (!src && !srcSet) {
      return undefined;
    }
    setLoaded(false);
    var active = true;
    var image = new Image();
    image.src = src;
    image.srcSet = srcSet;
    image.onload = function () {
      if (!active) {
        return;
      }
      setLoaded('loaded');
    };
    image.onerror = function () {
      if (!active) {
        return;
      }
      setLoaded('error');
    };
    return function () {
      active = false;
    };
  }, [src, srcSet]);
  return loaded;
}
var Avatar = /*#__PURE__*/_react.forwardRef(function Avatar(props, ref) {
  var alt = props.alt, childrenProp = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, imgProps = props.imgProps, sizes = props.sizes, src = props.src, srcSet = props.srcSet, _props$variant = props.variant, variant = _props$variant === void 0 ? 'circle' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["alt", "children", "classes", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"]);
  var children = null;
  // Use a hook instead of onError on the img element to support server-side rendering.
  var loaded = useLoaded({
    src: src,
    srcSet: srcSet
  });
  var hasImg = src || srcSet;
  var hasImgNotFailing = hasImg && loaded !== 'error';
  if (hasImgNotFailing) {
    children = /*#__PURE__*/_react.createElement("img", _babelRuntimeHelpersEsmExtendsDefault.default({
      alt: alt,
      src: src,
      srcSet: srcSet,
      sizes: sizes,
      className: classes.img
    }, imgProps));
  } else if (childrenProp != null) {
    children = childrenProp;
  } else if (hasImg && alt) {
    children = alt[0];
  } else {
    children = /*#__PURE__*/_react.createElement(_internalSvgIconsPersonDefault.default, {
      className: classes.fallback
    });
  }
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),
      ref: ref
    }, other), children)
  );
});
"development" !== "production" ? Avatar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * Used in combination with `src` or `srcSet` to
  * provide an alt attribute for the rendered `img` element.
  */
  alt: _propTypesDefault.default.string,
  /**
  * Used to render icon or text elements inside the Avatar if `src` is not set.
  * This can be an element, or just a string.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _materialUiUtils.chainPropTypes(_propTypesDefault.default.object, function (props) {
    var classes = props.classes;
    if (classes == null) {
      return null;
    }
    if (classes.circle != null && // 2 classnames? one from withStyles the other must be custom
    classes.circle.split(' ').length > 1) {
      throw new Error("Material-UI: The `circle` class was deprecated. Use `circular` instead.");
    }
    return null;
  }),
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * Attributes applied to the `img` element if the component is used to display an image.
  * It can be used to listen for the loading error event.
  */
  imgProps: _propTypesDefault.default.object,
  /**
  * The `sizes` attribute for the `img` element.
  */
  sizes: _propTypesDefault.default.string,
  /**
  * The `src` attribute for the `img` element.
  */
  src: _propTypesDefault.default.string,
  /**
  * The `srcSet` attribute for the `img` element.
  * Use this attribute for responsive image display.
  */
  srcSet: _propTypesDefault.default.string,
  /**
  * The shape of the avatar.
  */
  variant: _materialUiUtils.chainPropTypes(_propTypesDefault.default.oneOf(['circle', 'circular', 'rounded', 'square']), function (props) {
    var variant = props.variant;
    if (variant === 'circle') {
      throw new Error('Material-UI: `variant="circle"` was deprecated. Use `variant="circular"` instead.');
    }
    return null;
  })
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiAvatar'
})(Avatar);
