var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _materialUiUtils = require('@material-ui/utils');
var _utilsUseIsFocusVisible = require('../utils/useIsFocusVisible');
var _utilsUseIsFocusVisibleDefault = _parcelHelpers.interopDefault(_utilsUseIsFocusVisible);
var _utilsUseForkRef = require('../utils/useForkRef');
var _utilsUseForkRefDefault = _parcelHelpers.interopDefault(_utilsUseForkRef);
var _Typography = require('../Typography');
var _TypographyDefault = _parcelHelpers.interopDefault(_Typography);
var styles = {
  /*Styles applied to the root element.*/
  root: {},
  /*Styles applied to the root element if `underline="none"`.*/
  underlineNone: {
    textDecoration: 'none'
  },
  /*Styles applied to the root element if `underline="hover"`.*/
  underlineHover: {
    textDecoration: 'none',
    '&:hover': {
      textDecoration: 'underline'
    }
  },
  /*Styles applied to the root element if `underline="always"`.*/
  underlineAlways: {
    textDecoration: 'underline'
  },
  // Same reset as ButtonBase.root
  /*Styles applied to the root element if `component="button"`.*/
  button: {
    position: 'relative',
    WebkitTapHighlightColor: 'transparent',
    backgroundColor: 'transparent',
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    '-moz-appearance': 'none',
    // Reset
    '-webkit-appearance': 'none',
    // Reset
    '&::-moz-focus-inner': {
      borderStyle: 'none'
    },
    '&$focusVisible': {
      outline: 'auto'
    }
  },
  /*Pseudo-class applied to the root element if the link is keyboard focused.*/
  focusVisible: {}
};
var Link = /*#__PURE__*/_react.forwardRef(function Link(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'primary' : _props$color, _props$component = props.component, component = _props$component === void 0 ? 'a' : _props$component, onBlur = props.onBlur, onFocus = props.onFocus, TypographyClasses = props.TypographyClasses, _props$underline = props.underline, underline = _props$underline === void 0 ? 'hover' : _props$underline, _props$variant = props.variant, variant = _props$variant === void 0 ? 'inherit' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["classes", "className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant"]);
  var _useIsFocusVisible = _utilsUseIsFocusVisibleDefault.default(), isFocusVisible = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
  var _React$useState = _react.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
  var handlerRef = _utilsUseForkRefDefault.default(ref, focusVisibleRef);
  var handleBlur = function handleBlur(event) {
    if (focusVisible) {
      onBlurVisible();
      setFocusVisible(false);
    }
    if (onBlur) {
      onBlur(event);
    }
  };
  var handleFocus = function handleFocus(event) {
    if (isFocusVisible(event)) {
      setFocusVisible(true);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  return (
    /*#__PURE__*/_react.createElement(_TypographyDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, classes[("underline").concat(_utilsCapitalizeDefault.default(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),
      classes: TypographyClasses,
      color: color,
      component: component,
      onBlur: handleBlur,
      onFocus: handleFocus,
      ref: handlerRef,
      variant: variant
    }, other))
  );
});
"development" !== "production" ? Link.propTypes = {
  /**
  * The content of the link.
  */
  children: _propTypesDefault.default.node.isRequired,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The color of the link.
  */
  color: _propTypesDefault.default.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _materialUiUtils.elementTypeAcceptingRef,
  /**
  * @ignore
  */
  onBlur: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onFocus: _propTypesDefault.default.func,
  /**
  * `classes` prop applied to the [`Typography`](/api/typography/) element.
  */
  TypographyClasses: _propTypesDefault.default.object,
  /**
  * Controls when the link should have an underline.
  */
  underline: _propTypesDefault.default.oneOf(['none', 'hover', 'always']),
  /**
  * Applies the theme typography styles.
  */
  variant: _propTypesDefault.default.string
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiLink'
})(Link);
