var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _stylesColorManipulator = require('../styles/colorManipulator');
var _stylesUseTheme = require('../styles/useTheme');
var _stylesUseThemeDefault = _parcelHelpers.interopDefault(_stylesUseTheme);
var TRANSITION_DURATION = 4;
var styles = function styles(theme) {
  var getColor = function getColor(color) {
    return theme.palette.type === 'light' ? _stylesColorManipulator.lighten(color, 0.62) : _stylesColorManipulator.darken(color, 0.5);
  };
  var backgroundPrimary = getColor(theme.palette.primary.main);
  var backgroundSecondary = getColor(theme.palette.secondary.main);
  return {
    /*Styles applied to the root element.*/
    root: {
      position: 'relative',
      overflow: 'hidden',
      height: 4,
      '@media print': {
        colorAdjust: 'exact'
      }
    },
    /*Styles applied to the root and bar2 element if `color="primary"`; bar2 if `variant="buffer"`.*/
    colorPrimary: {
      backgroundColor: backgroundPrimary
    },
    /*Styles applied to the root and bar2 elements if `color="secondary"`; bar2 if `variant="buffer"`.*/
    colorSecondary: {
      backgroundColor: backgroundSecondary
    },
    /*Styles applied to the root element if `variant="determinate"`.*/
    determinate: {},
    /*Styles applied to the root element if `variant="indeterminate"`.*/
    indeterminate: {},
    /*Styles applied to the root element if `variant="buffer"`.*/
    buffer: {
      backgroundColor: 'transparent'
    },
    /*Styles applied to the root element if `variant="query"`.*/
    query: {
      transform: 'rotate(180deg)'
    },
    /*Styles applied to the additional bar element if `variant="buffer"`.*/
    dashed: {
      position: 'absolute',
      marginTop: 0,
      height: '100%',
      width: '100%',
      animation: '$buffer 3s infinite linear'
    },
    /*Styles applied to the additional bar element if `variant="buffer"` and `color="primary"`.*/
    dashedColorPrimary: {
      backgroundImage: ("radial-gradient(").concat(backgroundPrimary, " 0%, ").concat(backgroundPrimary, " 16%, transparent 42%)"),
      backgroundSize: '10px 10px',
      backgroundPosition: '0 -23px'
    },
    /*Styles applied to the additional bar element if `variant="buffer"` and `color="secondary"`.*/
    dashedColorSecondary: {
      backgroundImage: ("radial-gradient(").concat(backgroundSecondary, " 0%, ").concat(backgroundSecondary, " 16%, transparent 42%)"),
      backgroundSize: '10px 10px',
      backgroundPosition: '0 -23px'
    },
    /*Styles applied to the layered bar1 and bar2 elements.*/
    bar: {
      width: '100%',
      position: 'absolute',
      left: 0,
      bottom: 0,
      top: 0,
      transition: 'transform 0.2s linear',
      transformOrigin: 'left'
    },
    /*Styles applied to the bar elements if `color="primary"`; bar2 if `variant` not "buffer".*/
    barColorPrimary: {
      backgroundColor: theme.palette.primary.main
    },
    /*Styles applied to the bar elements if `color="secondary"`; bar2 if `variant` not "buffer".*/
    barColorSecondary: {
      backgroundColor: theme.palette.secondary.main
    },
    /*Styles applied to the bar1 element if `variant="indeterminate or query"`.*/
    bar1Indeterminate: {
      width: 'auto',
      animation: '$indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite'
    },
    /*Styles applied to the bar1 element if `variant="determinate"`.*/
    bar1Determinate: {
      transition: ("transform .").concat(TRANSITION_DURATION, "s linear")
    },
    /*Styles applied to the bar1 element if `variant="buffer"`.*/
    bar1Buffer: {
      zIndex: 1,
      transition: ("transform .").concat(TRANSITION_DURATION, "s linear")
    },
    /*Styles applied to the bar2 element if `variant="indeterminate or query"`.*/
    bar2Indeterminate: {
      width: 'auto',
      animation: '$indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite'
    },
    /*Styles applied to the bar2 element if `variant="buffer"`.*/
    bar2Buffer: {
      transition: ("transform .").concat(TRANSITION_DURATION, "s linear")
    },
    // Legends:
    // || represents the viewport
    // -  represents a light background
    // x  represents a dark background
    '@keyframes indeterminate1': {
      // |-----|---x-||-----||-----|
      '0%': {
        left: '-35%',
        right: '100%'
      },
      // |-----|-----||-----||xxxx-|
      '60%': {
        left: '100%',
        right: '-90%'
      },
      '100%': {
        left: '100%',
        right: '-90%'
      }
    },
    '@keyframes indeterminate2': {
      // |xxxxx|xxxxx||-----||-----|
      '0%': {
        left: '-200%',
        right: '100%'
      },
      // |-----|-----||-----||-x----|
      '60%': {
        left: '107%',
        right: '-8%'
      },
      '100%': {
        left: '107%',
        right: '-8%'
      }
    },
    '@keyframes buffer': {
      '0%': {
        opacity: 1,
        backgroundPosition: '0 -23px'
      },
      '50%': {
        opacity: 0,
        backgroundPosition: '0 -23px'
      },
      '100%': {
        opacity: 1,
        backgroundPosition: '-200px -23px'
      }
    }
  };
};
/**
* ## ARIA
*
* If the progress bar is describing the loading progress of a particular region of a page,
* you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
* attribute to `true` on that region until it has finished loading.
*/
var LinearProgress = /*#__PURE__*/_react.forwardRef(function LinearProgress(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'primary' : _props$color, value = props.value, valueBuffer = props.valueBuffer, _props$variant = props.variant, variant = _props$variant === void 0 ? 'indeterminate' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["classes", "className", "color", "value", "valueBuffer", "variant"]);
  var theme = _stylesUseThemeDefault.default();
  var rootProps = {};
  var inlineStyles = {
    bar1: {},
    bar2: {}
  };
  if (variant === 'determinate' || variant === 'buffer') {
    if (value !== undefined) {
      rootProps['aria-valuenow'] = Math.round(value);
      rootProps['aria-valuemin'] = 0;
      rootProps['aria-valuemax'] = 100;
      var transform = value - 100;
      if (theme.direction === 'rtl') {
        transform = -transform;
      }
      inlineStyles.bar1.transform = ("translateX(").concat(transform, "%)");
    } else if ("development" !== 'production') {
      console.error('Material-UI: You need to provide a value prop ' + 'when using the determinate or buffer variant of LinearProgress .');
    }
  }
  if (variant === 'buffer') {
    if (valueBuffer !== undefined) {
      var _transform = (valueBuffer || 0) - 100;
      if (theme.direction === 'rtl') {
        _transform = -_transform;
      }
      inlineStyles.bar2.transform = ("translateX(").concat(_transform, "%)");
    } else if ("development" !== 'production') {
      console.error('Material-UI: You need to provide a valueBuffer prop ' + 'when using the buffer variant of LinearProgress.');
    }
  }
  return (
    /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, classes[("color").concat(_utilsCapitalizeDefault.default(color))], className, ({
        'determinate': classes.determinate,
        'indeterminate': classes.indeterminate,
        'buffer': classes.buffer,
        'query': classes.query
      })[variant]),
      role: "progressbar"
    }, rootProps, {
      ref: ref
    }, other), variant === 'buffer' ? /*#__PURE__*/_react.createElement("div", {
      className: _clsxDefault.default(classes.dashed, classes[("dashedColor").concat(_utilsCapitalizeDefault.default(color))])
    }) : null, /*#__PURE__*/_react.createElement("div", {
      className: _clsxDefault.default(classes.bar, classes[("barColor").concat(_utilsCapitalizeDefault.default(color))], (variant === 'indeterminate' || variant === 'query') && classes.bar1Indeterminate, ({
        'determinate': classes.bar1Determinate,
        'buffer': classes.bar1Buffer
      })[variant]),
      style: inlineStyles.bar1
    }), variant === 'determinate' ? null : /*#__PURE__*/_react.createElement("div", {
      className: _clsxDefault.default(classes.bar, (variant === 'indeterminate' || variant === 'query') && classes.bar2Indeterminate, variant === 'buffer' ? [classes[("color").concat(_utilsCapitalizeDefault.default(color))], classes.bar2Buffer] : classes[("barColor").concat(_utilsCapitalizeDefault.default(color))]),
      style: inlineStyles.bar2
    }))
  );
});
"development" !== "production" ? LinearProgress.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['primary', 'secondary']),
  /**
  * The value of the progress indicator for the determinate and buffer variants.
  * Value between 0 and 100.
  */
  value: _propTypesDefault.default.number,
  /**
  * The value for the buffer variant.
  * Value between 0 and 100.
  */
  valueBuffer: _propTypesDefault.default.number,
  /**
  * The variant to use.
  * Use indeterminate or query when there is no progress value.
  */
  variant: _propTypesDefault.default.oneOf(['buffer', 'determinate', 'indeterminate', 'query'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiLinearProgress'
})(LinearProgress);
