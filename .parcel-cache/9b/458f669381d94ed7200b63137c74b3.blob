"use strict";
var Buffer = require("buffer").Buffer;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pbkdf2Sync = pbkdf2Sync;
var _util = require("@polkadot/util");
var _hmac = require("../hmac");
// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Adapted from https://gist.github.com/calvinmetcalf/91e8e84dc63c75f2aa53
function pbkdf2Sync(password, salt, rounds, len = 64) {
  let out = new Uint8Array();
  let num = 0;
  const block = Buffer.concat([salt, Buffer.from([0, 0, 0, 0])]);
  while (out.length < len) {
    num++;
    block.writeUInt32BE(num, salt.length);
    let prev = (0, _hmac.hmacSha512)(password, block);
    const md = prev;
    let i = 0;
    while (++i < rounds) {
      prev = (0, _hmac.hmacSha512)(password, prev);
      let j = -1;
      while (++j < prev.length) {
        md[j] ^= prev[j];
      }
    }
    out = (0, _util.u8aConcat)(out, md);
  }
  return out.slice(0, len);
}
