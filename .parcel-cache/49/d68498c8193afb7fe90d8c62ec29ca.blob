var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _ButtonBase = require('../ButtonBase');
var _ButtonBaseDefault = _parcelHelpers.interopDefault(_ButtonBase);
var _utilsIsMuiElement = require('../utils/isMuiElement');
var _utilsIsMuiElementDefault = _parcelHelpers.interopDefault(_utilsIsMuiElement);
var _utilsUseForkRef = require('../utils/useForkRef');
var _utilsUseForkRefDefault = _parcelHelpers.interopDefault(_utilsUseForkRef);
var _ListListContext = require('../List/ListContext');
var _ListListContextDefault = _parcelHelpers.interopDefault(_ListListContext);
var _reactDom = require('react-dom');
var styles = function styles(theme) {
  return {
    /*Styles applied to the (normally root) `component` element. May be wrapped by a `container`.*/
    root: {
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'center',
      position: 'relative',
      textDecoration: 'none',
      width: '100%',
      boxSizing: 'border-box',
      textAlign: 'left',
      paddingTop: 8,
      paddingBottom: 8,
      '&$focusVisible': {
        backgroundColor: theme.palette.action.selected
      },
      '&$selected, &$selected:hover': {
        backgroundColor: theme.palette.action.selected
      },
      '&$disabled': {
        opacity: 0.5
      }
    },
    /*Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`.*/
    container: {
      position: 'relative'
    },
    /*Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`.*/
    focusVisible: {},
    /*Styles applied to the `component` element if dense.*/
    dense: {
      paddingTop: 4,
      paddingBottom: 4
    },
    /*Styles applied to the `component` element if `alignItems="flex-start"`.*/
    alignItemsFlexStart: {
      alignItems: 'flex-start'
    },
    /*Pseudo-class applied to the inner `component` element if `disabled={true}`.*/
    disabled: {},
    /*Styles applied to the inner `component` element if `divider={true}`.*/
    divider: {
      borderBottom: ("1px solid ").concat(theme.palette.divider),
      backgroundClip: 'padding-box'
    },
    /*Styles applied to the inner `component` element if `disableGutters={false}`.*/
    gutters: {
      paddingLeft: 16,
      paddingRight: 16
    },
    /*Styles applied to the inner `component` element if `button={true}`.*/
    button: {
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shortest
      }),
      '&:hover': {
        textDecoration: 'none',
        backgroundColor: theme.palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      }
    },
    /*Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`.*/
    secondaryAction: {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    },
    /*Pseudo-class applied to the root element if `selected={true}`.*/
    selected: {}
  };
};
var useEnhancedEffect = typeof window === 'undefined' ? _react.useEffect : _react.useLayoutEffect;
/**
* Uses an additional container component if `ListItemSecondaryAction` is the last child.
*/
var ListItem = /*#__PURE__*/_react.forwardRef(function ListItem(props, ref) {
  var _props$alignItems = props.alignItems, alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, _props$button = props.button, button = _props$button === void 0 ? false : _props$button, childrenProp = props.children, classes = props.classes, className = props.className, componentProp = props.component, _props$ContainerCompo = props.ContainerComponent, ContainerComponent = _props$ContainerCompo === void 0 ? 'li' : _props$ContainerCompo, _props$ContainerProps = props.ContainerProps;
  _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;
  var ContainerClassName = _props$ContainerProps.className, ContainerProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(_props$ContainerProps, ["className"]), _props$dense = props.dense, dense = _props$dense === void 0 ? false : _props$dense, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$divider = props.divider, divider = _props$divider === void 0 ? false : _props$divider, focusVisibleClassName = props.focusVisibleClassName, _props$selected = props.selected, selected = _props$selected === void 0 ? false : _props$selected, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["alignItems", "autoFocus", "button", "children", "classes", "className", "component", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "divider", "focusVisibleClassName", "selected"]);
  var context = _react.useContext(_ListListContextDefault.default);
  var childContext = {
    dense: dense || context.dense || false,
    alignItems: alignItems
  };
  var listItemRef = _react.useRef(null);
  useEnhancedEffect(function () {
    if (autoFocus) {
      if (listItemRef.current) {
        listItemRef.current.focus();
      } else if ("development" !== 'production') {
        console.error('Material-UI: Unable to set focus to a ListItem whose component has not been rendered.');
      }
    }
  }, [autoFocus]);
  var children = _react.Children.toArray(childrenProp);
  var hasSecondaryAction = children.length && _utilsIsMuiElementDefault.default(children[children.length - 1], ['ListItemSecondaryAction']);
  var handleOwnRef = _react.useCallback(function (instance) {
    // #StrictMode ready
    listItemRef.current = _reactDom.findDOMNode(instance);
  }, []);
  var handleRef = _utilsUseForkRefDefault.default(handleOwnRef, ref);
  var componentProps = _babelRuntimeHelpersEsmExtendsDefault.default({
    className: _clsxDefault.default(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== "center" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),
    disabled: disabled
  }, other);
  var Component = componentProp || 'li';
  if (button) {
    componentProps.component = componentProp || 'div';
    componentProps.focusVisibleClassName = _clsxDefault.default(classes.focusVisible, focusVisibleClassName);
    Component = _ButtonBaseDefault.default;
  }
  if (hasSecondaryAction) {
    // Use div by default.
    Component = !componentProps.component && !componentProp ? 'div' : Component;
    // Avoid nesting of li > li.
    if (ContainerComponent === 'li') {
      if (Component === 'li') {
        Component = 'div';
      } else if (componentProps.component === 'li') {
        componentProps.component = 'div';
      }
    }
    return (
      /*#__PURE__*/_react.createElement(_ListListContextDefault.default.Provider, {
        value: childContext
      }, /*#__PURE__*/_react.createElement(ContainerComponent, _babelRuntimeHelpersEsmExtendsDefault.default({
        className: _clsxDefault.default(classes.container, ContainerClassName),
        ref: handleRef
      }, ContainerProps), /*#__PURE__*/_react.createElement(Component, componentProps, children), children.pop()))
    );
  }
  return (
    /*#__PURE__*/_react.createElement(_ListListContextDefault.default.Provider, {
      value: childContext
    }, /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      ref: handleRef
    }, componentProps), children))
  );
});
"development" !== "production" ? ListItem.propTypes = {
  /**
  * Defines the `align-items` style property.
  */
  alignItems: _propTypesDefault.default.oneOf(['flex-start', 'center']),
  /**
  * If `true`, the list item will be focused during the first mount.
  * Focus will also be triggered if the value changes from false to true.
  */
  autoFocus: _propTypesDefault.default.bool,
  /**
  * If `true`, the list item will be a button (using `ButtonBase`). Props intended
  * for `ButtonBase` can then be applied to `ListItem`.
  */
  button: _propTypesDefault.default.bool,
  /**
  * The content of the component. If a `ListItemSecondaryAction` is used it must
  * be the last child.
  */
  children: _materialUiUtils.chainPropTypes(_propTypesDefault.default.node, function (props) {
    var children = _react.Children.toArray(props.children);
    // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)
    var secondaryActionIndex = -1;
    for (var i = children.length - 1; i >= 0; i -= 1) {
      var child = children[i];
      if (_utilsIsMuiElementDefault.default(child, ['ListItemSecondaryAction'])) {
        secondaryActionIndex = i;
        break;
      }
    }
    // is ListItemSecondaryAction the last child of ListItem
    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
      return new Error('Material-UI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
    }
    return null;
  }),
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * The container component used when a `ListItemSecondaryAction` is the last child.
  */
  ContainerComponent: _propTypesDefault.default.elementType,
  /**
  * Props applied to the container component if used.
  */
  ContainerProps: _propTypesDefault.default.object,
  /**
  * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
  */
  dense: _propTypesDefault.default.bool,
  /**
  * If `true`, the list item will be disabled.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, the left and right padding is removed.
  */
  disableGutters: _propTypesDefault.default.bool,
  /**
  * If `true`, a 1px light border is added to the bottom of the list item.
  */
  divider: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  focusVisibleClassName: _propTypesDefault.default.string,
  /**
  * Use to apply selected styling.
  */
  selected: _propTypesDefault.default.bool
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiListItem'
})(ListItem);
