var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _internalSwitchBase = require('../internal/SwitchBase');
var _internalSwitchBaseDefault = _parcelHelpers.interopDefault(_internalSwitchBase);
var _internalSvgIconsCheckBoxOutlineBlank = require('../internal/svg-icons/CheckBoxOutlineBlank');
var _internalSvgIconsCheckBoxOutlineBlankDefault = _parcelHelpers.interopDefault(_internalSvgIconsCheckBoxOutlineBlank);
var _internalSvgIconsCheckBox = require('../internal/svg-icons/CheckBox');
var _internalSvgIconsCheckBoxDefault = _parcelHelpers.interopDefault(_internalSvgIconsCheckBox);
var _stylesColorManipulator = require('../styles/colorManipulator');
var _internalSvgIconsIndeterminateCheckBox = require('../internal/svg-icons/IndeterminateCheckBox');
var _internalSvgIconsIndeterminateCheckBoxDefault = _parcelHelpers.interopDefault(_internalSvgIconsIndeterminateCheckBox);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: {
      color: theme.palette.text.secondary
    },
    /*Pseudo-class applied to the root element if `checked={true}`.*/
    checked: {},
    /*Pseudo-class applied to the root element if `disabled={true}`.*/
    disabled: {},
    /*Pseudo-class applied to the root element if `indeterminate={true}`.*/
    indeterminate: {},
    /*Styles applied to the root element if `color="primary"`.*/
    colorPrimary: {
      '&$checked': {
        color: theme.palette.primary.main,
        '&:hover': {
          backgroundColor: _stylesColorManipulator.fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }
      },
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    },
    /*Styles applied to the root element if `color="secondary"`.*/
    colorSecondary: {
      '&$checked': {
        color: theme.palette.secondary.main,
        '&:hover': {
          backgroundColor: _stylesColorManipulator.fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }
      },
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    }
  };
};
var defaultCheckedIcon = /*#__PURE__*/_react.createElement(_internalSvgIconsCheckBoxDefault.default, null);
var defaultIcon = /*#__PURE__*/_react.createElement(_internalSvgIconsCheckBoxOutlineBlankDefault.default, null);
var defaultIndeterminateIcon = /*#__PURE__*/_react.createElement(_internalSvgIconsIndeterminateCheckBoxDefault.default, null);
var Checkbox = /*#__PURE__*/_react.forwardRef(function Checkbox(props, ref) {
  var _props$checkedIcon = props.checkedIcon, checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon, classes = props.classes, _props$color = props.color, color = _props$color === void 0 ? 'secondary' : _props$color, _props$icon = props.icon, iconProp = _props$icon === void 0 ? defaultIcon : _props$icon, _props$indeterminate = props.indeterminate, indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate, _props$indeterminateI = props.indeterminateIcon, indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI, inputProps = props.inputProps, _props$size = props.size, size = _props$size === void 0 ? 'medium' : _props$size, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["checkedIcon", "classes", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"]);
  var icon = indeterminate ? indeterminateIconProp : iconProp;
  var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
  return (
    /*#__PURE__*/_react.createElement(_internalSwitchBaseDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      type: "checkbox",
      classes: {
        root: _clsxDefault.default(classes.root, classes[("color").concat(_utilsCapitalizeDefault.default(color))], indeterminate && classes.indeterminate),
        checked: classes.checked,
        disabled: classes.disabled
      },
      color: color,
      inputProps: _babelRuntimeHelpersEsmExtendsDefault.default({
        'data-indeterminate': indeterminate
      }, inputProps),
      icon: /*#__PURE__*/_react.cloneElement(icon, {
        fontSize: icon.props.fontSize === undefined && size === "small" ? size : icon.props.fontSize
      }),
      checkedIcon: /*#__PURE__*/_react.cloneElement(indeterminateIcon, {
        fontSize: indeterminateIcon.props.fontSize === undefined && size === "small" ? size : indeterminateIcon.props.fontSize
      }),
      ref: ref
    }, other))
  );
});
"development" !== "production" ? Checkbox.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * If `true`, the component is checked.
  */
  checked: _propTypesDefault.default.bool,
  /**
  * The icon to display when the component is checked.
  */
  checkedIcon: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['default', 'primary', 'secondary']),
  /**
  * If `true`, the checkbox will be disabled.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, the ripple effect will be disabled.
  */
  disableRipple: _propTypesDefault.default.bool,
  /**
  * The icon to display when the component is unchecked.
  */
  icon: _propTypesDefault.default.node,
  /**
  * The id of the `input` element.
  */
  id: _propTypesDefault.default.string,
  /**
  * If `true`, the component appears indeterminate.
  * This does not set the native input element to indeterminate due
  * to inconsistent behavior across browsers.
  * However, we set a `data-indeterminate` attribute on the input.
  */
  indeterminate: _propTypesDefault.default.bool,
  /**
  * The icon to display when the component is indeterminate.
  */
  indeterminateIcon: _propTypesDefault.default.node,
  /**
  * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
  */
  inputProps: _propTypesDefault.default.object,
  /**
  * Pass a ref to the `input` element.
  */
  inputRef: _materialUiUtils.refType,
  /**
  * Callback fired when the state is changed.
  *
  * @param {object} event The event source of the callback.
  * You can pull out the new checked state by accessing `event.target.checked` (boolean).
  */
  onChange: _propTypesDefault.default.func,
  /**
  * If `true`, the `input` element will be required.
  */
  required: _propTypesDefault.default.bool,
  /**
  * The size of the checkbox.
  * `small` is equivalent to the dense checkbox styling.
  */
  size: _propTypesDefault.default.oneOf(['medium', 'small']),
  /**
  * The value of the component. The DOM API casts this to a string.
  * The browser uses "on" as the default value.
  */
  value: _propTypesDefault.default.any
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiCheckbox'
})(Checkbox);
