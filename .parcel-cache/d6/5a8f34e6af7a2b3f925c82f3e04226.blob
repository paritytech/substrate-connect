var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmDefineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _babelRuntimeHelpersEsmDefinePropertyDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmDefineProperty);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _ButtonBase = require('../ButtonBase');
var _ButtonBaseDefault = _parcelHelpers.interopDefault(_ButtonBase);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var _utilsUnsupportedProp = require('../utils/unsupportedProp');
var _utilsUnsupportedPropDefault = _parcelHelpers.interopDefault(_utilsUnsupportedProp);
var styles = function styles(theme) {
  var _extends2;
  return {
    /*Styles applied to the root element.*/
    root: _babelRuntimeHelpersEsmExtendsDefault.default({}, theme.typography.button, (_extends2 = {
      maxWidth: 264,
      minWidth: 72,
      position: 'relative',
      boxSizing: 'border-box',
      minHeight: 48,
      flexShrink: 0,
      padding: '6px 12px'
    }, _babelRuntimeHelpersEsmDefinePropertyDefault.default(_extends2, theme.breakpoints.up('sm'), {
      padding: '6px 24px'
    }), _babelRuntimeHelpersEsmDefinePropertyDefault.default(_extends2, "overflow", 'hidden'), _babelRuntimeHelpersEsmDefinePropertyDefault.default(_extends2, "whiteSpace", 'normal'), _babelRuntimeHelpersEsmDefinePropertyDefault.default(_extends2, "textAlign", 'center'), _babelRuntimeHelpersEsmDefinePropertyDefault.default(_extends2, theme.breakpoints.up('sm'), {
      minWidth: 160
    }), _extends2)),
    /*Styles applied to the root element if both `icon` and `label` are provided.*/
    labelIcon: {
      minHeight: 72,
      paddingTop: 9,
      '& $wrapper > *:first-child': {
        marginBottom: 6
      }
    },
    /*Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor="inherit"`.*/
    textColorInherit: {
      color: 'inherit',
      opacity: 0.7,
      '&$selected': {
        opacity: 1
      },
      '&$disabled': {
        opacity: 0.5
      }
    },
    /*Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor="primary"`.*/
    textColorPrimary: {
      color: theme.palette.text.secondary,
      '&$selected': {
        color: theme.palette.primary.main
      },
      '&$disabled': {
        color: theme.palette.text.disabled
      }
    },
    /*Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor="secondary"`.*/
    textColorSecondary: {
      color: theme.palette.text.secondary,
      '&$selected': {
        color: theme.palette.secondary.main
      },
      '&$disabled': {
        color: theme.palette.text.disabled
      }
    },
    /*Pseudo-class applied to the root element if `selected={true}` (controlled by the Tabs component).*/
    selected: {},
    /*Pseudo-class applied to the root element if `disabled={true}` (controlled by the Tabs component).*/
    disabled: {},
    /*Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component).*/
    fullWidth: {
      flexShrink: 1,
      flexGrow: 1,
      flexBasis: 0,
      maxWidth: 'none'
    },
    /*Styles applied to the root element if `wrapped={true}`.*/
    wrapped: {
      fontSize: theme.typography.pxToRem(12),
      lineHeight: 1.5
    },
    /*Styles applied to the `icon` and `label`'s wrapper element.*/
    wrapper: {
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      width: '100%',
      flexDirection: 'column'
    }
  };
};
var Tab = /*#__PURE__*/_react.forwardRef(function Tab(props, ref) {
  var classes = props.classes, className = props.className, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, fullWidth = props.fullWidth, icon = props.icon, indicator = props.indicator, label = props.label, onChange = props.onChange, onClick = props.onClick, onFocus = props.onFocus, selected = props.selected, selectionFollowsFocus = props.selectionFollowsFocus, _props$textColor = props.textColor, textColor = _props$textColor === void 0 ? 'inherit' : _props$textColor, value = props.value, _props$wrapped = props.wrapped, wrapped = _props$wrapped === void 0 ? false : _props$wrapped, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["classes", "className", "disabled", "disableFocusRipple", "fullWidth", "icon", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"]);
  var handleClick = function handleClick(event) {
    if (onChange) {
      onChange(event, value);
    }
    if (onClick) {
      onClick(event);
    }
  };
  var handleFocus = function handleFocus(event) {
    if (selectionFollowsFocus && !selected && onChange) {
      onChange(event, value);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  return (
    /*#__PURE__*/_react.createElement(_ButtonBaseDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      focusRipple: !disableFocusRipple,
      className: _clsxDefault.default(classes.root, classes[("textColor").concat(_utilsCapitalizeDefault.default(textColor))], className, disabled && classes.disabled, selected && classes.selected, label && icon && classes.labelIcon, fullWidth && classes.fullWidth, wrapped && classes.wrapped),
      ref: ref,
      role: "tab",
      "aria-selected": selected,
      disabled: disabled,
      onClick: handleClick,
      onFocus: handleFocus,
      tabIndex: selected ? 0 : -1
    }, other), /*#__PURE__*/_react.createElement("span", {
      className: classes.wrapper
    }, icon, label), indicator)
  );
});
"development" !== "production" ? Tab.propTypes = {
  /**
  * This prop isn't supported.
  * Use the `component` prop if you need to change the children structure.
  */
  children: _utilsUnsupportedPropDefault.default,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * If `true`, the tab will be disabled.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, the  keyboard focus ripple will be disabled.
  */
  disableFocusRipple: _propTypesDefault.default.bool,
  /**
  * If `true`, the ripple effect will be disabled.
  */
  disableRipple: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  fullWidth: _propTypesDefault.default.bool,
  /**
  * The icon element.
  */
  icon: _propTypesDefault.default.node,
  /**
  * @ignore
  * For server-side rendering consideration, we let the selected tab
  * render the indicator.
  */
  indicator: _propTypesDefault.default.node,
  /**
  * The label element.
  */
  label: _propTypesDefault.default.node,
  /**
  * @ignore
  */
  onChange: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onClick: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onFocus: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  selected: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  selectionFollowsFocus: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  textColor: _propTypesDefault.default.oneOf(['secondary', 'primary', 'inherit']),
  /**
  * You can provide your own value. Otherwise, we fallback to the child position index.
  */
  value: _propTypesDefault.default.any,
  /**
  * Tab labels appear in a single row.
  * They can use a second line if needed.
  */
  wrapped: _propTypesDefault.default.bool
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiTab'
})(Tab);
