var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "HealthCheckError", function () {
  return HealthCheckError;
});
var __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || (function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
});
var __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || (function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
});
var _cause;
class HealthCheckError extends Error {
  constructor(response, message = "Got error response asking for system health") {
    super(message);
    _cause.set(this, void 0);
    __classPrivateFieldSet(this, _cause, response);
    // 'Error' breaks the prototype chain - restore it
    Object.setPrototypeOf(this, new.target.prototype);
  }
  getCause() {
    return __classPrivateFieldGet(this, _cause);
  }
}
_cause = new WeakMap();
