var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: {
      boxSizing: 'border-box',
      lineHeight: '48px',
      listStyle: 'none',
      color: theme.palette.text.secondary,
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(14)
    },
    /*Styles applied to the root element if `color="primary"`.*/
    colorPrimary: {
      color: theme.palette.primary.main
    },
    /*Styles applied to the root element if `color="inherit"`.*/
    colorInherit: {
      color: 'inherit'
    },
    /*Styles applied to the inner `component` element if `disableGutters={false}`.*/
    gutters: {
      paddingLeft: 16,
      paddingRight: 16
    },
    /*Styles applied to the root element if `inset={true}`.*/
    inset: {
      paddingLeft: 72
    },
    /*Styles applied to the root element if `disableSticky={false}`.*/
    sticky: {
      position: 'sticky',
      top: 0,
      zIndex: 1,
      backgroundColor: 'inherit'
    }
  };
};
var ListSubheader = /*#__PURE__*/_react.forwardRef(function ListSubheader(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'default' : _props$color, _props$component = props.component, Component = _props$component === void 0 ? 'li' : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$disableSticky = props.disableSticky, disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky, _props$inset = props.inset, inset = _props$inset === void 0 ? false : _props$inset, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["classes", "className", "color", "component", "disableGutters", "disableSticky", "inset"]);
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, color !== 'default' && classes[("color").concat(_utilsCapitalizeDefault.default(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),
      ref: ref
    }, other))
  );
});
"development" !== "production" ? ListSubheader.propTypes = {
  /**
  * The content of the component.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['default', 'primary', 'inherit']),
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * If `true`, the List Subheader will not have gutters.
  */
  disableGutters: _propTypesDefault.default.bool,
  /**
  * If `true`, the List Subheader will not stick to the top during scroll.
  */
  disableSticky: _propTypesDefault.default.bool,
  /**
  * If `true`, the List Subheader will be indented.
  */
  inset: _propTypesDefault.default.bool
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiListSubheader'
})(ListSubheader);
