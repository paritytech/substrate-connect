var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: {
      userSelect: 'none',
      fontSize: theme.typography.pxToRem(24),
      width: '1em',
      height: '1em',
      // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
      // To remove at some point.
      overflow: 'hidden',
      flexShrink: 0
    },
    /*Styles applied to the root element if `color="primary"`.*/
    colorPrimary: {
      color: theme.palette.primary.main
    },
    /*Styles applied to the root element if `color="secondary"`.*/
    colorSecondary: {
      color: theme.palette.secondary.main
    },
    /*Styles applied to the root element if `color="action"`.*/
    colorAction: {
      color: theme.palette.action.active
    },
    /*Styles applied to the root element if `color="error"`.*/
    colorError: {
      color: theme.palette.error.main
    },
    /*Styles applied to the root element if `color="disabled"`.*/
    colorDisabled: {
      color: theme.palette.action.disabled
    },
    /*Styles applied to the root element if `fontSize="inherit"`.*/
    fontSizeInherit: {
      fontSize: 'inherit'
    },
    /*Styles applied to the root element if `fontSize="small"`.*/
    fontSizeSmall: {
      fontSize: theme.typography.pxToRem(20)
    },
    /*Styles applied to the root element if `fontSize="large"`.*/
    fontSizeLarge: {
      fontSize: theme.typography.pxToRem(36)
    }
  };
};
var Icon = /*#__PURE__*/_react.forwardRef(function Icon(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'inherit' : _props$color, _props$component = props.component, Component = _props$component === void 0 ? 'span' : _props$component, _props$fontSize = props.fontSize, fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["classes", "className", "color", "component", "fontSize"]);
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default('material-icons', classes.root, className, color !== 'inherit' && classes[("color").concat(_utilsCapitalizeDefault.default(color))], fontSize !== 'default' && classes[("fontSize").concat(_utilsCapitalizeDefault.default(fontSize))]),
      "aria-hidden": true,
      ref: ref
    }, other))
  );
});
"development" !== "production" ? Icon.propTypes = {
  /**
  * The name of the icon font ligature.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
  */
  fontSize: _propTypesDefault.default.oneOf(['inherit', 'default', 'small', 'large'])
} : void 0;
Icon.muiName = 'Icon';
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiIcon'
})(Icon);
