var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getName", function () {
  return getName;
});
_parcelHelpers.export(exports, "openInNewTab", function () {
  return openInNewTab;
});
_parcelHelpers.export(exports, "downloadFile", function () {
  return downloadFile;
});
_parcelHelpers.export(exports, "createLocalStorageAccount", function () {
  return createLocalStorageAccount;
});
_parcelHelpers.export(exports, "isEmpty", function () {
  return isEmpty;
});
_parcelHelpers.export(exports, "copyToClipboard", function () {
  return copyToClipboard;
});
_parcelHelpers.export(exports, "getKeyring", function () {
  return getKeyring;
});
_parcelHelpers.export(exports, "transformCurrency", function () {
  return transformCurrency;
});
var _uniqueNamesGenerator = require('unique-names-generator');
var _polkadotUtilCrypto = require('@polkadot/util-crypto');
var _polkadotApi = require('@polkadot/api');
const keyring = new _polkadotApi.Keyring({
  type: 'sr25519'
});
const config = {
  dictionaries: [_uniqueNamesGenerator.starWars]
};
const getName = account => `${account.name}`;
const openInNewTab = url => {
  const newWindow = window.open(url, '_blank', 'noopener,noreferrer');
  if (newWindow) newWindow.opener = null;
};
const downloadFile = (fileName, data, type) => {
  const anchor = window.document.createElement('a');
  anchor.href = window.URL.createObjectURL(new Blob([data], {
    type: `application/${type}`
  }));
  anchor.download = `${type === 'txt' ? 'seedphrase-' : ''}${fileName}.${type}`;
  document.body.appendChild(anchor);
  anchor.click();
  document.body.removeChild(anchor);
  window.URL.revokeObjectURL(anchor.href);
};
const createLocalStorageAccount = () => {
  const mnemonic = _polkadotUtilCrypto.mnemonicGenerate(12);
  const pair = keyring.addFromMnemonic(mnemonic, {
    name: _uniqueNamesGenerator.uniqueNamesGenerator(config)
  }, 'sr25519');
  // const pair = keyring.addFromUri('//Charlie', { name: 'Charlie default' });
  return {
    userAddress: pair.address,
    userName: pair.meta.name || '____ _____',
    userSeed: mnemonic,
    userJson: pair.toJson(),
    userHistory: []
  };
};
const isEmpty = obj => typeof obj === 'object' && obj !== null && Object.keys(obj).length === 0 && obj.constructor === Object;
const copyToClipboard = text => {
  const dummy = document.createElement("textarea");
  document.body.appendChild(dummy);
  dummy.value = text;
  dummy.select();
  document.execCommand("copy");
  document.body.removeChild(dummy);
};
const getKeyring = () => keyring;
const transformCurrency = (currencyLevel, currency) => currencyLevel !== '-' ? currencyLevel.concat(currency) : currency;
