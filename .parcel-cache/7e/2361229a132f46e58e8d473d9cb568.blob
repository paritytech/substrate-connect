var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var SIZE = 44;
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: {
      display: 'inline-block'
    },
    /*Styles applied to the root element if `variant="static"`.*/
    static: {
      transition: theme.transitions.create('transform')
    },
    /*Styles applied to the root element if `variant="indeterminate"`.*/
    indeterminate: {
      animation: '$circular-rotate 1.4s linear infinite'
    },
    /*Styles applied to the root element if `variant="determinate"`.*/
    determinate: {
      transition: theme.transitions.create('transform')
    },
    /*Styles applied to the root element if `color="primary"`.*/
    colorPrimary: {
      color: theme.palette.primary.main
    },
    /*Styles applied to the root element if `color="secondary"`.*/
    colorSecondary: {
      color: theme.palette.secondary.main
    },
    /*Styles applied to the `svg` element.*/
    svg: {
      display: 'block'
    },
    /*Styles applied to the `circle` svg path.*/
    circle: {
      stroke: 'currentColor'
    },
    /*Styles applied to the `circle` svg path if `variant="static"`.*/
    circleStatic: {
      transition: theme.transitions.create('stroke-dashoffset')
    },
    /*Styles applied to the `circle` svg path if `variant="indeterminate"`.*/
    circleIndeterminate: {
      animation: '$circular-dash 1.4s ease-in-out infinite',
      // Some default value that looks fine waiting for the animation to kicks in.
      strokeDasharray: '80px, 200px',
      strokeDashoffset: '0px'
    },
    /*Styles applied to the `circle` svg path if `variant="determinate"`.*/
    circleDeterminate: {
      transition: theme.transitions.create('stroke-dashoffset')
    },
    '@keyframes circular-rotate': {
      '0%': {
        // Fix IE 11 wobbly
        transformOrigin: '50% 50%'
      },
      '100%': {
        transform: 'rotate(360deg)'
      }
    },
    '@keyframes circular-dash': {
      '0%': {
        strokeDasharray: '1px, 200px',
        strokeDashoffset: '0px'
      },
      '50%': {
        strokeDasharray: '100px, 200px',
        strokeDashoffset: '-15px'
      },
      '100%': {
        strokeDasharray: '100px, 200px',
        strokeDashoffset: '-125px'
      }
    },
    /*Styles applied to the `circle` svg path if `disableShrink={true}`.*/
    circleDisableShrink: {
      animation: 'none'
    }
  };
};
/**
* ## ARIA
*
* If the progress bar is describing the loading progress of a particular region of a page,
* you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
* attribute to `true` on that region until it has finished loading.
*/
var CircularProgress = /*#__PURE__*/_react.forwardRef(function CircularProgress(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'primary' : _props$color, _props$disableShrink = props.disableShrink, disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink, _props$size = props.size, size = _props$size === void 0 ? 40 : _props$size, style = props.style, _props$thickness = props.thickness, thickness = _props$thickness === void 0 ? 3.6 : _props$thickness, _props$value = props.value, value = _props$value === void 0 ? 0 : _props$value, _props$variant = props.variant, variant = _props$variant === void 0 ? 'indeterminate' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["classes", "className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"]);
  var circleStyle = {};
  var rootStyle = {};
  var rootProps = {};
  if (variant === 'determinate' || variant === 'static') {
    var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
    circleStyle.strokeDasharray = circumference.toFixed(3);
    rootProps['aria-valuenow'] = Math.round(value);
    circleStyle.strokeDashoffset = ("").concat(((100 - value) / 100 * circumference).toFixed(3), "px");
    rootStyle.transform = 'rotate(-90deg)';
  }
  return (
    /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, color !== 'inherit' && classes[("color").concat(_utilsCapitalizeDefault.default(color))], ({
        'determinate': classes.determinate,
        'indeterminate': classes.indeterminate,
        'static': classes.static
      })[variant]),
      style: _babelRuntimeHelpersEsmExtendsDefault.default({
        width: size,
        height: size
      }, rootStyle, style),
      ref: ref,
      role: "progressbar"
    }, rootProps, other), /*#__PURE__*/_react.createElement("svg", {
      className: classes.svg,
      viewBox: ("").concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE)
    }, /*#__PURE__*/_react.createElement("circle", {
      className: _clsxDefault.default(classes.circle, disableShrink && classes.circleDisableShrink, ({
        'determinate': classes.circleDeterminate,
        'indeterminate': classes.circleIndeterminate,
        'static': classes.circleStatic
      })[variant]),
      style: circleStyle,
      cx: SIZE,
      cy: SIZE,
      r: (SIZE - thickness) / 2,
      fill: "none",
      strokeWidth: thickness
    })))
  );
});
"development" !== "production" ? CircularProgress.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['inherit', 'primary', 'secondary']),
  /**
  * If `true`, the shrink animation is disabled.
  * This only works if variant is `indeterminate`.
  */
  disableShrink: _materialUiUtils.chainPropTypes(_propTypesDefault.default.bool, function (props) {
    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {
      return new Error('Material-UI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');
    }
    return null;
  }),
  /**
  * The size of the circle.
  * If using a number, the pixel unit is assumed.
  * If using a string, you need to provide the CSS unit, e.g '3rem'.
  */
  size: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.string]),
  /**
  * @ignore
  */
  style: _propTypesDefault.default.object,
  /**
  * The thickness of the circle.
  */
  thickness: _propTypesDefault.default.number,
  /**
  * The value of the progress indicator for the determinate variant.
  * Value between 0 and 100.
  */
  value: _propTypesDefault.default.number,
  /**
  * The variant to use.
  * Use indeterminate when there is no progress value.
  */
  variant: _materialUiUtils.chainPropTypes(_propTypesDefault.default.oneOf(['determinate', 'indeterminate', 'static']), function (props) {
    var variant = props.variant;
    if (variant === 'static') {
      throw new Error('Material-UI: `variant="static"` was deprecated. Use `variant="determinate"` instead.');
    }
    return null;
  })
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiCircularProgress',
  flip: false
})(CircularProgress);
