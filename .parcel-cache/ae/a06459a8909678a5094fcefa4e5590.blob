var helpers = require("../../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _materialUiCoreStyles = require('@material-ui/core/styles');
  var _materialUiCore = require('@material-ui/core');
  var _materialUiIconsArrowDropDown = require('@material-ui/icons/ArrowDropDown');
  var _materialUiIconsArrowDropDownDefault = _parcelHelpers.interopDefault(_materialUiIconsArrowDropDown);
  var _materialUiLabAutocomplete = require('@material-ui/lab/Autocomplete');
  var _materialUiLabAutocompleteDefault = _parcelHelpers.interopDefault(_materialUiLabAutocomplete);
  var _utilsConstants = require('../utils/constants');
  var _hooks = require('../hooks');
  var _components = require('../components');
  var _jsxFileName = "/Users/stormsheep/Documents/repos/parity/substrate-connect/projects/burnr/src/components/NodeSelector.tsx", _s = $RefreshSig$();
  const useStyles = _materialUiCoreStyles.makeStyles(theme => _materialUiCoreStyles.createStyles({
    wrapper: {
      position: 'relative',
      height: '60px',
      backgroundColor: theme.palette.background.paper,
      borderTopRightRadius: theme.spacing(0.5),
      borderTopLeftRadius: theme.spacing(0.5)
    },
    root: {
      position: 'absolute',
      zIndex: theme.zIndex.modal,
      width: '100%',
      padding: theme.spacing(1),
      paddingTop: theme.spacing(1.5),
      backgroundColor: theme.palette.background.paper,
      borderRadius: theme.spacing(0.5),
      '&.node-selector': {
        boxShadow: theme.shadows[2]
      }
    },
    button: {
      width: '100%',
      textAlign: 'left'
    },
    popper: {
      position: 'relative',
      width: '100%',
      transform: 'none !important',
      boxShadow: 'none'
    },
    acHeader: {
      paddingTop: theme.spacing(1),
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    },
    acInput: {
      width: '100%',
      '& input': {
        borderRadius: theme.spacing(0.5),
        padding: theme.spacing(1),
        border: '1px solid',
        '&:focus': {
          boxShadow: `${_materialUiCoreStyles.fade(theme.palette.primary.main, 0.25)} 0 0 0 0.2rem`,
          borderColor: theme.palette.primary.main
        }
      }
    },
    acPopper: {
      position: 'relative'
    },
    acPaper: {
      margin: 0,
      boxShadow: 'none',
      backgroundColor: 'rgba(0,0,0,0)',
      '& .MuiListSubheader-root': {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3),
        fontSize: theme.typography.h4.fontSize,
        lineHeight: `${theme.spacing(5)}px`
      }
    },
    option: {
      paddingLeft: `${theme.spacing(1)}px !important`,
      paddingRight: `${theme.spacing(1)}px !important`,
      borderRadius: theme.spacing(0.5),
      height: theme.spacing(5),
      '&:hover': {
        backgroundColor: theme.palette.primary.dark,
        color: theme.palette.getContrastText(theme.palette.primary.main)
      }
    }
  }));
  const options = Object.entries(_utilsConstants.ALL_PROVIDERS).map(([provider, settings]) => ({
    network: settings.network,
    client: settings.client,
    provider
  })).sort((a, b) => a.network > b.network ? 1 : b.network > a.network ? -1 : 0);
  function NodeSelector() {
    _s();
    const classes = useStyles();
    const [anchorEl, setAnchorEl] = _react.useState(null);
    const [localEndpoint, setLocalEndpoint] = _hooks.useLocalStorage('endpoint');
    const endpointName = localEndpoint || 'Polkadot-WsProvider';
    const [provider, setProvider] = _react.useState(_utilsConstants.ALL_PROVIDERS[endpointName].id);
    const handleOpenDropdown = event => {
      setAnchorEl(event.currentTarget);
    };
    const handleClose = (event, reason) => {
      if (reason === 'toggleInput') {
        return;
      }
      setAnchorEl(null);
    };
    const updateProvider = provider => {
      setLocalEndpoint(provider);
      setProvider(provider);
      console.log("Burnr wallet is now connected to", _utilsConstants.ALL_PROVIDERS[provider].endpoint);
      // Tis is just a temporary work around. Api should be passed on as prop without reload
      location.reload();
    };
    const open = Boolean(anchorEl);
    return (
      /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: classes.wrapper,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 133,
          columnNumber: 3
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: classes.root + (open ? ' node-selector' : ''),
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 134,
          columnNumber: 4
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_materialUiCore.ButtonBase, {
        disableRipple: true,
        className: classes.button,
        onClick: handleOpenDropdown,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 135,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_components.NodeSelectorSelected, {
        provider: _utilsConstants.ALL_PROVIDERS[provider],
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 140,
          columnNumber: 6
        }
      }), /*#__PURE__*/_reactDefault.default.createElement(_materialUiIconsArrowDropDownDefault.default, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 141,
          columnNumber: 6
        }
      })), open && /*#__PURE__*/_reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/_reactDefault.default.createElement(_materialUiCore.Typography, {
        variant: "overline",
        color: "textSecondary",
        className: classes.acHeader,
        component: "div",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 146,
          columnNumber: 6
        }
      }, "Select node provider"), /*#__PURE__*/_reactDefault.default.createElement(_materialUiLabAutocompleteDefault.default, {
        options: options,
        disablePortal: true,
        getOptionLabel: option => option.client === 'string' ? `${option.client} client` : `client`,
        open: true,
        classes: {
          popper: classes.acPopper,
          option: classes.option,
          paper: classes.acPaper
        },
        onClose: handleClose,
        /*eslint-disable-next-line @typescript-eslint/no-explicit-any*/
        onChange: (event, {provider: selected}) => {
          updateProvider(selected);
        },
        renderInput: params => /*#__PURE__*/_reactDefault.default.createElement(_materialUiCore.InputBase, {
          ref: params.InputProps.ref,
          inputProps: params.inputProps,
          autoFocus: true,
          className: classes.acInput,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 175,
            columnNumber: 8
          }
        }),
        renderOption: option => /*#__PURE__*/_reactDefault.default.createElement(_components.NodeSelectorItem, {
          provider: option,
          selected: option.provider === provider,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 183,
            columnNumber: 8
          }
        }),
        groupBy: option => option.network,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 155,
          columnNumber: 6
        }
      }))))
    );
  }
  exports.default = NodeSelector;
  _s(NodeSelector, "PvasJ1V+JQbPTug/RQX2nYSUtYY=", false, function () {
    return [useStyles, _hooks.useLocalStorage];
  });
  _c = NodeSelector;
  var _c;
  $RefreshReg$(_c, "NodeSelector");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
