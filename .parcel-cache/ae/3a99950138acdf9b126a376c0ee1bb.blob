var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _ButtonBase = require('../ButtonBase');
var _ButtonBaseDefault = _parcelHelpers.interopDefault(_ButtonBase);
var _IconButton = require('../IconButton');
var _IconButtonDefault = _parcelHelpers.interopDefault(_IconButton);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _ExpansionPanelExpansionPanelContext = require('../ExpansionPanel/ExpansionPanelContext');
var _ExpansionPanelExpansionPanelContextDefault = _parcelHelpers.interopDefault(_ExpansionPanelExpansionPanelContext);
var styles = function styles(theme) {
  var transition = {
    duration: theme.transitions.duration.shortest
  };
  return {
    /*Styles applied to the root element.*/
    root: {
      display: 'flex',
      minHeight: 8 * 6,
      transition: theme.transitions.create(['min-height', 'background-color'], transition),
      padding: theme.spacing(0, 2),
      '&:hover:not($disabled)': {
        cursor: 'pointer'
      },
      '&$expanded': {
        minHeight: 64
      },
      '&$focused': {
        backgroundColor: theme.palette.action.focus
      },
      '&$disabled': {
        opacity: theme.palette.action.disabledOpacity
      }
    },
    /*Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`.*/
    expanded: {},
    /*Pseudo-class applied to the root element if `focused={true}`.*/
    focused: {},
    /*Pseudo-class applied to the root element if `disabled={true}`.*/
    disabled: {},
    /*Styles applied to the children wrapper element.*/
    content: {
      display: 'flex',
      flexGrow: 1,
      transition: theme.transitions.create(['margin'], transition),
      margin: '12px 0',
      '&$expanded': {
        margin: '20px 0'
      }
    },
    /*Styles applied to the `IconButton` component when `expandIcon` is supplied.*/
    expandIcon: {
      transform: 'rotate(0deg)',
      transition: theme.transitions.create('transform', transition),
      '&:hover': {
        // Disable the hover effect for the IconButton,
        // because a hover effect should apply to the entire Expand button and
        // not only to the IconButton.
        backgroundColor: 'transparent'
      },
      '&$expanded': {
        transform: 'rotate(180deg)'
      }
    }
  };
};
var warnedOnce = false;
/**
* ⚠️ The ExpansionPanelSummary component was renamed to AccordionSummary to use a more common naming convention.
*
* You should use `import { AccordionSummary } from '@material-ui/core'`
* or `import AccordionSummary from '@material-ui/core/AccordionSummary'`.
*/
var ExpansionPanelSummary = /*#__PURE__*/_react.forwardRef(function ExpansionPanelSummary(props, ref) {
  if ("development" !== 'production') {
    if (!warnedOnce) {
      warnedOnce = true;
      console.error(['Material-UI: the ExpansionPanelSummary component was renamed to AccordionSummary to use a more common naming convention.', '', "You should use `import { AccordionSummary } from '@material-ui/core'`", "or `import AccordionSummary from '@material-ui/core/AccordionSummary'`"].join('\n'));
    }
  }
  var children = props.children, classes = props.classes, className = props.className, expandIcon = props.expandIcon, IconButtonProps = props.IconButtonProps, onBlur = props.onBlur, onClick = props.onClick, onFocusVisible = props.onFocusVisible, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "className", "expandIcon", "IconButtonProps", "onBlur", "onClick", "onFocusVisible"]);
  var _React$useState = _react.useState(false), focusedState = _React$useState[0], setFocusedState = _React$useState[1];
  var handleFocusVisible = function handleFocusVisible(event) {
    setFocusedState(true);
    if (onFocusVisible) {
      onFocusVisible(event);
    }
  };
  var handleBlur = function handleBlur(event) {
    setFocusedState(false);
    if (onBlur) {
      onBlur(event);
    }
  };
  var _React$useContext = _react.useContext(_ExpansionPanelExpansionPanelContextDefault.default), _React$useContext$dis = _React$useContext.disabled, disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis, expanded = _React$useContext.expanded, toggle = _React$useContext.toggle;
  var handleChange = function handleChange(event) {
    if (toggle) {
      toggle(event);
    }
    if (onClick) {
      onClick(event);
    }
  };
  return (
    /*#__PURE__*/_react.createElement(_ButtonBaseDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      focusRipple: false,
      disableRipple: true,
      disabled: disabled,
      component: "div",
      "aria-expanded": expanded,
      className: _clsxDefault.default(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),
      onFocusVisible: handleFocusVisible,
      onBlur: handleBlur,
      onClick: handleChange,
      ref: ref
    }, other), /*#__PURE__*/_react.createElement("div", {
      className: _clsxDefault.default(classes.content, expanded && classes.expanded)
    }, children), expandIcon && /*#__PURE__*/_react.createElement(_IconButtonDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.expandIcon, expanded && classes.expanded),
      edge: "end",
      component: "div",
      tabIndex: null,
      role: null,
      "aria-hidden": true
    }, IconButtonProps), expandIcon))
  );
});
"development" !== "production" ? ExpansionPanelSummary.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The content of the expansion panel summary.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The icon to display as the expand indicator.
  */
  expandIcon: _propTypesDefault.default.node,
  /**
  * Props applied to the `IconButton` element wrapping the expand icon.
  */
  IconButtonProps: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  onBlur: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onClick: _propTypesDefault.default.func,
  /**
  * Callback fired when the component is focused with a keyboard.
  * We trigger a `onFocus` callback too.
  */
  onFocusVisible: _propTypesDefault.default.func
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiExpansionPanelSummary'
})(ExpansionPanelSummary);
