var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _internalSvgIconsArrowDownward = require('../internal/svg-icons/ArrowDownward');
var _internalSvgIconsArrowDownwardDefault = _parcelHelpers.interopDefault(_internalSvgIconsArrowDownward);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _ButtonBase = require('../ButtonBase');
var _ButtonBaseDefault = _parcelHelpers.interopDefault(_ButtonBase);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: {
      cursor: 'pointer',
      display: 'inline-flex',
      justifyContent: 'flex-start',
      flexDirection: 'inherit',
      alignItems: 'center',
      '&:focus': {
        color: theme.palette.text.secondary
      },
      '&:hover': {
        color: theme.palette.text.secondary,
        '& $icon': {
          opacity: 0.5
        }
      },
      '&$active': {
        color: theme.palette.text.primary,
        // && instead of & is a workaround for https://github.com/cssinjs/jss/issues/1045
        '&& $icon': {
          opacity: 1,
          color: theme.palette.text.secondary
        }
      }
    },
    /*Pseudo-class applied to the root element if `active={true}`.*/
    active: {},
    /*Styles applied to the icon component.*/
    icon: {
      fontSize: 18,
      marginRight: 4,
      marginLeft: 4,
      opacity: 0,
      transition: theme.transitions.create(['opacity', 'transform'], {
        duration: theme.transitions.duration.shorter
      }),
      userSelect: 'none'
    },
    /*Styles applied to the icon component if `direction="desc"`.*/
    iconDirectionDesc: {
      transform: 'rotate(0deg)'
    },
    /*Styles applied to the icon component if `direction="asc"`.*/
    iconDirectionAsc: {
      transform: 'rotate(180deg)'
    }
  };
};
/**
* A button based label for placing inside `TableCell` for column sorting.
*/
var TableSortLabel = /*#__PURE__*/_react.forwardRef(function TableSortLabel(props, ref) {
  var _props$active = props.active, active = _props$active === void 0 ? false : _props$active, children = props.children, classes = props.classes, className = props.className, _props$direction = props.direction, direction = _props$direction === void 0 ? 'asc' : _props$direction, _props$hideSortIcon = props.hideSortIcon, hideSortIcon = _props$hideSortIcon === void 0 ? false : _props$hideSortIcon, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? _internalSvgIconsArrowDownwardDefault.default : _props$IconComponent, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["active", "children", "classes", "className", "direction", "hideSortIcon", "IconComponent"]);
  return (
    /*#__PURE__*/_react.createElement(_ButtonBaseDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, active && classes.active),
      component: "span",
      disableRipple: true,
      ref: ref
    }, other), children, hideSortIcon && !active ? null : /*#__PURE__*/_react.createElement(IconComponent, {
      className: _clsxDefault.default(classes.icon, classes[("iconDirection").concat(_utilsCapitalizeDefault.default(direction))])
    }))
  );
});
"development" !== "production" ? TableSortLabel.propTypes = {
  /**
  * If `true`, the label will have the active styling (should be true for the sorted column).
  */
  active: _propTypesDefault.default.bool,
  /**
  * Label contents, the arrow will be appended automatically.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The current sort direction.
  */
  direction: _propTypesDefault.default.oneOf(['asc', 'desc']),
  /**
  * Hide sort icon when active is false.
  */
  hideSortIcon: _propTypesDefault.default.bool,
  /**
  * Sort icon to use.
  */
  IconComponent: _propTypesDefault.default.elementType
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiTableSortLabel'
})(TableSortLabel);
