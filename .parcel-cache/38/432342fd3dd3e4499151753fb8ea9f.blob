var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmSlicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _babelRuntimeHelpersEsmSlicedToArrayDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmSlicedToArray);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _reactTransitionGroup = require('react-transition-group');
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _stylesTransitions = require('../styles/transitions');
var _transitionsUtils = require('../transitions/utils');
var _stylesUseTheme = require('../styles/useTheme');
var _stylesUseThemeDefault = _parcelHelpers.interopDefault(_stylesUseTheme);
var _utils = require('../utils');
var styles = function styles(theme) {
  return {
    /*Styles applied to the container element.*/
    container: {
      height: 0,
      overflow: 'hidden',
      transition: theme.transitions.create('height')
    },
    /*Styles applied to the container element when the transition has entered.*/
    entered: {
      height: 'auto',
      overflow: 'visible'
    },
    /*Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px.*/
    hidden: {
      visibility: 'hidden'
    },
    /*Styles applied to the outer wrapper element.*/
    wrapper: {
      // Hack to get children with a negative margin to not falsify the height computation.
      display: 'flex'
    },
    /*Styles applied to the inner wrapper element.*/
    wrapperInner: {
      width: '100%'
    }
  };
};
/**
* The Collapse transition is used by the
* [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.
* It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
*/
var Collapse = /*#__PURE__*/_react.forwardRef(function Collapse(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$collapsedHeigh = props.collapsedHeight, collapsedHeightProp = _props$collapsedHeigh === void 0 ? '0px' : _props$collapsedHeigh, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? _stylesTransitions.duration.standard : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _reactTransitionGroup.Transition : _props$TransitionComp, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "className", "collapsedHeight", "component", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
  var theme = _stylesUseThemeDefault.default();
  var timer = _react.useRef();
  var wrapperRef = _react.useRef(null);
  var autoTransitionDuration = _react.useRef();
  var collapsedHeight = typeof collapsedHeightProp === 'number' ? ("").concat(collapsedHeightProp, "px") : collapsedHeightProp;
  _react.useEffect(function () {
    return function () {
      clearTimeout(timer.current);
    };
  }, []);
  var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
  var nodeRef = _react.useRef(null);
  var handleRef = _utils.useForkRef(ref, enableStrictModeCompat ? nodeRef : undefined);
  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
    return function (nodeOrAppearing, maybeAppearing) {
      if (callback) {
        var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref2 = _babelRuntimeHelpersEsmSlicedToArrayDefault.default(_ref, 2), node = _ref2[0], isAppearing = _ref2[1];
        // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
        if (isAppearing === undefined) {
          callback(node);
        } else {
          callback(node, isAppearing);
        }
      }
    };
  };
  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
    node.style.height = collapsedHeight;
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  var handleEntering = normalizedTransitionCallback(function (node, isAppearing) {
    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
    var _getTransitionProps = _transitionsUtils.getTransitionProps({
      style: style,
      timeout: timeout
    }, {
      mode: 'enter'
    }), transitionDuration = _getTransitionProps.duration;
    if (timeout === 'auto') {
      var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
      node.style.transitionDuration = ("").concat(duration2, "ms");
      autoTransitionDuration.current = duration2;
    } else {
      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : ("").concat(transitionDuration, "ms");
    }
    node.style.height = ("").concat(wrapperHeight, "px");
    if (onEntering) {
      onEntering(node, isAppearing);
    }
  });
  var handleEntered = normalizedTransitionCallback(function (node, isAppearing) {
    node.style.height = 'auto';
    if (onEntered) {
      onEntered(node, isAppearing);
    }
  });
  var handleExit = normalizedTransitionCallback(function (node) {
    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
    node.style.height = ("").concat(wrapperHeight, "px");
    if (onExit) {
      onExit(node);
    }
  });
  var handleExited = normalizedTransitionCallback(onExited);
  var handleExiting = normalizedTransitionCallback(function (node) {
    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
    var _getTransitionProps2 = _transitionsUtils.getTransitionProps({
      style: style,
      timeout: timeout
    }, {
      mode: 'exit'
    }), transitionDuration = _getTransitionProps2.duration;
    if (timeout === 'auto') {
      var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
      node.style.transitionDuration = ("").concat(duration2, "ms");
      autoTransitionDuration.current = duration2;
    } else {
      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : ("").concat(transitionDuration, "ms");
    }
    node.style.height = collapsedHeight;
    if (onExiting) {
      onExiting(node);
    }
  });
  var addEndListener = function addEndListener(nodeOrNext, maybeNext) {
    var next = enableStrictModeCompat ? nodeOrNext : maybeNext;
    if (timeout === 'auto') {
      timer.current = setTimeout(next, autoTransitionDuration.current || 0);
    }
  };
  return (
    /*#__PURE__*/_react.createElement(TransitionComponent, _babelRuntimeHelpersEsmExtendsDefault.default({
      in: inProp,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: addEndListener,
      nodeRef: enableStrictModeCompat ? nodeRef : undefined,
      timeout: timeout === 'auto' ? null : timeout
    }, other), function (state, childProps) {
      return (
        /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
          className: _clsxDefault.default(classes.container, className, ({
            'entered': classes.entered,
            'exited': !inProp && collapsedHeight === '0px' && classes.hidden
          })[state]),
          style: _babelRuntimeHelpersEsmExtendsDefault.default({
            minHeight: collapsedHeight
          }, style),
          ref: handleRef
        }, childProps), /*#__PURE__*/_react.createElement("div", {
          className: classes.wrapper,
          ref: wrapperRef
        }, /*#__PURE__*/_react.createElement("div", {
          className: classes.wrapperInner
        }, children)))
      );
    })
  );
});
"development" !== "production" ? Collapse.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The content node to be collapsed.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The height of the container when collapsed.
  */
  collapsedHeight: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.string]),
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * Enable this prop if you encounter 'Function components cannot be given refs',
  * use `unstable_createStrictModeTheme`,
  * and can't forward the ref in the passed `Component`.
  */
  disableStrictModeCompat: _propTypesDefault.default.bool,
  /**
  * If `true`, the component will transition in.
  */
  in: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  onEnter: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onEntered: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onEntering: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onExit: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onExited: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onExiting: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  style: _propTypesDefault.default.object,
  /**
  * The duration for the transition, in milliseconds.
  * You may specify a single timeout for all transitions, or individually with an object.
  *
  * Set to 'auto' to automatically calculate transition time based on height.
  */
  timeout: _propTypesDefault.default.oneOfType([_propTypesDefault.default.oneOf(['auto']), _propTypesDefault.default.number, _propTypesDefault.default.shape({
    appear: _propTypesDefault.default.number,
    enter: _propTypesDefault.default.number,
    exit: _propTypesDefault.default.number
  })])
} : void 0;
Collapse.muiSupportAuto = true;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiCollapse'
})(Collapse);
