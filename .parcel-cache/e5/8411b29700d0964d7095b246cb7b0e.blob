var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _Typography = require('../Typography');
var _TypographyDefault = _parcelHelpers.interopDefault(_Typography);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _FormControlFormControlContext = require('../FormControl/FormControlContext');
var _FormControlFormControlContextDefault = _parcelHelpers.interopDefault(_FormControlFormControlContext);
var styles = {
  /*Styles applied to the root element.*/
  root: {
    display: 'flex',
    height: '0.01em',
    // Fix IE 11 flexbox alignment. To remove at some point.
    maxHeight: '2em',
    alignItems: 'center',
    whiteSpace: 'nowrap'
  },
  /*Styles applied to the root element if `variant="filled"`.*/
  filled: {
    '&$positionStart:not($hiddenLabel)': {
      marginTop: 16
    }
  },
  /*Styles applied to the root element if `position="start"`.*/
  positionStart: {
    marginRight: 8
  },
  /*Styles applied to the root element if `position="end"`.*/
  positionEnd: {
    marginLeft: 8
  },
  /*Styles applied to the root element if `disablePointerEvents=true`.*/
  disablePointerEvents: {
    pointerEvents: 'none'
  },
  /*Styles applied if the adornment is used inside <FormControl hiddenLabel />.*/
  hiddenLabel: {},
  /*Styles applied if the adornment is used inside <FormControl margin="dense" />.*/
  marginDense: {}
};
var InputAdornment = /*#__PURE__*/_react.forwardRef(function InputAdornment(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$disablePointer = props.disablePointerEvents, disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, position = props.position, variantProp = props.variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"]);
  var muiFormControl = _FormControlFormControlContext.useFormControl() || ({});
  var variant = variantProp;
  if (variantProp && muiFormControl.variant) {
    if ("development" !== 'production') {
      if (variantProp === muiFormControl.variant) {
        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');
      }
    }
  }
  if (muiFormControl && !variant) {
    variant = muiFormControl.variant;
  }
  return (
    /*#__PURE__*/_react.createElement(_FormControlFormControlContextDefault.default.Provider, {
      value: null
    }, /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, ({
        'start': classes.positionStart,
        'end': classes.positionEnd
      })[position], muiFormControl.margin === 'dense' && classes.marginDense),
      ref: ref
    }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/_react.createElement(_TypographyDefault.default, {
      color: "textSecondary"
    }, children) : children))
  );
});
"development" !== "production" ? InputAdornment.propTypes = {
  /**
  * The content of the component, normally an `IconButton` or string.
  */
  children: _propTypesDefault.default.node.isRequired,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object.isRequired,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * Disable pointer events on the root.
  * This allows for the content of the adornment to focus the input on click.
  */
  disablePointerEvents: _propTypesDefault.default.bool,
  /**
  * If children is a string then disable wrapping in a Typography component.
  */
  disableTypography: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  muiFormControl: _propTypesDefault.default.object,
  /**
  * The position this adornment should appear relative to the `Input`.
  */
  position: _propTypesDefault.default.oneOf(['start', 'end']),
  /**
  * The variant to use.
  * Note: If you are using the `TextField` component or the `FormControl` component
  * you do not have to set this manually.
  */
  variant: _propTypesDefault.default.oneOf(['standard', 'outlined', 'filled'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiInputAdornment'
})(InputAdornment);
