var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _materialUiUtils = require('@material-ui/utils');
var useEnhancedEffect = typeof window !== 'undefined' && "development" !== 'test' ? _react.useLayoutEffect : _react.useEffect;
/**
* NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
*
* This component can be useful in a variety of situations:
* - Escape hatch for broken dependencies not supporting SSR.
* - Improve the time-to-first paint on the client by only rendering above the fold.
* - Reduce the rendering time on the server.
* - Under too heavy server load, you can turn on service degradation.
*/
function NoSsr(props) {
  var children = props.children, _props$defer = props.defer, defer = _props$defer === void 0 ? false : _props$defer, _props$fallback = props.fallback, fallback = _props$fallback === void 0 ? null : _props$fallback;
  var _React$useState = _react.useState(false), mountedState = _React$useState[0], setMountedState = _React$useState[1];
  useEnhancedEffect(function () {
    if (!defer) {
      setMountedState(true);
    }
  }, [defer]);
  _react.useEffect(function () {
    if (defer) {
      setMountedState(true);
    }
  }, [defer]);
  // We need the Fragment here to force react-docgen to recognise NoSsr as a component.
  return (
    /*#__PURE__*/_react.createElement(_react.Fragment, null, mountedState ? children : fallback)
  );
}
"development" !== "production" ? NoSsr.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * You can wrap a node.
  */
  children: _propTypesDefault.default.node,
  /**
  * If `true`, the component will not only prevent server-side rendering.
  * It will also defer the rendering of the children into a different screen frame.
  */
  defer: _propTypesDefault.default.bool,
  /**
  * The fallback content to display.
  */
  fallback: _propTypesDefault.default.node
} : void 0;
if ("development" !== 'production') {
  // eslint-disable-next-line
  NoSsr['propTypes' + ''] = _materialUiUtils.exactProp(NoSsr.propTypes);
}
exports.default = NoSsr;
