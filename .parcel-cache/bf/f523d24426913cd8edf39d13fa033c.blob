var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _HiddenJs = require('./HiddenJs');
var _HiddenJsDefault = _parcelHelpers.interopDefault(_HiddenJs);
var _HiddenCss = require('./HiddenCss');
var _HiddenCssDefault = _parcelHelpers.interopDefault(_HiddenCss);
/**
* Responsively hides children based on the selected implementation.
*/
function Hidden(props) {
  var _props$implementation = props.implementation, implementation = _props$implementation === void 0 ? 'js' : _props$implementation, _props$lgDown = props.lgDown, lgDown = _props$lgDown === void 0 ? false : _props$lgDown, _props$lgUp = props.lgUp, lgUp = _props$lgUp === void 0 ? false : _props$lgUp, _props$mdDown = props.mdDown, mdDown = _props$mdDown === void 0 ? false : _props$mdDown, _props$mdUp = props.mdUp, mdUp = _props$mdUp === void 0 ? false : _props$mdUp, _props$smDown = props.smDown, smDown = _props$smDown === void 0 ? false : _props$smDown, _props$smUp = props.smUp, smUp = _props$smUp === void 0 ? false : _props$smUp, _props$xlDown = props.xlDown, xlDown = _props$xlDown === void 0 ? false : _props$xlDown, _props$xlUp = props.xlUp, xlUp = _props$xlUp === void 0 ? false : _props$xlUp, _props$xsDown = props.xsDown, xsDown = _props$xsDown === void 0 ? false : _props$xsDown, _props$xsUp = props.xsUp, xsUp = _props$xsUp === void 0 ? false : _props$xsUp, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"]);
  if (implementation === 'js') {
    return (
      /*#__PURE__*/_react.createElement(_HiddenJsDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
        lgDown: lgDown,
        lgUp: lgUp,
        mdDown: mdDown,
        mdUp: mdUp,
        smDown: smDown,
        smUp: smUp,
        xlDown: xlDown,
        xlUp: xlUp,
        xsDown: xsDown,
        xsUp: xsUp
      }, other))
    );
  }
  return (
    /*#__PURE__*/_react.createElement(_HiddenCssDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      lgDown: lgDown,
      lgUp: lgUp,
      mdDown: mdDown,
      mdUp: mdUp,
      smDown: smDown,
      smUp: smUp,
      xlDown: xlDown,
      xlUp: xlUp,
      xsDown: xsDown,
      xsUp: xsUp
    }, other))
  );
}
"development" !== "production" ? Hidden.propTypes = {
  /**
  * The content of the component.
  */
  children: _propTypesDefault.default.node,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * Specify which implementation to use.  'js' is the default, 'css' works better for
  * server-side rendering.
  */
  implementation: _propTypesDefault.default.oneOf(['js', 'css']),
  /**
  * You can use this prop when choosing the `js` implementation with server-side rendering.
  *
  * As `window.innerWidth` is unavailable on the server,
  * we default to rendering an empty component during the first mount.
  * You might want to use an heuristic to approximate
  * the screen width of the client browser screen width.
  *
  * For instance, you could be using the user-agent or the client-hints.
  * https://caniuse.com/#search=client%20hint
  */
  initialWidth: _propTypesDefault.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  /**
  * If `true`, screens this size and down will be hidden.
  */
  lgDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  lgUp: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and down will be hidden.
  */
  mdDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  mdUp: _propTypesDefault.default.bool,
  /**
  * Hide the given breakpoint(s).
  */
  only: _propTypesDefault.default.oneOfType([_propTypesDefault.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),
  /**
  * If `true`, screens this size and down will be hidden.
  */
  smDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  smUp: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and down will be hidden.
  */
  xlDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  xlUp: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and down will be hidden.
  */
  xsDown: _propTypesDefault.default.bool,
  /**
  * If `true`, screens this size and up will be hidden.
  */
  xsUp: _propTypesDefault.default.bool
} : void 0;
exports.default = Hidden;
