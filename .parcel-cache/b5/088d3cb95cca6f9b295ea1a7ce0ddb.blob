var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _FormControlFormControlState = require('../FormControl/formControlState');
var _FormControlFormControlStateDefault = _parcelHelpers.interopDefault(_FormControlFormControlState);
var _FormControlUseFormControl = require('../FormControl/useFormControl');
var _FormControlUseFormControlDefault = _parcelHelpers.interopDefault(_FormControlUseFormControl);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: _babelRuntimeHelpersEsmExtendsDefault.default({
      color: theme.palette.text.secondary
    }, theme.typography.body1, {
      lineHeight: 1,
      padding: 0,
      '&$focused': {
        color: theme.palette.primary.main
      },
      '&$disabled': {
        color: theme.palette.text.disabled
      },
      '&$error': {
        color: theme.palette.error.main
      }
    }),
    /*Styles applied to the root element if the color is secondary.*/
    colorSecondary: {
      '&$focused': {
        color: theme.palette.secondary.main
      }
    },
    /*Pseudo-class applied to the root element if `focused={true}`.*/
    focused: {},
    /*Pseudo-class applied to the root element if `disabled={true}`.*/
    disabled: {},
    /*Pseudo-class applied to the root element if `error={true}`.*/
    error: {},
    /*Pseudo-class applied to the root element if `filled={true}`.*/
    filled: {},
    /*Pseudo-class applied to the root element if `required={true}`.*/
    required: {},
    /*Styles applied to the asterisk element.*/
    asterisk: {
      '&$error': {
        color: theme.palette.error.main
      }
    }
  };
};
var FormLabel = /*#__PURE__*/_react.forwardRef(function FormLabel(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, color = props.color, _props$component = props.component, Component = _props$component === void 0 ? 'label' : _props$component, disabled = props.disabled, error = props.error, filled = props.filled, focused = props.focused, required = props.required, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "className", "color", "component", "disabled", "error", "filled", "focused", "required"]);
  var muiFormControl = _FormControlUseFormControlDefault.default();
  var fcs = _FormControlFormControlStateDefault.default({
    props: props,
    muiFormControl: muiFormControl,
    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
  });
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, classes[("color").concat(_utilsCapitalizeDefault.default(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
      ref: ref
    }, other), children, fcs.required && /*#__PURE__*/_react.createElement("span", {
      "aria-hidden": true,
      className: _clsxDefault.default(classes.asterisk, fcs.error && classes.error)
    }, "\u2009", '*'))
  );
});
"development" !== "production" ? FormLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The content of the component.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['primary', 'secondary']),
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * If `true`, the label should be displayed in a disabled state.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, the label should be displayed in an error state.
  */
  error: _propTypesDefault.default.bool,
  /**
  * If `true`, the label should use filled classes key.
  */
  filled: _propTypesDefault.default.bool,
  /**
  * If `true`, the input of this label is focused (used by `FormGroup` components).
  */
  focused: _propTypesDefault.default.bool,
  /**
  * If `true`, the label will indicate that the input is required.
  */
  required: _propTypesDefault.default.bool
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiFormLabel'
})(FormLabel);
