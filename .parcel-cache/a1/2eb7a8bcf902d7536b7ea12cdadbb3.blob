var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _Input = require('../Input');
var _InputDefault = _parcelHelpers.interopDefault(_Input);
var _FilledInput = require('../FilledInput');
var _FilledInputDefault = _parcelHelpers.interopDefault(_FilledInput);
var _OutlinedInput = require('../OutlinedInput');
var _OutlinedInputDefault = _parcelHelpers.interopDefault(_OutlinedInput);
var _InputLabel = require('../InputLabel');
var _InputLabelDefault = _parcelHelpers.interopDefault(_InputLabel);
var _FormControl = require('../FormControl');
var _FormControlDefault = _parcelHelpers.interopDefault(_FormControl);
var _FormHelperText = require('../FormHelperText');
var _FormHelperTextDefault = _parcelHelpers.interopDefault(_FormHelperText);
var _Select = require('../Select');
var _SelectDefault = _parcelHelpers.interopDefault(_Select);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var variantComponent = {
  standard: _InputDefault.default,
  filled: _FilledInputDefault.default,
  outlined: _OutlinedInputDefault.default
};
var styles = {
  /*Styles applied to the root element.*/
  root: {}
};
/**
* The `TextField` is a convenience wrapper for the most common cases (80%).
* It cannot be all things to all people, otherwise the API would grow out of control.
*
* ## Advanced Configuration
*
* It's important to understand that the text field is a simple abstraction
* on top of the following components:
*
* - [FormControl](/api/form-control/)
* - [InputLabel](/api/input-label/)
* - [FilledInput](/api/filled-input/)
* - [OutlinedInput](/api/outlined-input/)
* - [Input](/api/input/)
* - [FormHelperText](/api/form-helper-text/)
*
* If you wish to alter the props applied to the `input` element, you can do so as follows:
*
* ```jsx
* const inputProps = {
*   step: 300,
* };
*
* return <TextField id="time" type="time" inputProps={inputProps} />;
* ```
*
* For advanced cases, please look at the source of TextField by clicking on the
* "Edit this page" button above. Consider either:
*
* - using the upper case props for passing values directly to the components
* - using the underlying components directly as shown in the demos
*/
var TextField = /*#__PURE__*/_react.forwardRef(function TextField(props, ref) {
  var autoComplete = props.autoComplete, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'primary' : _props$color, defaultValue = props.defaultValue, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, FormHelperTextProps = props.FormHelperTextProps, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, helperText = props.helperText, hiddenLabel = props.hiddenLabel, id = props.id, InputLabelProps = props.InputLabelProps, inputProps = props.inputProps, InputProps = props.InputProps, inputRef = props.inputRef, label = props.label, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, placeholder = props.placeholder, _props$required = props.required, required = _props$required === void 0 ? false : _props$required, rows = props.rows, rowsMax = props.rowsMax, _props$select = props.select, select = _props$select === void 0 ? false : _props$select, SelectProps = props.SelectProps, type = props.type, value = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? 'standard' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["autoComplete", "autoFocus", "children", "classes", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "hiddenLabel", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "select", "SelectProps", "type", "value", "variant"]);
  if ("development" !== 'production') {
    if (select && !children) {
      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');
    }
  }
  var InputMore = {};
  if (variant === 'outlined') {
    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
      InputMore.notched = InputLabelProps.shrink;
    }
    if (label) {
      var _InputLabelProps$requ;
      var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;
      InputMore.label = /*#__PURE__*/_react.createElement(_react.Fragment, null, label, displayRequired && "\xA0*");
    }
  }
  if (select) {
    // unset defaults from textbox inputs
    if (!SelectProps || !SelectProps.native) {
      InputMore.id = undefined;
    }
    InputMore['aria-describedby'] = undefined;
  }
  var helperTextId = helperText && id ? ("").concat(id, "-helper-text") : undefined;
  var inputLabelId = label && id ? ("").concat(id, "-label") : undefined;
  var InputComponent = variantComponent[variant];
  var InputElement = /*#__PURE__*/_react.createElement(InputComponent, _babelRuntimeHelpersEsmExtendsDefault.default({
    "aria-describedby": helperTextId,
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    defaultValue: defaultValue,
    fullWidth: fullWidth,
    multiline: multiline,
    name: name,
    rows: rows,
    rowsMax: rowsMax,
    type: type,
    value: value,
    id: id,
    inputRef: inputRef,
    onBlur: onBlur,
    onChange: onChange,
    onFocus: onFocus,
    placeholder: placeholder,
    inputProps: inputProps
  }, InputMore, InputProps));
  return (
    /*#__PURE__*/_react.createElement(_FormControlDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className),
      disabled: disabled,
      error: error,
      fullWidth: fullWidth,
      hiddenLabel: hiddenLabel,
      ref: ref,
      required: required,
      color: color,
      variant: variant
    }, other), label && /*#__PURE__*/_react.createElement(_InputLabelDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      htmlFor: id,
      id: inputLabelId
    }, InputLabelProps), label), select ? /*#__PURE__*/_react.createElement(_SelectDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      "aria-describedby": helperTextId,
      id: id,
      labelId: inputLabelId,
      value: value,
      input: InputElement
    }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/_react.createElement(_FormHelperTextDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      id: helperTextId
    }, FormHelperTextProps), helperText))
  );
});
"development" !== "production" ? TextField.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * This prop helps users to fill forms faster, especially on mobile devices.
  * The name can be confusing, as it's more like an autofill.
  * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
  */
  autoComplete: _propTypesDefault.default.string,
  /**
  * If `true`, the `input` element will be focused during the first mount.
  */
  autoFocus: _propTypesDefault.default.bool,
  /**
  * @ignore
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The color of the component. It supports those theme colors that make sense for this component.
  */
  color: _propTypesDefault.default.oneOf(['primary', 'secondary']),
  /**
  * The default value of the `input` element.
  */
  defaultValue: _propTypesDefault.default.any,
  /**
  * If `true`, the `input` element will be disabled.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, the label will be displayed in an error state.
  */
  error: _propTypesDefault.default.bool,
  /**
  * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.
  */
  FormHelperTextProps: _propTypesDefault.default.object,
  /**
  * If `true`, the input will take up the full width of its container.
  */
  fullWidth: _propTypesDefault.default.bool,
  /**
  * The helper text content.
  */
  helperText: _propTypesDefault.default.node,
  /**
  * @ignore
  */
  hiddenLabel: _propTypesDefault.default.bool,
  /**
  * The id of the `input` element.
  * Use this prop to make `label` and `helperText` accessible for screen readers.
  */
  id: _propTypesDefault.default.string,
  /**
  * Props applied to the [`InputLabel`](/api/input-label/) element.
  */
  InputLabelProps: _propTypesDefault.default.object,
  /**
  * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
  */
  inputProps: _propTypesDefault.default.object,
  /**
  * Props applied to the Input element.
  * It will be a [`FilledInput`](/api/filled-input/),
  * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)
  * component depending on the `variant` prop value.
  */
  InputProps: _propTypesDefault.default.object,
  /**
  * Pass a ref to the `input` element.
  */
  inputRef: _materialUiUtils.refType,
  /**
  * The label content.
  */
  label: _propTypesDefault.default.node,
  /**
  * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
  */
  margin: _propTypesDefault.default.oneOf(['dense', 'none', 'normal']),
  /**
  * If `true`, a textarea element will be rendered instead of an input.
  */
  multiline: _propTypesDefault.default.bool,
  /**
  * Name attribute of the `input` element.
  */
  name: _propTypesDefault.default.string,
  /**
  * @ignore
  */
  onBlur: _propTypesDefault.default.func,
  /**
  * Callback fired when the value is changed.
  *
  * @param {object} event The event source of the callback.
  * You can pull out the new value by accessing `event.target.value` (string).
  */
  onChange: _propTypesDefault.default.func,
  /**
  * @ignore
  */
  onFocus: _propTypesDefault.default.func,
  /**
  * The short hint displayed in the input before the user enters a value.
  */
  placeholder: _propTypesDefault.default.string,
  /**
  * If `true`, the label is displayed as required and the `input` element` will be required.
  */
  required: _propTypesDefault.default.bool,
  /**
  * Number of rows to display when multiline option is set to true.
  */
  rows: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.string]),
  /**
  * Maximum number of rows to display when multiline option is set to true.
  */
  rowsMax: _propTypesDefault.default.oneOfType([_propTypesDefault.default.number, _propTypesDefault.default.string]),
  /**
  * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.
  * If this option is set you must pass the options of the select as children.
  */
  select: _propTypesDefault.default.bool,
  /**
  * Props applied to the [`Select`](/api/select/) element.
  */
  SelectProps: _propTypesDefault.default.object,
  /**
  * The size of the text field.
  */
  size: _propTypesDefault.default.oneOf(['medium', 'small']),
  /**
  * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
  */
  type: _propTypesDefault.default.string,
  /**
  * The value of the `input` element, required for a controlled component.
  */
  value: _propTypesDefault.default.any,
  /**
  * The variant to use.
  */
  variant: _propTypesDefault.default.oneOf(['filled', 'outlined', 'standard'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiTextField'
})(TextField);
