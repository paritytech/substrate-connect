var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmDefineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _babelRuntimeHelpersEsmDefinePropertyDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmDefineProperty);
var _react = require('react');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _utilsCapitalize = require('../utils/capitalize');
var _utilsCapitalizeDefault = _parcelHelpers.interopDefault(_utilsCapitalize);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: _babelRuntimeHelpersEsmDefinePropertyDefault.default({
      width: '100%',
      marginLeft: 'auto',
      boxSizing: 'border-box',
      marginRight: 'auto',
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      display: 'block'
    }, theme.breakpoints.up('sm'), {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }),
    /*Styles applied to the root element if `disableGutters={true}`.*/
    disableGutters: {
      paddingLeft: 0,
      paddingRight: 0
    },
    /*Styles applied to the root element if `fixed={true}`.*/
    fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {
      var value = theme.breakpoints.values[breakpoint];
      if (value !== 0) {
        acc[theme.breakpoints.up(breakpoint)] = {
          maxWidth: value
        };
      }
      return acc;
    }, {}),
    /*Styles applied to the root element if `maxWidth="xs"`.*/
    maxWidthXs: _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('xs'), {
      maxWidth: Math.max(theme.breakpoints.values.xs, 444)
    }),
    /*Styles applied to the root element if `maxWidth="sm"`.*/
    maxWidthSm: _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('sm'), {
      maxWidth: theme.breakpoints.values.sm
    }),
    /*Styles applied to the root element if `maxWidth="md"`.*/
    maxWidthMd: _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('md'), {
      maxWidth: theme.breakpoints.values.md
    }),
    /*Styles applied to the root element if `maxWidth="lg"`.*/
    maxWidthLg: _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('lg'), {
      maxWidth: theme.breakpoints.values.lg
    }),
    /*Styles applied to the root element if `maxWidth="xl"`.*/
    maxWidthXl: _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.up('xl'), {
      maxWidth: theme.breakpoints.values.xl
    })
  };
};
var Container = /*#__PURE__*/_react.forwardRef(function Container(props, ref) {
  var classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$fixed = props.fixed, fixed = _props$fixed === void 0 ? false : _props$fixed, _props$maxWidth = props.maxWidth, maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["classes", "className", "component", "disableGutters", "fixed", "maxWidth"]);
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth !== false && classes[("maxWidth").concat(_utilsCapitalizeDefault.default(String(maxWidth)))]),
      ref: ref
    }, other))
  );
});
"development" !== "production" ? Container.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * @ignore
  */
  children: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  node.isRequired,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * If `true`, the left and right padding is removed.
  */
  disableGutters: _propTypesDefault.default.bool,
  /**
  * Set the max-width to match the min-width of the current breakpoint.
  * This is useful if you'd prefer to design for a fixed set of sizes
  * instead of trying to accommodate a fully fluid viewport.
  * It's fluid by default.
  */
  fixed: _propTypesDefault.default.bool,
  /**
  * Determine the max-width of the container.
  * The container width grows with the size of the screen.
  * Set to `false` to disable `maxWidth`.
  */
  maxWidth: _propTypesDefault.default.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiContainer'
})(Container);
