var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmToArray = require("@babel/runtime/helpers/esm/toArray");
var _babelRuntimeHelpersEsmToArrayDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmToArray);
var _babelRuntimeHelpersEsmSlicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _babelRuntimeHelpersEsmSlicedToArrayDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmSlicedToArray);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _reactIs = require('react-is');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _Collapse = require('../Collapse');
var _CollapseDefault = _parcelHelpers.interopDefault(_Collapse);
var _Paper = require('../Paper');
var _PaperDefault = _parcelHelpers.interopDefault(_Paper);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _ExpansionPanelContext = require('./ExpansionPanelContext');
var _ExpansionPanelContextDefault = _parcelHelpers.interopDefault(_ExpansionPanelContext);
var _utilsUseControlled = require('../utils/useControlled');
var _utilsUseControlledDefault = _parcelHelpers.interopDefault(_utilsUseControlled);
var styles = function styles(theme) {
  var transition = {
    duration: theme.transitions.duration.shortest
  };
  return {
    /*Styles applied to the root element.*/
    root: {
      position: 'relative',
      transition: theme.transitions.create(['margin'], transition),
      '&:before': {
        position: 'absolute',
        left: 0,
        top: -1,
        right: 0,
        height: 1,
        content: '""',
        opacity: 1,
        backgroundColor: theme.palette.divider,
        transition: theme.transitions.create(['opacity', 'background-color'], transition)
      },
      '&:first-child': {
        '&:before': {
          display: 'none'
        }
      },
      '&$expanded': {
        margin: '16px 0',
        '&:first-child': {
          marginTop: 0
        },
        '&:last-child': {
          marginBottom: 0
        },
        '&:before': {
          opacity: 0
        }
      },
      '&$expanded + &': {
        '&:before': {
          display: 'none'
        }
      },
      '&$disabled': {
        backgroundColor: theme.palette.action.disabledBackground
      }
    },
    /*Styles applied to the root element if `square={false}`.*/
    rounded: {
      borderRadius: 0,
      '&:first-child': {
        borderTopLeftRadius: theme.shape.borderRadius,
        borderTopRightRadius: theme.shape.borderRadius
      },
      '&:last-child': {
        borderBottomLeftRadius: theme.shape.borderRadius,
        borderBottomRightRadius: theme.shape.borderRadius,
        // Fix a rendering issue on Edge
        '@supports (-ms-ime-align: auto)': {
          borderBottomLeftRadius: 0,
          borderBottomRightRadius: 0
        }
      }
    },
    /*Styles applied to the root element if `expanded={true}`.*/
    expanded: {},
    /*Styles applied to the root element if `disabled={true}`.*/
    disabled: {}
  };
};
var warnedOnce = false;
/**
* ⚠️ The ExpansionPanel component was renamed to Accordion to use a more common naming convention.
*
* You should use `import { Accordion } from '@material-ui/core'`
* or `import Accordion from '@material-ui/core/Accordion'`.
*/
var ExpansionPanel = /*#__PURE__*/_react.forwardRef(function ExpansionPanel(props, ref) {
  if ("development" !== 'production') {
    if (!warnedOnce) {
      warnedOnce = true;
      console.error(['Material-UI: the ExpansionPanel component was renamed to Accordion to use a more common naming convention.', '', "You should use `import { Accordion } from '@material-ui/core'`", "or `import Accordion from '@material-ui/core/Accordion'`"].join('\n'));
    }
  }
  var childrenProp = props.children, classes = props.classes, className = props.className, _props$defaultExpande = props.defaultExpanded, defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, expandedProp = props.expanded, onChange = props.onChange, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _CollapseDefault.default : _props$TransitionComp, TransitionProps = props.TransitionProps, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "className", "defaultExpanded", "disabled", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"]);
  var _useControlled = _utilsUseControlledDefault.default({
    controlled: expandedProp,
    default: defaultExpanded,
    name: 'ExpansionPanel',
    state: 'expanded'
  }), _useControlled2 = _babelRuntimeHelpersEsmSlicedToArrayDefault.default(_useControlled, 2), expanded = _useControlled2[0], setExpandedState = _useControlled2[1];
  var handleChange = _react.useCallback(function (event) {
    setExpandedState(!expanded);
    if (onChange) {
      onChange(event, !expanded);
    }
  }, [expanded, onChange, setExpandedState]);
  var _React$Children$toArr = _react.Children.toArray(childrenProp), _React$Children$toArr2 = _babelRuntimeHelpersEsmToArrayDefault.default(_React$Children$toArr), summary = _React$Children$toArr2[0], children = _React$Children$toArr2.slice(1);
  var contextValue = _react.useMemo(function () {
    return {
      expanded: expanded,
      disabled: disabled,
      toggle: handleChange
    };
  }, [expanded, disabled, handleChange]);
  return (
    /*#__PURE__*/_react.createElement(_PaperDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
      ref: ref,
      square: square
    }, other), /*#__PURE__*/_react.createElement(_ExpansionPanelContextDefault.default.Provider, {
      value: contextValue
    }, summary), /*#__PURE__*/_react.createElement(TransitionComponent, _babelRuntimeHelpersEsmExtendsDefault.default({
      in: expanded,
      timeout: "auto"
    }, TransitionProps), /*#__PURE__*/_react.createElement("div", {
      "aria-labelledby": summary.props.id,
      id: summary.props['aria-controls'],
      role: "region"
    }, children)))
  );
});
"development" !== "production" ? ExpansionPanel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The content of the expansion panel.
  */
  children: _materialUiUtils.chainPropTypes(_propTypesDefault.default.node.isRequired, function (props) {
    var summary = _react.Children.toArray(props.children)[0];
    if (_reactIs.isFragment(summary)) {
      return new Error("Material-UI: The ExpansionPanel doesn't accept a Fragment as a child. " + 'Consider providing an array instead.');
    }
    if (!/*#__PURE__*/_react.isValidElement(summary)) {
      return new Error('Material-UI: Expected the first child of ExpansionPanel to be a valid element.');
    }
    return null;
  }),
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * If `true`, expands the panel by default.
  */
  defaultExpanded: _propTypesDefault.default.bool,
  /**
  * If `true`, the panel will be displayed in a disabled state.
  */
  disabled: _propTypesDefault.default.bool,
  /**
  * If `true`, expands the panel, otherwise collapse it.
  * Setting this prop enables control over the panel.
  */
  expanded: _propTypesDefault.default.bool,
  /**
  * Callback fired when the expand/collapse state is changed.
  *
  * @param {object} event The event source of the callback.
  * @param {boolean} expanded The `expanded` state of the panel.
  */
  onChange: _propTypesDefault.default.func,
  /**
  * If `true`, rounded corners are disabled.
  */
  square: _propTypesDefault.default.bool,
  /**
  * The component used for the collapse effect.
  * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
  */
  TransitionComponent: _propTypesDefault.default.elementType,
  /**
  * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
  */
  TransitionProps: _propTypesDefault.default.object
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiExpansionPanel'
})(ExpansionPanel);
