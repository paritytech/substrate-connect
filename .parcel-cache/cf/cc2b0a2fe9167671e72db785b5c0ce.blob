var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmToConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _babelRuntimeHelpersEsmToConsumableArrayDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmToConsumableArray);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _react = require('react');
var _reactIs = require('react-is');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _Typography = require('../Typography');
var _TypographyDefault = _parcelHelpers.interopDefault(_Typography);
var _BreadcrumbCollapsed = require('./BreadcrumbCollapsed');
var _BreadcrumbCollapsedDefault = _parcelHelpers.interopDefault(_BreadcrumbCollapsed);
var styles = {
  /*Styles applied to the root element.*/
  root: {},
  /*Styles applied to the ol element.*/
  ol: {
    display: 'flex',
    flexWrap: 'wrap',
    alignItems: 'center',
    padding: 0,
    margin: 0,
    listStyle: 'none'
  },
  /*Styles applied to the li element.*/
  li: {},
  /*Styles applied to the separator element.*/
  separator: {
    display: 'flex',
    userSelect: 'none',
    marginLeft: 8,
    marginRight: 8
  }
};
function insertSeparators(items, className, separator) {
  return items.reduce(function (acc, current, index) {
    if (index < items.length - 1) {
      acc = acc.concat(current, /*#__PURE__*/_react.createElement("li", {
        "aria-hidden": true,
        key: ("separator-").concat(index),
        className: className
      }, separator));
    } else {
      acc.push(current);
    }
    return acc;
  }, []);
}
var Breadcrumbs = /*#__PURE__*/_react.forwardRef(function Breadcrumbs(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'nav' : _props$component, _props$expandText = props.expandText, expandText = _props$expandText === void 0 ? 'Show path' : _props$expandText, _props$itemsAfterColl = props.itemsAfterCollapse, itemsAfterCollapse = _props$itemsAfterColl === void 0 ? 1 : _props$itemsAfterColl, _props$itemsBeforeCol = props.itemsBeforeCollapse, itemsBeforeCollapse = _props$itemsBeforeCol === void 0 ? 1 : _props$itemsBeforeCol, _props$maxItems = props.maxItems, maxItems = _props$maxItems === void 0 ? 8 : _props$maxItems, _props$separator = props.separator, separator = _props$separator === void 0 ? '/' : _props$separator, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["children", "classes", "className", "component", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"]);
  var _React$useState = _react.useState(false), expanded = _React$useState[0], setExpanded = _React$useState[1];
  var renderItemsBeforeAndAfter = function renderItemsBeforeAndAfter(allItems) {
    var handleClickExpand = function handleClickExpand(event) {
      setExpanded(true);
      // The clicked element received the focus but gets removed from the DOM.
      // Let's keep the focus in the component after expanding.
      var focusable = event.currentTarget.parentNode.querySelector('a[href],button,[tabindex]');
      if (focusable) {
        focusable.focus();
      }
    };
    // This defends against someone passing weird input, to ensure that if all
    // items would be shown anyway, we just show all items without the EllipsisItem
    if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {
      if ("development" !== 'production') {
        console.error(['Material-UI: You have provided an invalid combination of props to the Breadcrumbs.', ("itemsAfterCollapse={").concat(itemsAfterCollapse, "} + itemsBeforeCollapse={").concat(itemsBeforeCollapse, "} >= maxItems={").concat(maxItems, "}")].join('\n'));
      }
      return allItems;
    }
    return [].concat(_babelRuntimeHelpersEsmToConsumableArrayDefault.default(allItems.slice(0, itemsBeforeCollapse)), [/*#__PURE__*/_react.createElement(_BreadcrumbCollapsedDefault.default, {
      "aria-label": expandText,
      key: "ellipsis",
      onClick: handleClickExpand
    })], _babelRuntimeHelpersEsmToConsumableArrayDefault.default(allItems.slice(allItems.length - itemsAfterCollapse, allItems.length)));
  };
  var allItems = _react.Children.toArray(children).filter(function (child) {
    if ("development" !== 'production') {
      if (_reactIs.isFragment(child)) {
        console.error(["Material-UI: The Breadcrumbs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
      }
    }
    return (
      /*#__PURE__*/_react.isValidElement(child)
    );
  }).map(function (child, index) {
    return (
      /*#__PURE__*/_react.createElement("li", {
        className: classes.li,
        key: ("child-").concat(index)
      }, child)
    );
  });
  return (
    /*#__PURE__*/_react.createElement(_TypographyDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
      ref: ref,
      component: Component,
      color: "textSecondary",
      className: _clsxDefault.default(classes.root, className)
    }, other), /*#__PURE__*/_react.createElement("ol", {
      className: classes.ol
    }, insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator)))
  );
});
"development" !== "production" ? Breadcrumbs.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * The breadcrumb children.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * Override the default label for the expand button.
  *
  * For localization purposes, you can use the provided [translations](/guides/localization/).
  */
  expandText: _propTypesDefault.default.string,
  /**
  * If max items is exceeded, the number of items to show after the ellipsis.
  */
  itemsAfterCollapse: _propTypesDefault.default.number,
  /**
  * If max items is exceeded, the number of items to show before the ellipsis.
  */
  itemsBeforeCollapse: _propTypesDefault.default.number,
  /**
  * Specifies the maximum number of breadcrumbs to display. When there are more
  * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
  * will be shown, with an ellipsis in between.
  */
  maxItems: _propTypesDefault.default.number,
  /**
  * Custom separator node.
  */
  separator: _propTypesDefault.default.node
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiBreadcrumbs'
})(Breadcrumbs);
