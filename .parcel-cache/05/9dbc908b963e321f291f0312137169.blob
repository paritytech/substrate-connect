var helpers = require("../../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _materialUiCoreStyles = require('@material-ui/core/styles');
  var _materialUiCore = require('@material-ui/core');
  var _utilsUtils = require('../utils/utils');
  var _polkadotUtil = require('@polkadot/util');
  var _hooksApiUseApi = require('../hooks/api/useApi');
  var _hooksApiUseApiDefault = _parcelHelpers.interopDefault(_hooksApiUseApi);
  var _jsxFileName = "/Users/stormsheep/Documents/repos/parity/substrate-connect/projects/burnr/src/components/BalanceValue.tsx", _s = $RefreshSig$();
  // @TODO get token codes from api
  const useStyles = _materialUiCoreStyles.makeStyles(theme => ({
    root: {
      display: 'inline-flex',
      paddingTop: theme.spacing(0.5),
      paddingBottom: theme.spacing(0.5),
      paddingLeft: theme.spacing(1),
      paddingRight: theme.spacing(1),
      borderRadius: theme.spacing(0.5),
      backgroundColor: props => props.colored ? theme.palette.primary.light : '',
      color: props => props.colored ? theme.palette.getContrastText(theme.palette.primary.light) : theme.palette.text.primary
    },
    blur: {
      filter: props => props.visible ? 'unset' : 'blur(5px)'
    }
  }));
  const BalanceValue = ({value, isVisible, unit = '', size, style}) => {
    _s();
    const api = _hooksApiUseApiDefault.default();
    const fBalance = _polkadotUtil.formatBalance(value, {
      withSi: false
    });
    const fUnit = _utilsUtils.transformCurrency(_polkadotUtil.formatBalance.calcSi(value.toString(), api.registry.chainDecimals[0]).value, unit);
    const isColored = parseInt(fBalance) >= 0;
    const classes = useStyles({
      colored: isColored,
      visible: isVisible
    });
    const TypographyVariant = size === 'large' ? 'subtitle1' : 'subtitle2';
    return (
      /*#__PURE__*/_reactDefault.default.createElement(_materialUiCore.Box, {
        component: "span",
        className: classes.root,
        style: style,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59,
          columnNumber: 3
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_materialUiCore.Typography, {
        variant: TypographyVariant,
        className: classes.blur,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60,
          columnNumber: 4
        }
      }, `${fBalance} ${fUnit}`))
    );
  };
  _s(BalanceValue, "noUygkZ7Ao9MAoy/G3DhYNrxdhQ=", false, function () {
    return [_hooksApiUseApiDefault.default, useStyles];
  });
  _c = BalanceValue;
  exports.default = _c2 = /*#__PURE__*/_reactDefault.default.memo(BalanceValue);
  var _c, _c2;
  $RefreshReg$(_c, "BalanceValue");
  $RefreshReg$(_c2, "%default%");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
