var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _babelRuntimeHelpersEsmObjectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmObjectWithoutProperties);
var _babelRuntimeHelpersEsmDefineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _babelRuntimeHelpersEsmDefinePropertyDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmDefineProperty);
var _react = require('react');
var _reactIs = require('react-is');
var _propTypes = require('prop-types');
var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
var _clsx = require('clsx');
var _clsxDefault = _parcelHelpers.interopDefault(_clsx);
var _materialUiUtils = require('@material-ui/utils');
var _utilsDebounce = require('../utils/debounce');
var _utilsDebounceDefault = _parcelHelpers.interopDefault(_utilsDebounce);
var _utilsOwnerWindow = require('../utils/ownerWindow');
var _utilsOwnerWindowDefault = _parcelHelpers.interopDefault(_utilsOwnerWindow);
var _utilsScrollLeft = require('../utils/scrollLeft');
var _internalAnimate = require('../internal/animate');
var _internalAnimateDefault = _parcelHelpers.interopDefault(_internalAnimate);
var _ScrollbarSize = require('./ScrollbarSize');
var _ScrollbarSizeDefault = _parcelHelpers.interopDefault(_ScrollbarSize);
var _stylesWithStyles = require('../styles/withStyles');
var _stylesWithStylesDefault = _parcelHelpers.interopDefault(_stylesWithStyles);
var _TabIndicator = require('./TabIndicator');
var _TabIndicatorDefault = _parcelHelpers.interopDefault(_TabIndicator);
var _TabScrollButton = require('../TabScrollButton');
var _TabScrollButtonDefault = _parcelHelpers.interopDefault(_TabScrollButton);
var _utilsUseEventCallback = require('../utils/useEventCallback');
var _utilsUseEventCallbackDefault = _parcelHelpers.interopDefault(_utilsUseEventCallback);
var _stylesUseTheme = require('../styles/useTheme');
var _stylesUseThemeDefault = _parcelHelpers.interopDefault(_stylesUseTheme);
var styles = function styles(theme) {
  return {
    /*Styles applied to the root element.*/
    root: {
      overflow: 'hidden',
      minHeight: 48,
      WebkitOverflowScrolling: 'touch',
      // Add iOS momentum scrolling.
      display: 'flex'
    },
    /*Styles applied to the root element if `orientation="vertical"`.*/
    vertical: {
      flexDirection: 'column'
    },
    /*Styles applied to the flex container element.*/
    flexContainer: {
      display: 'flex'
    },
    /*Styles applied to the flex container element if `orientation="vertical"`.*/
    flexContainerVertical: {
      flexDirection: 'column'
    },
    /*Styles applied to the flex container element if `centered={true}` & `!variant="scrollable"`.*/
    centered: {
      justifyContent: 'center'
    },
    /*Styles applied to the tablist element.*/
    scroller: {
      position: 'relative',
      display: 'inline-block',
      flex: '1 1 auto',
      whiteSpace: 'nowrap'
    },
    /*Styles applied to the tablist element if `!variant="scrollable"`.*/
    fixed: {
      overflowX: 'hidden',
      width: '100%'
    },
    /*Styles applied to the tablist element if `variant="scrollable"`.*/
    scrollable: {
      overflowX: 'scroll',
      // Hide dimensionless scrollbar on MacOS
      scrollbarWidth: 'none',
      // Firefox
      '&::-webkit-scrollbar': {
        display: 'none'
      }
    },
    /*Styles applied to the `ScrollButtonComponent` component.*/
    scrollButtons: {},
    /*Styles applied to the `ScrollButtonComponent` component if `scrollButtons="auto"` or scrollButtons="desktop"`.*/
    scrollButtonsDesktop: _babelRuntimeHelpersEsmDefinePropertyDefault.default({}, theme.breakpoints.down('xs'), {
      display: 'none'
    }),
    /*Styles applied to the `TabIndicator` component.*/
    indicator: {}
  };
};
var Tabs = /*#__PURE__*/_react.forwardRef(function Tabs(props, ref) {
  var ariaLabel = props['aria-label'], ariaLabelledBy = props['aria-labelledby'], action = props.action, _props$centered = props.centered, centered = _props$centered === void 0 ? false : _props$centered, childrenProp = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$indicatorColor = props.indicatorColor, indicatorColor = _props$indicatorColor === void 0 ? 'secondary' : _props$indicatorColor, onChange = props.onChange, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation, _props$ScrollButtonCo = props.ScrollButtonComponent, ScrollButtonComponent = _props$ScrollButtonCo === void 0 ? _TabScrollButtonDefault.default : _props$ScrollButtonCo, _props$scrollButtons = props.scrollButtons, scrollButtons = _props$scrollButtons === void 0 ? 'auto' : _props$scrollButtons, selectionFollowsFocus = props.selectionFollowsFocus, _props$TabIndicatorPr = props.TabIndicatorProps, TabIndicatorProps = _props$TabIndicatorPr === void 0 ? {} : _props$TabIndicatorPr, TabScrollButtonProps = props.TabScrollButtonProps, _props$textColor = props.textColor, textColor = _props$textColor === void 0 ? 'inherit' : _props$textColor, value = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? 'standard' : _props$variant, other = _babelRuntimeHelpersEsmObjectWithoutPropertiesDefault.default(props, ["aria-label", "aria-labelledby", "action", "centered", "children", "classes", "className", "component", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant"]);
  var theme = _stylesUseThemeDefault.default();
  var scrollable = variant === 'scrollable';
  var isRtl = theme.direction === 'rtl';
  var vertical = orientation === 'vertical';
  var scrollStart = vertical ? 'scrollTop' : 'scrollLeft';
  var start = vertical ? 'top' : 'left';
  var end = vertical ? 'bottom' : 'right';
  var clientSize = vertical ? 'clientHeight' : 'clientWidth';
  var size = vertical ? 'height' : 'width';
  if ("development" !== 'production') {
    if (centered && scrollable) {
      console.error('Material-UI: You can not use the `centered={true}` and `variant="scrollable"` properties ' + 'at the same time on a `Tabs` component.');
    }
  }
  var _React$useState = _react.useState(false), mounted = _React$useState[0], setMounted = _React$useState[1];
  var _React$useState2 = _react.useState({}), indicatorStyle = _React$useState2[0], setIndicatorStyle = _React$useState2[1];
  var _React$useState3 = _react.useState({
    start: false,
    end: false
  }), displayScroll = _React$useState3[0], setDisplayScroll = _React$useState3[1];
  var _React$useState4 = _react.useState({
    overflow: 'hidden',
    marginBottom: null
  }), scrollerStyle = _React$useState4[0], setScrollerStyle = _React$useState4[1];
  var valueToIndex = new Map();
  var tabsRef = _react.useRef(null);
  var tabListRef = _react.useRef(null);
  var getTabsMeta = function getTabsMeta() {
    var tabsNode = tabsRef.current;
    var tabsMeta;
    if (tabsNode) {
      var rect = tabsNode.getBoundingClientRect();
      // create a new object with ClientRect class props + scrollLeft
      tabsMeta = {
        clientWidth: tabsNode.clientWidth,
        scrollLeft: tabsNode.scrollLeft,
        scrollTop: tabsNode.scrollTop,
        scrollLeftNormalized: _utilsScrollLeft.getNormalizedScrollLeft(tabsNode, theme.direction),
        scrollWidth: tabsNode.scrollWidth,
        top: rect.top,
        bottom: rect.bottom,
        left: rect.left,
        right: rect.right
      };
    }
    var tabMeta;
    if (tabsNode && value !== false) {
      var _children = tabListRef.current.children;
      if (_children.length > 0) {
        var tab = _children[valueToIndex.get(value)];
        if ("development" !== 'production') {
          if (!tab) {
            console.error(["Material-UI: The value provided to the Tabs component is invalid.", ("None of the Tabs' children match with `").concat(value, "`."), valueToIndex.keys ? ("You can provide one of the following values: ").concat(Array.from(valueToIndex.keys()).join(', '), ".") : null].join('\n'));
          }
        }
        tabMeta = tab ? tab.getBoundingClientRect() : null;
      }
    }
    return {
      tabsMeta: tabsMeta,
      tabMeta: tabMeta
    };
  };
  var updateIndicatorState = _utilsUseEventCallbackDefault.default(function () {
    var _newIndicatorStyle;
    var _getTabsMeta = getTabsMeta(), tabsMeta = _getTabsMeta.tabsMeta, tabMeta = _getTabsMeta.tabMeta;
    var startValue = 0;
    if (tabMeta && tabsMeta) {
      if (vertical) {
        startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
      } else {
        var correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
        startValue = tabMeta.left - tabsMeta.left + correction;
      }
    }
    var newIndicatorStyle = (_newIndicatorStyle = {}, _babelRuntimeHelpersEsmDefinePropertyDefault.default(_newIndicatorStyle, start, startValue), _babelRuntimeHelpersEsmDefinePropertyDefault.default(_newIndicatorStyle, size, tabMeta ? tabMeta[size] : 0), _newIndicatorStyle);
    if (isNaN(indicatorStyle[start]) || isNaN(indicatorStyle[size])) {
      setIndicatorStyle(newIndicatorStyle);
    } else {
      var dStart = Math.abs(indicatorStyle[start] - newIndicatorStyle[start]);
      var dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
      if (dStart >= 1 || dSize >= 1) {
        setIndicatorStyle(newIndicatorStyle);
      }
    }
  });
  var scroll = function scroll(scrollValue) {
    _internalAnimateDefault.default(scrollStart, tabsRef.current, scrollValue);
  };
  var moveTabsScroll = function moveTabsScroll(delta) {
    var scrollValue = tabsRef.current[scrollStart];
    if (vertical) {
      scrollValue += delta;
    } else {
      scrollValue += delta * (isRtl ? -1 : 1);
      // Fix for Edge
      scrollValue *= isRtl && _utilsScrollLeft.detectScrollType() === 'reverse' ? -1 : 1;
    }
    scroll(scrollValue);
  };
  var handleStartScrollClick = function handleStartScrollClick() {
    moveTabsScroll(-tabsRef.current[clientSize]);
  };
  var handleEndScrollClick = function handleEndScrollClick() {
    moveTabsScroll(tabsRef.current[clientSize]);
  };
  var handleScrollbarSizeChange = _react.useCallback(function (scrollbarHeight) {
    setScrollerStyle({
      overflow: null,
      marginBottom: -scrollbarHeight
    });
  }, []);
  var getConditionalElements = function getConditionalElements() {
    var conditionalElements = {};
    conditionalElements.scrollbarSizeListener = scrollable ? /*#__PURE__*/_react.createElement(_ScrollbarSizeDefault.default, {
      className: classes.scrollable,
      onChange: handleScrollbarSizeChange
    }) : null;
    var scrollButtonsActive = displayScroll.start || displayScroll.end;
    var showScrollButtons = scrollable && (scrollButtons === 'auto' && scrollButtonsActive || scrollButtons === 'desktop' || scrollButtons === 'on');
    conditionalElements.scrollButtonStart = showScrollButtons ? /*#__PURE__*/_react.createElement(ScrollButtonComponent, _babelRuntimeHelpersEsmExtendsDefault.default({
      orientation: orientation,
      direction: isRtl ? 'right' : 'left',
      onClick: handleStartScrollClick,
      disabled: !displayScroll.start,
      className: _clsxDefault.default(classes.scrollButtons, scrollButtons !== 'on' && classes.scrollButtonsDesktop)
    }, TabScrollButtonProps)) : null;
    conditionalElements.scrollButtonEnd = showScrollButtons ? /*#__PURE__*/_react.createElement(ScrollButtonComponent, _babelRuntimeHelpersEsmExtendsDefault.default({
      orientation: orientation,
      direction: isRtl ? 'left' : 'right',
      onClick: handleEndScrollClick,
      disabled: !displayScroll.end,
      className: _clsxDefault.default(classes.scrollButtons, scrollButtons !== 'on' && classes.scrollButtonsDesktop)
    }, TabScrollButtonProps)) : null;
    return conditionalElements;
  };
  var scrollSelectedIntoView = _utilsUseEventCallbackDefault.default(function () {
    var _getTabsMeta2 = getTabsMeta(), tabsMeta = _getTabsMeta2.tabsMeta, tabMeta = _getTabsMeta2.tabMeta;
    if (!tabMeta || !tabsMeta) {
      return;
    }
    if (tabMeta[start] < tabsMeta[start]) {
      // left side of button is out of view
      var nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
      scroll(nextScrollStart);
    } else if (tabMeta[end] > tabsMeta[end]) {
      // right side of button is out of view
      var _nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);
      scroll(_nextScrollStart);
    }
  });
  var updateScrollButtonState = _utilsUseEventCallbackDefault.default(function () {
    if (scrollable && scrollButtons !== 'off') {
      var _tabsRef$current = tabsRef.current, scrollTop = _tabsRef$current.scrollTop, scrollHeight = _tabsRef$current.scrollHeight, clientHeight = _tabsRef$current.clientHeight, scrollWidth = _tabsRef$current.scrollWidth, clientWidth = _tabsRef$current.clientWidth;
      var showStartScroll;
      var showEndScroll;
      if (vertical) {
        showStartScroll = scrollTop > 1;
        showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
      } else {
        var scrollLeft = _utilsScrollLeft.getNormalizedScrollLeft(tabsRef.current, theme.direction);
        // use 1 for the potential rounding error with browser zooms.
        showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
        showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
      }
      if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
        setDisplayScroll({
          start: showStartScroll,
          end: showEndScroll
        });
      }
    }
  });
  _react.useEffect(function () {
    var handleResize = _utilsDebounceDefault.default(function () {
      updateIndicatorState();
      updateScrollButtonState();
    });
    var win = _utilsOwnerWindowDefault.default(tabsRef.current);
    win.addEventListener('resize', handleResize);
    return function () {
      handleResize.clear();
      win.removeEventListener('resize', handleResize);
    };
  }, [updateIndicatorState, updateScrollButtonState]);
  var handleTabsScroll = _react.useCallback(_utilsDebounceDefault.default(function () {
    updateScrollButtonState();
  }));
  _react.useEffect(function () {
    return function () {
      handleTabsScroll.clear();
    };
  }, [handleTabsScroll]);
  _react.useEffect(function () {
    setMounted(true);
  }, []);
  _react.useEffect(function () {
    updateIndicatorState();
    updateScrollButtonState();
  });
  _react.useEffect(function () {
    scrollSelectedIntoView();
  }, [scrollSelectedIntoView, indicatorStyle]);
  _react.useImperativeHandle(action, function () {
    return {
      updateIndicator: updateIndicatorState,
      updateScrollButtons: updateScrollButtonState
    };
  }, [updateIndicatorState, updateScrollButtonState]);
  var indicator = /*#__PURE__*/_react.createElement(_TabIndicatorDefault.default, _babelRuntimeHelpersEsmExtendsDefault.default({
    className: classes.indicator,
    orientation: orientation,
    color: indicatorColor
  }, TabIndicatorProps, {
    style: _babelRuntimeHelpersEsmExtendsDefault.default({}, indicatorStyle, TabIndicatorProps.style)
  }));
  var childIndex = 0;
  var children = _react.Children.map(childrenProp, function (child) {
    if (!/*#__PURE__*/_react.isValidElement(child)) {
      return null;
    }
    if ("development" !== 'production') {
      if (_reactIs.isFragment(child)) {
        console.error(["Material-UI: The Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
      }
    }
    var childValue = child.props.value === undefined ? childIndex : child.props.value;
    valueToIndex.set(childValue, childIndex);
    var selected = childValue === value;
    childIndex += 1;
    return (
      /*#__PURE__*/_react.cloneElement(child, {
        fullWidth: variant === 'fullWidth',
        indicator: selected && !mounted && indicator,
        selected: selected,
        selectionFollowsFocus: selectionFollowsFocus,
        onChange: onChange,
        textColor: textColor,
        value: childValue
      })
    );
  });
  var handleKeyDown = function handleKeyDown(event) {
    var target = event.target;
    // Keyboard navigation assumes that [role="tab"] are siblings
    // though we might warn in the future about nested, interactive elements
    // as a a11y violation
    var role = target.getAttribute('role');
    if (role !== 'tab') {
      return;
    }
    var newFocusTarget = null;
    var previousItemKey = orientation !== "vertical" ? 'ArrowLeft' : 'ArrowUp';
    var nextItemKey = orientation !== "vertical" ? 'ArrowRight' : 'ArrowDown';
    if (orientation !== "vertical" && theme.direction === 'rtl') {
      // swap previousItemKey with nextItemKey
      previousItemKey = 'ArrowRight';
      nextItemKey = 'ArrowLeft';
    }
    switch (event.key) {
      case previousItemKey:
        newFocusTarget = target.previousElementSibling || tabListRef.current.lastChild;
        break;
      case nextItemKey:
        newFocusTarget = target.nextElementSibling || tabListRef.current.firstChild;
        break;
      case 'Home':
        newFocusTarget = tabListRef.current.firstChild;
        break;
      case 'End':
        newFocusTarget = tabListRef.current.lastChild;
        break;
      default:
        break;
    }
    if (newFocusTarget !== null) {
      newFocusTarget.focus();
      event.preventDefault();
    }
  };
  var conditionalElements = getConditionalElements();
  return (
    /*#__PURE__*/_react.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({
      className: _clsxDefault.default(classes.root, className, vertical && classes.vertical),
      ref: ref
    }, other), conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /*#__PURE__*/_react.createElement("div", {
      className: _clsxDefault.default(classes.scroller, scrollable ? classes.scrollable : classes.fixed),
      style: scrollerStyle,
      ref: tabsRef,
      onScroll: handleTabsScroll
    }, /*#__PURE__*/_react.createElement("div", {
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      className: _clsxDefault.default(classes.flexContainer, vertical && classes.flexContainerVertical, centered && !scrollable && classes.centered),
      onKeyDown: handleKeyDown,
      ref: tabListRef,
      role: "tablist"
    }, children), mounted && indicator), conditionalElements.scrollButtonEnd)
  );
});
"development" !== "production" ? Tabs.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
  * Callback fired when the component mounts.
  * This is useful when you want to trigger an action programmatically.
  * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
  *
  * @param {object} actions This object contains all possible actions
  * that can be triggered programmatically.
  */
  action: _materialUiUtils.refType,
  /**
  * The label for the Tabs as a string.
  */
  'aria-label': _propTypesDefault.default.string,
  /**
  * An id or list of ids separated by a space that label the Tabs.
  */
  'aria-labelledby': _propTypesDefault.default.string,
  /**
  * If `true`, the tabs will be centered.
  * This property is intended for large views.
  */
  centered: _propTypesDefault.default.bool,
  /**
  * The content of the component.
  */
  children: _propTypesDefault.default.node,
  /**
  * Override or extend the styles applied to the component.
  * See [CSS API](#css) below for more details.
  */
  classes: _propTypesDefault.default.object,
  /**
  * @ignore
  */
  className: _propTypesDefault.default.string,
  /**
  * The component used for the root node.
  * Either a string to use a HTML element or a component.
  */
  component: _propTypesDefault.default./*@typescript-to-proptypes-ignore*/
  elementType,
  /**
  * Determines the color of the indicator.
  */
  indicatorColor: _propTypesDefault.default.oneOf(['primary', 'secondary']),
  /**
  * Callback fired when the value changes.
  *
  * @param {object} event The event source of the callback
  * @param {any} value We default to the index of the child (number)
  */
  onChange: _propTypesDefault.default.func,
  /**
  * The tabs orientation (layout flow direction).
  */
  orientation: _propTypesDefault.default.oneOf(['horizontal', 'vertical']),
  /**
  * The component used to render the scroll buttons.
  */
  ScrollButtonComponent: _propTypesDefault.default.elementType,
  /**
  * Determine behavior of scroll buttons when tabs are set to scroll:
  *
  * - `auto` will only present them when not all the items are visible.
  * - `desktop` will only present them on medium and larger viewports.
  * - `on` will always present them.
  * - `off` will never present them.
  */
  scrollButtons: _propTypesDefault.default.oneOf(['auto', 'desktop', 'off', 'on']),
  /**
  * If `true` the selected tab changes on focus. Otherwise it only
  * changes on activation.
  */
  selectionFollowsFocus: _propTypesDefault.default.bool,
  /**
  * Props applied to the tab indicator element.
  */
  TabIndicatorProps: _propTypesDefault.default.object,
  /**
  * Props applied to the [`TabScrollButton`](/api/tab-scroll-button/) element.
  */
  TabScrollButtonProps: _propTypesDefault.default.object,
  /**
  * Determines the color of the `Tab`.
  */
  textColor: _propTypesDefault.default.oneOf(['inherit', 'primary', 'secondary']),
  /**
  * The value of the currently selected `Tab`.
  * If you don't want any selected `Tab`, you can set this property to `false`.
  */
  value: _propTypesDefault.default.any,
  /**
  * Determines additional display behavior of the tabs:
  *
  *  - `scrollable` will invoke scrolling properties and allow for horizontally
  *  scrolling (or swiping) of the tab bar.
  *  -`fullWidth` will make the tabs grow to use all the available space,
  *  which should be used for small views, like on mobile.
  *  - `standard` will render the default state.
  */
  variant: _propTypesDefault.default.oneOf(['fullWidth', 'scrollable', 'standard'])
} : void 0;
exports.default = _stylesWithStylesDefault.default(styles, {
  name: 'MuiTabs'
})(Tabs);
